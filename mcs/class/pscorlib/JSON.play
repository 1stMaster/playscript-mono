// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package {

	import System.*;
	import System.Json.*;
	import System.Collections.Generic.*;

	public static class JSON {

		private static function ConvertJsonObjectToDynamic(jv:JsonObject):Object {
			// convert all properties
			var o:Object = new Object;
			for each (var key:String in jv.Keys) {
				var element:Object = ConvertJsonValueToDynamic(jv[key]);
				o[key] = element;
			}
			return o;
		}

		private static function ConvertJsonArrayToDynamic(jv:JsonArray):Object {
			var a:Array = new Array();
			for (var i:int=0; i < jv.Count; i++) {
				var element:Object = ConvertJsonValueToDynamic(jv[i]);
				a.push (element);
			}
			return a;
		}

		private static function ConvertJsonValueToDynamic(jv:JsonValue):Object {
			switch (jv.JsonType)
			{
			case JsonType.Object:
				return ConvertJsonObjectToDynamic(jv as JsonObject);
			case JsonType.Array:
				return ConvertJsonArrayToDynamic(jv as JsonArray);
			case JsonType.Number:
				return Number(jv);
			case JsonType.String:
				return String(jv);
			default:
				throw new Error("NotImplemented");
			}
		}
	
		public static function parse(text:String, reviver:Function = null):Object {
			// parse json
			var jv:JsonValue = System.Json.JsonValue.Parse(text);
			// convert value into dynamic object here ? 
			return ConvertJsonValueToDynamic(jv);
		}

		public static function stringify(value:Object, replacer:* = null, space:* = null):String {
			throw new System.NotImplementedException();
		}
	
		public static function encode(value:Object):String {
			throw new System.NotImplementedException();
		}
	}

}
