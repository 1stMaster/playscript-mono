// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.net {

	import System.IO.*;
	import flash.events.EventDispatcher;
	import flash.events.Event;
	import flash.events.TimerEvent;
	import flash.events.IOErrorEvent;
	import flash.utils.*;

	public class URLLoader extends EventDispatcher {

		//
		// Properties
		//
			
		public property bytesLoaded : uint { get; set; }

	 	public property bytesTotal : uint { get; set; }

 	 	public property data : * { get; set; }

 	 	public property dataFormat : String { get; set; }
 	 	
		//
		// Methods
		//

		public function URLLoader(request:URLRequest = null) {
			dataFormat = URLLoaderDataFormat.TEXT;
			mRequest = request;
		}


		public override function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void {
			super.addEventListener(type, listener, useCapture, priority, useWeakReference);
		}
 	 	
		public function close():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function load(request:URLRequest):void {
			if (request != null) {
				mRequest = request;
			}

			// load with a delay
			var timer:Timer = new Timer(1, 1);
			timer.addEventListener(TimerEvent.TIMER, doLoad);
			timer.start();
		}
		
		private function doLoad(e:Event):void
		{
			trace("URLLoader: ", mRequest.url);

			// TODO: determine scheme of url and do something appropriate (http fetch?)
			// for now we assume everything is a local file and sync load it here

			// handle file loading
			var path:String = PlayScript.Player.ResolveResourcePath(mRequest.url);
			if (!File.Exists(path))
			{
				// io error, file not found
				this.dispatchEvent(new Event(IOErrorEvent.IO_ERROR));
				return;
			}

			// file exists. read it
			var fileData:byte[] = File.ReadAllBytes(path);

			switch (dataFormat)
			{
			case URLLoaderDataFormat.BINARY:
			{
				var ba:ByteArray = new ByteArray();
				ba.writeBytes(fileData);
				ba.position = 0;
				this.data = ba;
				break;
			}
			case URLLoaderDataFormat.TEXT:
			{
				var text:String =  System.Text.Encoding.UTF8.GetString(fileData);
				this.data = text;
				break;
			}
			default:
				throw new System.NotImplementedException();
			}

			// update bytes loaded
			this.bytesLoaded = fileData.Length;
			this.bytesTotal  = fileData.Length;

			// dispatch complete event
			var de:Event = new Event(Event.COMPLETE);
			this.dispatchEvent(de);
		}
		
		private var mRequest:URLRequest;
	}

}
