// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.net {

	import System.IO.*;
	import flash.events.EventDispatcher;
	import flash.events.Event;
	import flash.events.TimerEvent;
	import flash.events.IOErrorEvent;
	import flash.utils.*;
	import System.Net.*;

	public class URLLoader extends EventDispatcher {

		//
		// Properties
		//
			
		public property bytesLoaded : uint { get; set; }

	 	public property bytesTotal : uint { get; set; }

 	 	public property data : * { get; set; }

 	 	public property dataFormat : String { get; set; }
 	 	
		//
		// Methods
		//

		public function URLLoader(request:URLRequest = null) {
			dataFormat = URLLoaderDataFormat.TEXT;
			mRequest = request;
		}


		public override function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void {
			super.addEventListener(type, listener, useCapture, priority, useWeakReference);
		}
 	 	
		public function close():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function load(request:URLRequest):void {
			if (request != null) {
				mRequest = request;
			}

			var url:String = request.url.ToLowerInvariant();
			if (url.StartsWith("http:") || url.StartsWith("https:")) {
				// handle a http load
				// load with a delay
				Timer.delayCall (doHttpLoad);

			} else {
				// load with a delay
				Timer.delayCall (doLocalLoad);
			}
		}

		private function doHttpLoad():void
		{
			var hash:String = mRequest.generateHash();

			if (PlayScript.Player.Offline) {
				// see if a cached response exists (for offline mode)
				var cachedResponse:String = PlayScript.Player.LoadWebResponseFromCache(hash);
				if (cachedResponse != null) {
					trace("URLLoader: http cached ", mRequest.url);
					
					this.bytesLoaded = cachedResponse.Length;
					this.bytesTotal  = cachedResponse.Length;
					this.data = cachedResponse;
					// dispatch complete event
					this.dispatchEvent(new Event(Event.COMPLETE));
					return;
				} else {
					// offline and no cached response, return error
					trace("URLLoader: http offline ", mRequest.url);
	//				var derror:Event = new Event(IOErrorEvent.IO_ERROR);
	//				this.dispatchEvent(derror);
					return;
				}
			}

			trace("URLLoader: http load ", mRequest.url);
			
			var wr = WebRequest.Create (mRequest.url);
			// If required by the server, set the credentials.
			wr.Credentials = CredentialCache.DefaultCredentials;
			wr.Method = mRequest.method;
			
			if (mRequest.data != null) { 
				var postData = String(mRequest.data);
				var post = wr.GetRequestStream();
				var writer = new StreamWriter(post);
				writer.Write(postData);
				writer.Close();
			}
			
			// Get the response.
			var response = HttpWebResponse(wr.GetResponse ());
			// Display the status.
			System.Console.WriteLine (response.StatusDescription);
			// Get the stream containing content returned by the server.
			var dataStream = response.GetResponseStream ();
			// Open the stream using a StreamReader for easy access.
			var reader = new StreamReader (dataStream);
			// Read the content.
			var responseFromServer = reader.ReadToEnd ();

			// update bytes loaded
			this.bytesLoaded = dataStream.Length;
			this.bytesTotal  = dataStream.Length;

			// Display the content.
			System.Console.WriteLine (responseFromServer);
			// Cleanup the streams and the response.
			reader.Close ();
			dataStream.Close ();
			response.Close ();

			this.data = responseFromServer;
			
			// dispatch complete event
			var de:Event = new Event(Event.COMPLETE);
			this.dispatchEvent(de);

			PlayScript.Player.StoreWebResponseIntoCache(hash, responseFromServer);
		}

		private function doLocalLoad():void
		{
			trace("URLLoader: local load ", mRequest.url);

			// TODO: determine scheme of url and do something appropriate (http fetch?)
			// for now we assume everything is a local file and sync load it here

			// handle file loading
			var path:String = PlayScript.Player.ResolveResourcePath(mRequest.url);
			if (!File.Exists(path))
			{
				// io error, file not found
				this.dispatchEvent(new Event(IOErrorEvent.IO_ERROR));
				return;
			}

			// file exists. read it
			var fileData:byte[] = File.ReadAllBytes(path);

			switch (dataFormat)
			{
			case URLLoaderDataFormat.BINARY:
			{
				var ba:ByteArray = new ByteArray();
				ba.writeBytes(fileData);
				ba.position = 0;
				this.data = ba;
				break;
			}
			case URLLoaderDataFormat.TEXT:
			{
				var text:String =  System.Text.Encoding.UTF8.GetString(fileData);
				this.data = text;
				break;
			}
			default:
				throw new System.NotImplementedException();
			}

			// update bytes loaded
			this.bytesLoaded = fileData.Length;
			this.bytesTotal  = fileData.Length;

			// dispatch complete event
			var de:Event = new Event(Event.COMPLETE);
			this.dispatchEvent(de);
		}
		
		private var mRequest:URLRequest;
	}

}
