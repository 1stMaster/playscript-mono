// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.display {

	import flash.geom.Point;
	import flash.text.TextSnapshot;

	public abstract class DisplayObjectContainer extends InteractiveObject {
	
		//
		// Properties
		//
	
		public property mouseChildren : Boolean { get; set; }
		
		public property numChildren : int { get { return mChildren.length; } }

 	 	public property tabChildren : Boolean { get; set; }

 	 	public property textSnapshot : TextSnapshot { get { throw new System.NotImplementedException(); } }

 	 	//
 	 	// Methods 
 	 	//
 	 	
 	 	public function DisplayObjectContainer() {
 	 	}
 	 	
 	 	private function setStageRecursive(s:Stage):void {
			mStage = s; 	 	
 	 		var len:int = mChildren.length;
 	 		for (var i:int = 0; i < len; i++) {
 	 			var child:DisplayObject = mChildren[i];
 	 			child.mStage = s;
				child.dispatchEvent (new flash.events.Event (flash.events.Event.ADDED_TO_STAGE));
				if (child is DisplayObjectContainer) {
 	 				DisplayObjectContainer(child).setStageRecursive(s);
 	 			}
 	 		}
 	 	}
 	 	
		public function addChild(child:DisplayObject):DisplayObject {
			if (child.mParent != null)
				throw new Error("Child already has a parent");
			child.mStage = mStage;
			if (child is DisplayObjectContainer) {
				DisplayObjectContainer(child).setStageRecursive(mStage);
			}

			mChildren.push(child);
			child.mParent = this;

			child.dispatchEvent (new flash.events.Event (flash.events.Event.ADDED_TO_STAGE));
			child.dispatchEvent (new flash.events.Event (flash.events.Event.ADDED));
			return child;
		}
 	 	
		public function addChildAt(child:DisplayObject, index:int):DisplayObject {
			if (child.mParent != null)
				throw new Error("Child already has a parent");
			mChildren.splice(index, 0, child);
			child.mParent = this;
			child.dispatchEvent (new flash.events.Event (flash.events.Event.ADDED_TO_STAGE));
			child.dispatchEvent (new flash.events.Event (flash.events.Event.ADDED));
			return child;
		}
 	 	
		public function areInaccessibleObjectsUnderPoint(point:Point):Boolean {
			throw new System.NotImplementedException();
//			return false;
		}
 	 	
		public function contains(child:DisplayObject):Boolean {
			return mChildren.indexOf(child) != -1;
		}
 	 	
		public function getChildAt(index:int):DisplayObject {
			return mChildren[index];
		}
 	 	
		public function getChildByName(name:String):DisplayObject {
			var len:int = mChildren.length;
			for (var i:int = 0; i < len; i++) {
				var child:DisplayObject = mChildren[i];
				if (child.name == name)
					return child;
			}
			return null;
		}
 	 	
		public function getChildIndex(child:DisplayObject):int {
			return mChildren.indexOf(child);
		}
 	 	
		public function getObjectsUnderPoint(point:Point):Array {
			throw new System.NotImplementedException();
//			return null;
		}
 	 	
		public function removeChild(child:DisplayObject):DisplayObject {
			var index:int = mChildren.indexOf(child);
			if (index >= 0) {
				removeChildAt(index);
			} else {
				throw new Error("Unable to find child.");
			}
			return child;
		}
 	 	
		public function removeChildAt(index:int):DisplayObject {
			var child:DisplayObject = mChildren[index];
			child.mStage = null;
			if (child is DisplayObjectContainer) {
				DisplayObjectContainer(child).setStageRecursive(null);
			}
			mChildren.splice(index, 1);
			return child;
		}
 	 	
		public function setChildIndex(child:DisplayObject, index:int):void {
			var oldIndex:int = mChildren.indexOf(child);
			if (oldIndex >= 0) {
				removeChildAt(oldIndex);
				addChildAt(child, index);	
			}
		}
 	 	
		public function swapChildren(child1:DisplayObject, child2:DisplayObject):void {
			throw new System.NotImplementedException();		
		}
 	 	
		public function swapChildrenAt(index1:int, index2:int):void {
			throw new System.NotImplementedException();		
		}
		
		private var mChildren:Vector.<DisplayObject> = new Vector.<DisplayObject>();

	}

}
