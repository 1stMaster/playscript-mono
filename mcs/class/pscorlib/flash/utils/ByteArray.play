// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.utils {
	import System.*;
	import System.IO.*;
	import System.IO.Compression.*;
	import System.Diagnostics.*;

	#if PLATFORM_MONOMAC
	import MonoMac.Foundation.*;
	import MonoMac.AppKit.*;
	#elif PLATFORM_MONOTOUCH
	import MonoTouch.Foundation.*;
	import MonoTouch.UIKit.*;
	#endif


	[DebuggerDisplay("length = {length}")]
	public class ByteArray implements IDataInput, IDataOutput {

		enum ByteEndian
		{
			Big,
			Little
		};
	
		//
		// Properties
		//
		
		public property bytesAvailable : uint { 
			get { return length - position; } 
		}
		
		public static property defaultObjectEncoding : uint {
			get { throw new NotImplementedException(); } 
			set { throw new NotImplementedException(); } 
		}

 	 	public property endian : String {
			get 
			{
				// convert enum to string
				switch (mEndian)
				{
				case ByteEndian.Big: return Endian.BIG_ENDIAN;
				case ByteEndian.Little: return Endian.LITTLE_ENDIAN;
				default:
					throw new NotImplementedException(); 
				}
			} 

			set 
			{
				// convert string to enum
				switch (value)
				{
				case Endian.LITTLE_ENDIAN:
					mEndian = ByteEndian.Little;
					break;
				case Endian.BIG_ENDIAN:
					mEndian = ByteEndian.Big;
					break;
				default:
					throw new NotImplementedException(); 
				}
			} 
		}

 	 	public property length : uint { 
 	 		get {return mStream.Length;}
 	 		set {mStream.SetLength(value);} 
 	 	}

 	 	public property objectEncoding : uint { 
			get { throw new NotImplementedException(); } 
			set { throw new NotImplementedException(); } 
 	 	}

 	 	public property position : uint 
 	 	{ 
 	 		get {return mStream.Position;} 
 	 		set {mStream.Position = value;} 
 	 	}

		//
		// Methods
		//

		public function ByteArray() {
			mStream = new MemoryStream();
			mReader = new BinaryReader(mStream);
			mWriter = new BinaryWriter(mStream);
		}
 	 	
		public function clear():void {
			mStream.SetLength(0);
		}
 	 	
		public function compress(algorithm:String = null):void {
			throw new NotImplementedException();
		}
 	 	
		public function deflate():void {
			throw new NotImplementedException();
		}
 	 	
		public function inflate():void {
			throw new NotImplementedException();
		}
 	 	
		public function readBoolean():Boolean {
			throw new NotImplementedException();
		//	return false;
		}
 	 	
		public function readByte():int {
			return mReader.ReadByte();
		}
 	 	
		public function readBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0):void {
			throw new NotImplementedException();
		}
 	 	
		public function readDouble():Number {
			if (mEndian != ByteEndian.Little) throw new NotImplementedException();
			return mReader.ReadDouble();
		}
 	 	
		public function readFloat():Number {
			if (mEndian != ByteEndian.Little) throw new NotImplementedException();
			return mReader.ReadSingle();
		}
 	 	
		public function readInt():int {
			if (mEndian != ByteEndian.Little) throw new NotImplementedException();
			return mReader.ReadInt32();
		}
 	 	
		public function readMultiByte(length:uint, charSet:String):String {
			throw new NotImplementedException();
		}
 	 	
		public function readObject():* {
			throw new NotImplementedException();
		}
 	 	
		public function readShort():int {
			if (mEndian == ByteEndian.Little)
			{
				return mReader.ReadInt16();
			} 
			else 
			{
				// sign extend unsigned short
				return (int(readUnsignedShort()) << 16) >> 16;
			}
		}
 	 	
		public function readUnsignedByte():uint {
			return mReader.ReadByte();
		}
 	 	
		public function readUnsignedInt():uint {
			if (mEndian == ByteEndian.Little)
			{
				return mReader.ReadUInt32();
			} 
			else 
			{
				var d:uint;
				d = uint(mReader.ReadByte()) << 24;
				d|= uint(mReader.ReadByte()) << 16;
				d|= uint(mReader.ReadByte()) << 8;
				d|= uint(mReader.ReadByte()) << 0;
				return d;
			}
		}
 	 	
		public function readUnsignedShort():uint {
			if (mEndian == ByteEndian.Little)
			{
				return mReader.ReadUInt16();
			} 
			else 
			{
				var d:uint;
				d = uint(mReader.ReadByte()) << 8;
				d|= uint(mReader.ReadByte()) << 0;
				return d;
			}
		}
 	 	
		public function readUTF():String {
			var length:uint = readUnsignedShort();
			return readUTFBytes(length);
		}
 	 	
		public function readUTFBytes(length:uint):String {
			// read bytes out of stream
			var buffer:byte[] = new byte[length];
			mStream.Read(buffer, 0, buffer.Length);
			// decode as UTF8 string
			return System.Text.Encoding.UTF8.GetString(buffer);
		}

		public function readAllUTF():String {
			var sr:StreamReader = new StreamReader(mStream);
			return sr.ReadToEnd();
		}
 	 	
		public function toJSON(k:String):* {
			throw new NotImplementedException();
		}

		public function uncompress(algorithm:String = null):void {

			var outStream:MemoryStream = new MemoryStream();

			mStream.Position = 0;
			
			switch (algorithm)
			{
			case null:
			case CompressionAlgorithm.ZLIB:
			{
				// create inflater
				var inflater =  new ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream(mStream);

				// copy stream				
				inflater.CopyTo(outStream);
			}
			break;

			case CompressionAlgorithm.LZMA:
			case CompressionAlgorithm.DEFLATE:
			{
				throw new NotImplementedException();
				/*
				var outStream:MemoryStream = new MemoryStream();
				mStream.Position = 0;
				using (DeflateStream decompressionStream = new DeflateStream(mStream, CompressionMode.Decompress))
				{
					decompressionStream.CopyTo(outStream);
				}
				*/
			}
			}

			// copy stream to our byte array
			mStream.Position = 0;
			mStream.SetLength(0);
			outStream.Position = 0;
			outStream.CopyTo(mStream);
			mStream.Position = 0;
		}
 	
		public function writeBoolean(value:Boolean):void {
			throw new NotImplementedException();
		}
 	 	
		public function writeByte(value:int):void {
			mWriter.Write(byte(value));
		}
 	 	
		public function writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0):void {
			throw new NotImplementedException();
		}
 	 	
		public function writeDouble(value:Number):void {
			if (mEndian != ByteEndian.Little) throw new NotImplementedException();
			mWriter.Write(double(value));
		}
 	 	
		public function writeFloat(value:Number):void {
			if (mEndian != ByteEndian.Little) throw new NotImplementedException();
			mWriter.Write(float(value));
		}
 	 	
		public function writeInt(value:int):void {
			if (mEndian == ByteEndian.Little)
			{
				mWriter.Write(Int32(value));
			} 
			else
			{
				mWriter.Write( byte(value >> 24) );
				mWriter.Write( byte(value >> 16) );
				mWriter.Write( byte(value >> 8) );
				mWriter.Write( byte(value >> 0) );
			}
		}
 	 	
		public function writeMultiByte(value:String, charSet:String):void {
			throw new NotImplementedException();
		}
 	 	
		public function writeObject(obj:*):void {
			throw new NotImplementedException();
		}
 	 	
		public function writeShort(value:int):void {
			if (mEndian == ByteEndian.Little)
			{
				mWriter.Write(Int16(value));
			}
			else
			{
				mWriter.Write( byte(value >> 8) );
				mWriter.Write( byte(value >> 0) );
			}
		}
 	 	
		public function writeUnsignedInt(value:uint):void {
			if (mEndian == ByteEndian.Little)
			{
				mWriter.Write(UInt32(value));
			} 
			else
			{
				mWriter.Write( byte(value >> 24) );
				mWriter.Write( byte(value >> 16) );
				mWriter.Write( byte(value >> 8) );
				mWriter.Write( byte(value >> 0) );
			}
		}
 	 	
		public function writeUTF(value:String):void {
			throw new NotImplementedException();
		}
 	 	
		public function writeUTFBytes(value:String):void {
			// encode as UTF8 string
			var buffer:byte[] = System.Text.Encoding.UTF8.GetBytes(value);
			mStream.Write (buffer, 0, buffer.Length);
		}
		
		public function writeBytes(a:byte[]):void {
			mWriter.Write(a);
		}
		
		public indexer this(index:int):int {
			get 
			{
				// this isnt the fastest thing but it works, may need our own stream implementation to do this better
				var oldPos:int = mStream.Position;
				mStream.Position = index;
				var value:int = mStream.ReadByte();
				mStream.Position = oldPos;
				return value;
			}
			set {
				// this isnt the fastest thing but it works, may need our own stream implementation to do this better
				var oldPos:int = mStream.Position;
				mStream.Position = index;
				mStream.WriteByte(byte(value));
				mStream.Position = oldPos;
			}
		}


		public function getRawStream():MemoryStream {
			return mStream;
		}

		public static function loadFromPath(path:String):ByteArray {
			var newPath = PlayScript.Player.ResolveResourcePath(path);
			var data:byte[] = System.IO.File.ReadAllBytes(newPath);
			var ba:ByteArray = new ByteArray();
			ba.writeBytes(data);
			ba.position = 0;
			return ba;
		}

		public override function toString():String
		{
			return this.ToString ();
		}

		public override function ToString():String
		{
			var oldPos:int = mStream.Position;
			mStream.Position = 0;
			var str:String = readAllUTF();
			mStream.Position = oldPos;
			return str;
		}


		var mEndian:ByteEndian = ByteEndian.Big; // bytearrays are big endian by default
		var mStream:MemoryStream;
		var mReader:BinaryReader;
		var mWriter:BinaryWriter;
		

	}

}
