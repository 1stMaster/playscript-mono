// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.utils {

	import System.AppDomain;
	import System.Reflection.*;

	public function clearInterval(id:uint):void {
		Timer.clearInterval(id);
	}

	public function clearTimeout(id:uint):void {
		Timer.clearTimeout(id);
	}
	
	public function describeType(value:*):XML {
		throw new System.NotImplementedException();
	}
	
	public function escapeMultiByte(value:String):String {
		throw new System.NotImplementedException();
	}
	
	public function getDefinitionByName(name:String):Object {
		name = name.Replace("::", ".");

		// TODO: We probably should add some caching at some point.
		// In most cases, user code is probably going to look up the same code over and over (like JSON).

		var alternativeName:String = "_root." + name;

		// we must iterate over all assemblies because Type.GetType(..) only works on the current assembly
		for each (var assembly:Assembly in AppDomain.CurrentDomain.GetAssemblies())
		{
			var t = assembly.GetType(name, false);
			if (t != null) {
				return t;
			}

			// Test the alternative name too
			t = assembly.GetType(alternativeName, false);
			if (t != null) {
				return t;
			}
		}

		return null;
	}
	
	public function getQualifiedClassName(value:*):String {
		var name:String;
		if (value is System.Type) {
			name = System.Type(value).FullName;
		} else {
			name = System.Object(value).GetType().FullName;
		}

		// Fixup some specific namespaces
		if (name.StartsWith("System."))
		{
			name = name.Substring("System.".Length);
		}
		else if (name.StartsWith("_root."))
		{
			name = name.Substring("_root.".Length);
		}

		// replace last dot with :: to conform to flash conventions
		var lastDot:int = name.LastIndexOf('.');
		if (lastDot >= 0)
		{
			name = name.Substring(0, lastDot) + "::" + name.Substring(lastDot+1);
		}
		
		return name;
	}
	
	public function getQualifiedSuperclassName(value:*):String {
		throw new System.NotImplementedException();
	}
	
	public function getTimer():int {
		return Timer.getTimer();
	}
	
	public function setInterval(closure:Function, delay:Number, ... arguments):uint {
		return Timer.setInterval(closure, delay, arguments);
	}
	
	public function setTimeout(closure:Function, delay:Number, ... arguments):uint {
		return Timer.setTimeout(closure, delay, arguments);
	}
	
	public function unescapeMultiByte(value:String):String {
		throw new System.NotImplementedException();
	}

}
