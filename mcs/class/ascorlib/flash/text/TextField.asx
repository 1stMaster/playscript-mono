package flash.text {

	import System.*;
	import flash.display.InteractiveObject;
	import flash.geom.Rectangle;
	import flash.display.DisplayObject;

	public class TextField extends InteractiveObject {
	
		//
		// Properties
		//
	
		public property alwaysShowSelection : Boolean { get; set; }

 	 	public property antiAliasType : String { get; set; }

 	 	public property autoSize : String { get; set; }

 	 	public property background : Boolean { get; set; }

 	 	public property backgroundColor : uint { get; set; }

 	 	public property border : Boolean { get; set; }

 	 	public property borderColor : uint { get; set; }

 	 	public property bottomScrollV : int { get { throw new System.NotImplementedException(); } }

		public property caretIndex : int { get { throw new System.NotImplementedException(); } }

 	 	public property condenseWhite : Boolean { get; set; }

 	 	public property defaultTextFormat : TextFormat { get; set; }

 	 	public property displayAsPassword : Boolean { get; set; }

 	 	public property embedFonts : Boolean { get; set; }

 	 	public property gridFitType : String { get; set; }

 	 	public property htmlText : String { get; set; }

		public property length : int { get { return this.text.Length; } }

 	 	public property maxChars : int { get; set; }

		public property maxScrollH : int { get { throw new System.NotImplementedException(); } }

		public property maxScrollV : int { get { throw new System.NotImplementedException(); } }

 	 	public property mouseWheelEnabled : Boolean { get; set; }

 	 	public property multiline : Boolean { get; set; }

		public property numLines : int { get { throw new System.NotImplementedException(); } }

 	 	public property restrict : String { get; set; }

 	 	public property scrollH : int { get; set; }

 	 	public property scrollV : int { get; set; }

 	 	public property selectable : Boolean { get; set; }

		public property selectionBeginIndex : int { get { throw new System.NotImplementedException(); } }

		public property selectionEndIndex : int { get { throw new System.NotImplementedException(); } }

 	 	public property sharpness : Number { get; set; }

 	 	public property styleSheet : StyleSheet { get; set; }

 	 	public property text : String { get; set; }

 	 	public property textColor : uint { get; set; }

		public property textHeight : Number { get { 
				// $$TODO
				return 12.0;
			} }

		public property textInteractionMode : String { get { throw new System.NotImplementedException(); } }

		public property textWidth : Number 
		{ 
			get 
			{ 
				return text.Length * 8; // $$TODO
			} 
		}

 	 	public property thickness : Number { get; set; }

 	 	public property type : String { get; set; }

 	 	public property useRichTextClipboard : Boolean { get; set; }

 	 	public property wordWrap : Boolean { get; set; }

		//
		// Methods
		//
		
		public function TextField() {
			this.text = "";
		}
 	 	
		public function appendText(newText:String):void {
			throw new NotImplementedException();
		}

		public function getCharBoundaries(charIndex:int):Rectangle {
			throw new NotImplementedException();
		}

		public function getCharIndexAtPoint(x:Number, y:Number):int {
			throw new NotImplementedException();
		}		

		public function getFirstCharInParagraph(charIndex:int):int {
			throw new NotImplementedException();
		}

 	 	public function getImageReference(id:String):DisplayObject {
			throw new NotImplementedException();
		}

		public function getLineIndexAtPoint(x:Number, y:Number):int {
			throw new NotImplementedException();
		}

		public function getLineIndexOfChar(charIndex:int):int {
			throw new NotImplementedException();
		}

		public function getLineLength(lineIndex:int):int {
			throw new NotImplementedException();
		}

		public function getLineMetrics(lineIndex:int):TextLineMetrics {
			throw new NotImplementedException();
		}

		public function getLineOffset(lineIndex:int):int {
			throw new NotImplementedException();
		}

		public function getLineText(lineIndex:int):String {
			throw new NotImplementedException();
		}

		public function getParagraphLength(charIndex:int):int {
			throw new NotImplementedException();
		}

		public function getTextFormat(beginIndex:int = -1, endIndex:int = -1):TextFormat {
			throw new NotImplementedException();
		}

		public static function isFontCompatible(fontName:String, fontStyle:String):Boolean {
			throw new NotImplementedException();
		}

		public function replaceSelectedText(value:String):void {
			throw new NotImplementedException();
		}

		public function replaceText(beginIndex:int, endIndex:int, newText:String):void {
			throw new NotImplementedException();
		}

		public function setSelection(beginIndex:int, endIndex:int):void {
			throw new NotImplementedException();
		}

		public function setTextFormat(format:TextFormat, beginIndex:int = -1, endIndex:int = -1):void {
			throw new NotImplementedException();
		}
	
	}

}
