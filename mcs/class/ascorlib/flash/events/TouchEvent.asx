// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.events {

	import flash.display.InteractiveObject;
	import flash.utils.ByteArray;

	public class TouchEvent extends Event {
	
 	 	//
 	 	// Constants
 	 	//
 	 	
 	 	public static const PROXIMITY_BEGIN : String = "proximityBegin";
 	 	
 	 	public static const PROXIMITY_END : String = "proximityEnd";
 	 	
 	 	public static const PROXIMITY_MOVE : String = "proximityMove";
 	 	
 	 	public static const PROXIMITY_OUT : String = "proximityOut";
 	 	
 	 	public static const PROXIMITY_OVER : String = "proximityOver";
 	 	
 	 	public static const PROXIMITY_ROLL_OUT : String = "proximityRollOut";
 	 	
 	 	public static const PROXIMITY_ROLL_OVER : String = "proximityRollOver";
 	 	
 	 	public static const TOUCH_BEGIN : String = "touchBegin";
 	 	
 	 	public static const TOUCH_END : String = "touchEnd";
 	 	
 	 	public static const TOUCH_MOVE : String = "touchMove";
 	 	
 	 	public static const TOUCH_OUT : String = "touchOut";
 	 	
 	 	public static const TOUCH_OVER : String = "touchOver";
 	 	
 	 	public static const TOUCH_ROLL_OUT : String = "touchRollOut";
 	 	
 	 	public static const TOUCH_ROLL_OVER : String = "touchRollOver";
 	 	
 	 	public static const TOUCH_TAP : String = "touchTap";
	
		//
		// Properties
		//
	
		public property altKey : Boolean { get; set; }

		public property commandKey : Boolean { get; set; }

		public property controlKey : Boolean { get; set; }

		public property ctrlKey : Boolean { get; set; }

		public property isPrimaryTouchPoint : Boolean { get; set; }

		public property isRelatedObjectInaccessible : Boolean { get; set; }

		public property isTouchPointCanceled : Boolean { get; set; }

		public property localX : Number { get; set; }

		public property localY : Number { get; set; }

		public property pressure : Number { get; set; }

		public property relatedObject : InteractiveObject { get; set; }

		public property shiftKey : Boolean { get; set; }

		public property sizeX : Number { get; set; }

		public property sizeY : Number { get; set; }

		public property stageX : Number { get; set;}

		public property stageY : Number { get; set;}

		public property timestamp : Number { get; set; }

		public property touchIntent : String { get; set; }

		public property touchPointID : int { get; set; }

		//
		// Methods
		//
 	 	
		public function TouchEvent(type:String, bubbles:Boolean = true, cancelable:Boolean = false, touchPointID:int = 0, 
			isPrimaryTouchPoint:Boolean = false, localX:Number = NaN, localY:Number = NaN, sizeX:Number = NaN, 
			sizeY:Number = NaN, pressure:Number = NaN, relatedObject:InteractiveObject = null, ctrlKey:Boolean = false, 
			altKey:Boolean = false, shiftKey:Boolean = false, commandKey:Boolean = false, controlKey:Boolean = false, 
			timestamp:Number = NaN, touchIntent:String = null, samples:ByteArray = null, isTouchPointCanceled:Boolean = false) {

			super(type);

			this.touchPointID = touchPointID;
			this.localX = localX;
			this.localY = localY;
			this.stageX = localX;
			this.stageY = localY;
			this.sizeX  = 1.0;
			this.sizeY  = 1.0;
			this.pressure = pressure;
		}
 	 	
		public override function clone():Event {
			throw new System.NotImplementedException();
		}

    	public function getSamples(buffer:ByteArray, append:Boolean = false):uint {
			throw new System.NotImplementedException();
    	}
 	 	
		public function isToolButtonDown(index:int):Boolean {
			throw new System.NotImplementedException();
		}
 	 	
		public override function toString():String {
			throw new System.NotImplementedException();
		}
 	 	
		public function updateAfterEvent():void {
			throw new System.NotImplementedException();
		}

		
	}

}
