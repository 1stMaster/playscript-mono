// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.display {

	import flash.utils.ByteArray;
	import flash.net.URLRequest;
	import flash.system.LoaderContext;
	import flash.events.*;
	import flash.desktop.IFilePromise;

	public class Loader extends DisplayObjectContainer {
	
		//
		// Properties
		//
	
		public property content : DisplayObject { get { return mContent; } }

 	 	public property contentLoaderInfo : LoaderInfo { get { return mLoaderInfo; } }

 	 	public property uncaughtErrorEvents : UncaughtErrorEvents { get { return null; } }

 	 	//
 	 	// Methods
 	 	//
 	 	
		public function Loader() {
		}
 	 	
		public function close():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function load(request:URLRequest, context:LoaderContext = null):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function loadBytes(bytes:ByteArray, context:LoaderContext = null):void {
			// note that this code assumes that bytes is a bitmap, but it may not be
			var bd:BitmapData = BitmapData.loadFromByteArray(bytes);

			// set content as bitmap
			mContent = new Bitmap(bd);
			
			// store content in content loader info (also)
			this.contentLoaderInfo.content = mContent;
		
			// dispatch complete event
			var e:Event = new Event(Event.COMPLETE);
			e.target = this.contentLoaderInfo;
			this.contentLoaderInfo.dispatchEvent(e);
		}
 	 	
		public function loadFilePromise(promise:IFilePromise, context:LoaderContext = null):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function unload():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function unloadAndStop(gc:Boolean = true):void {
			throw new System.NotImplementedException();
		}
		
		
		private function doLoad():void {
			throw new System.NotImplementedException();		
		}
		
		var mContent:DisplayObject = null;
		var mLoaderInfo:LoaderInfo = new LoaderInfo();
	
	}

}
