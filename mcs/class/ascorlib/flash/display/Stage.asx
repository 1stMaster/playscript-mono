package flash.display {

	import flash.events.EventDispatcher;
	import flash.geom.Rectangle;
	import flash.text.TextSnapshot;
	import flash.events.Event;
	import flash.media.StageVideo;

	public class Stage extends DisplayObjectContainer {
	
		//
		// Properties
		//
	
 		public property align : String { get; set; }

 	 	public property allowsFullScreen : Boolean { get { return false; } }

 	 	public property allowsFullScreenInteractive : Boolean { get { return false; } }

 	 	public property autoOrients : Boolean { get; set; }

 	 	public property color : uint { get; set; }

 	 	public property colorCorrection : String { get; set; }

 	 	public property colorCorrectionSupport : String { get { return null; } }

 	 	public property deviceOrientation : String { get { return null; } }
 	 	
 	 	public property displayState : String { get; set; }

 	 	public property focus : InteractiveObject { get; set; }

 	 	public property frameRate : Number { get; set; }

 	 	public property fullScreenHeight : uint { get; set; }

 	 	public property fullScreenSourceRect : Rectangle { get; set; }
		
		public property fullScreenWidth : uint { get; set; }

 	 //	public override property height : Number { get { return 0; } set { } }

 	 	public override property mouseChildren : Boolean { get { return false; } set { } }

 	 	public property nativeWindow : NativeWindow { get { return null; } }

 	 	public override property numChildren : int { get { return 0; } }

 	 	public property orientation : String { get { return null; } }

 	 	public property quality : String { get; set; }

 	 	public property scaleMode : String { get; set; }

 	 	public property showDefaultContextMenu : Boolean { get; set; }

 	 	public property softKeyboardRect : Rectangle { get { return null; } }

		public property stage3Ds : Vector.<Stage3D> { get { return mStage3Ds; } }

 	 	public property stageFocusRect : Boolean { get; set; }

 	 	public property stageHeight : int { get; set;}

 	 	public property stageVideos : Vector.<StageVideo> { get { return null; } }

 	 	public property stageWidth : int { get; set; }

 	 	public property supportedOrientations : Vector.<String> { get { return null; } }

 	 	public static property supportsOrientationChange : Boolean { get { return false; } }

 	 	public override property tabChildren : Boolean { get; set; }

 	 	public override property textSnapshot : TextSnapshot { get { return null; } }

 	 //	public override property width : Number { get { return 0.0; } set { } }

 	 	public property wmodeGPU : Boolean { get { return false; } }

		//
		// Methods
		// 
		
		public function Stage(width:int, height:int) {
			this.stageWidth = width;
			this.stageHeight = height;
			this.fullScreenWidth = uint(width); 
			this.fullScreenHeight = uint(height);
	
			var stage3D = new Stage3D(); 
			mStage3Ds.push( stage3D );
		}
		
		public function onEnterFrame():void {
			// dispatch event
			dispatchEvent (new flash.events.Event (flash.events.Event.ENTER_FRAME));
		}

		public override function addChild(child:DisplayObject):DisplayObject {
			return super.addChild(child);
		}
 	 	
		public override function addChildAt(child:DisplayObject, index:int):DisplayObject {
			return super.addChildAt(child, index);
		}
 	 	
		public function assignFocus(objectToFocus:InteractiveObject, direction:String):void {
			throw new System.NotImplementedException();
		}
 	 	
		public override function dispatchEvent(ev:Event):Boolean {
			return super.dispatchEvent(ev);	
		}
 	 	
		public override function hasEventListener(type:String):Boolean {
			return super.hasEventListener(type);
		}
 	 	
		public function invalidate():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function isFocusInaccessible():Boolean {
			throw new System.NotImplementedException();
		}
 	 	
		public override function removeChildAt(index:int):DisplayObject {
			return super.removeChildAt(index);
		}
 	 	
		public function setAspectRatio(newAspectRatio:String):void {
			throw new System.NotImplementedException();
		}
 	 	
		public override function setChildIndex(child:DisplayObject, index:int):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function setOrientation(newOrientation:String):void {
			throw new System.NotImplementedException();
		}
 	 	
		public override function swapChildrenAt(index1:int, index2:int):void {
			throw new System.NotImplementedException();
		}
 	 	
		public override function willTrigger(type:String):Boolean {
			throw new System.NotImplementedException();
		//	return false;
		}
		
		private var mStage3Ds:Vector.<Stage3D> = [];
	}

}
