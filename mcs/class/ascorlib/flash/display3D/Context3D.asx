package flash.display3D {

	import flash.events.EventDispatcher;
	import flash.display.BitmapData;
	import flash.utils.ByteArray;
	import flash.geom.Matrix3D;
	import flash.geom.Rectangle;
	import flash.display3D.textures.*;
	
	public class Context3D extends EventDispatcher {
	
		//
		// Properties
		//
	
		public property driverInfo : String { get { return null; } }

		public property enableErrorChecking : Boolean { get; set; }

		//
		// Methods
		//
		
		public function clear(red:Number = 0.0, green:Number = 0.0, blue:Number = 0.0, alpha:Number = 1.0, 
			depth:Number = 1.0, stencil:uint = 0, mask:uint = 0xffffffff):void {
		}
		
		public function configureBackBuffer(width:int, height:int, antiAlias:int, 
			enableDepthAndStencil:Boolean = true, wantsBestResolution:Boolean = false):void {
		}
	
		public function createCubeTexture(size:int, format:String, optimizeForRenderToTexture:Boolean, streamingLevels:int = 0):CubeTexture {
			return null;
		}

 	 	public function createIndexBuffer(numIndices:int):IndexBuffer3D {
 	 		return null;
 	 	}
 	 	
		public function createProgram():Program3D {
			return null;
		}
 	 	
		public function createTexture(width:int, height:int, format:String, 
			optimizeForRenderToTexture:Boolean, streamingLevels:int = 0):Texture {
			return null;
		}

 	 	public function createVertexBuffer(numVertices:int, data32PerVertex:int):VertexBuffer3D {
			return null; 	 	
 	 	}
 	 	
		public function dispose():void {
		}
 	 	
		public function drawToBitmapData(destination:BitmapData):void {
		}
 	 	
		public function drawTriangles(indexBuffer:IndexBuffer3D, firstIndex:int = 0, numTriangles:int = -1):void {
		}
 	 	
		public function present():void {
		}
 	 	
		public function setBlendFactors(sourceFactor:String, destinationFactor:String):void {
		}
 	 	
		public function setColorMask(red:Boolean, green:Boolean, blue:Boolean, alpha:Boolean):void {
		}
 	 	
		public function setCulling(triangleFaceToCull:String):void {
		}
 	 	
		public function setDepthTest(depthMask:Boolean, passCompareMode:String):void {
		}
 	 	
		public function setProgram(program:Program3D):void {
		}
 	 	
		public function setProgramConstantsFromByteArray(programType:String, firstRegister:int, 
			numRegisters:int, data:ByteArray, byteArrayOffset:uint):void {
		}
 	 	
		public function setProgramConstantsFromMatrix(programType:String, firstRegister:int, matrix:Matrix3D, 
			transposedMatrix:Boolean = false):void {
		}
 	 	
		public function setProgramConstantsFromVector(programType:String, firstRegister:int, data:Vector.<Number>, numRegisters:int = -1):void {
		}
 	 	
 	 	public function setRenderToBackBuffer():void {
 	 	}
 	 	
		public function setRenderToTexture(texture:TextureBase, enableDepthAndStencil:Boolean = false, antiAlias:int = 0, surfaceSelector:int = 0):void {
		}
 	 	
		public function setScissorRectangle(rectangle:Rectangle):void {
		}
 	 	
		public function setStencilActions(triangleFace:String = "frontAndBack", compareMode:String = "always", actionOnBothPass:String = "keep", 
			actionOnDepthFail:String = "keep", actionOnDepthPassStencilFail:String = "keep"):void {
		}
 	 	
		public function setStencilReferenceValue(referenceValue:uint, readMask:uint = 255, writeMask:uint = 255):void {
		}
 	 	
		public function setTextureAt(sampler:int, texture:TextureBase):void {
		}
 	 	
		public function setVertexBufferAt(index:int, buffer:VertexBuffer3D, bufferOffset:int = 0, format:String = "float4"):void {
		}
	
	}

}
