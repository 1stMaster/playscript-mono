// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

//#line 2 "as-parser.jay"
//ipt compiler
//
// as-parser.jay: The Parser for the ActionScr
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//			Ben Cooley		(bcooley@zynga.com) - ActionScript
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using Mono.CSharp;
using Linq = Mono.CSharp.Linq;
using Enum = Mono.CSharp.Enum;
using Attribute = Mono.CSharp.Attribute;
using Delegate = Mono.CSharp.Delegate;
using Nullable = Mono.CSharp.Nullable;

namespace Mono.ActionScript
{
	/// <summary>
	///    The ActionScript Parser
	/// </summary>
	public class ActionScriptParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		const string RootNs = "_root";
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
		Constructor current_constructor;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
//#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives package_declaration opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN error",
//t    "import_directives : import_directive",
//t    "import_directives : import_directives import_directive",
//t    "import_directive : import_package",
//t    "import_package : IMPORT namespace_or_type_expr DOT STAR SEMICOLON",
//t    "import_package : IMPORT typeof_type_expression SEMICOLON",
//t    "import_package : IMPORT IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "import_package : IMPORT error",
//t    "$$2 :",
//t    "$$3 :",
//t    "package_declaration : opt_attributes PACKAGE opt_package_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_package_type_declarations CLOSE_BRACE",
//t    "opt_package_name :",
//t    "opt_package_name : package_name",
//t    "package_name : IDENTIFIER",
//t    "package_name : package_name DOT IDENTIFIER",
//t    "package_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_using_directives :",
//t    "opt_using_directives : import_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_package_type_declarations :",
//t    "opt_package_type_declarations : package_type_declarations",
//t    "package_type_declarations : package_type_declaration",
//t    "package_type_declarations : package_type_declarations package_type_declaration",
//t    "package_type_declaration : type_declaration",
//t    "package_type_declaration : attribute_sections CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "$$12 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST IDENTIFIER COLON type $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers VAR IDENTIFIER COLON member_type $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS opt_method_type $$22 opt_type_parameter_constraints_clauses",
//t    "$$23 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION_GET method_declaration_name OPEN_PARENS $$23 opt_formal_parameter_list CLOSE_PARENS COLON member_type",
//t    "$$24 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION_SET method_declaration_name OPEN_PARENS $$24 opt_formal_parameter_list CLOSE_PARENS COLON member_type",
//t    "$$25 :",
//t    "$$26 :",
//t    "$$27 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL FUNCTION $$25 method_declaration_name OPEN_PARENS $$26 opt_formal_parameter_list CLOSE_PARENS COLON VOID $$27 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers FUNCTION modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS COLON member_type",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name error",
//t    "opt_method_type :",
//t    "opt_method_type : COLON member_type",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON error",
//t    "$$28 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type ASSIGN $$28 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$29 :",
//t    "$$30 :",
//t    "$$31 :",
//t    "property_declaration : opt_attributes opt_modifiers PROPERTY member_declaration_name COLON member_type $$29 OPEN_BRACE $$30 accessor_declarations $$31 CLOSE_BRACE",
//t    "$$32 :",
//t    "$$33 :",
//t    "$$34 :",
//t    "indexer_declaration : opt_attributes opt_modifiers INDEXER indexer_declaration_name COLON member_type OPEN_BRACKET $$32 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$33 accessor_declarations $$34 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$35 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$35 accessor_body",
//t    "$$36 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$36 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$37 :",
//t    "$$38 :",
//t    "$$39 :",
//t    "$$40 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$37 type_declaration_name $$38 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$39 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$40 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$41 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$41 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$42 :",
//t    "operator_declarator : OPERATOR overloadable_operator OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS COLON operator_type",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$43 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR OPEN_PARENS $$43 opt_formal_parameter_list CLOSE_PARENS COLON type",
//t    "$$44 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR OPEN_PARENS $$44 opt_formal_parameter_list CLOSE_PARENS COLON type",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "$$45 :",
//t    "destructor_declaration : opt_attributes opt_modifiers FUNCTION TILDE $$45 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$46 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type $$46 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$47 :",
//t    "$$48 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type OPEN_BRACE $$47 event_accessor_declarations $$48 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$49 :",
//t    "opt_event_initializer : ASSIGN $$49 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$50 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$50 event_variable_initializer",
//t    "$$51 :",
//t    "event_variable_initializer : $$51 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$52 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$52 event_accessor_block",
//t    "$$53 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$53 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "$$54 :",
//t    "$$55 :",
//t    "$$56 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$54 OPEN_BRACE $$55 opt_enum_member_declarations $$56 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$57 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$57 ASSIGN constant_expression",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$58 :",
//t    "$$59 :",
//t    "$$60 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$58 opt_formal_parameter_list CLOSE_PARENS $$59 opt_type_parameter_constraints_clauses $$60 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$61 :",
//t    "type_declaration_name : IDENTIFIER $$61 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : STAR",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : SUPER DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : SUPER open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : SUPER OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$62 :",
//t    "new_expr_type : $$62 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "array_initializer : OPEN_BRACKET_EXPR CLOSE_BRACKET",
//t    "array_initializer : OPEN_BRACKET_EXPR variable_initializer_list opt_comma CLOSE_BRACKET",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$63 :",
//t    "typeof_expression : TYPEOF $$63 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : identifier_inside_body generic_dimension",
//t    "unbound_type_name : qualified_alias_member identifier_inside_body generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
//t    "unbound_type_name : namespace_or_type_expr DOT identifier_inside_body generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "$$64 :",
//t    "anonymous_method_expression : FUNCTION opt_anonymous_method_signature $$64 block",
//t    "$$65 :",
//t    "anonymous_method_expression : ASYNC FUNCTION opt_anonymous_method_signature $$65 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$66 :",
//t    "anonymous_method_signature : OPEN_PARENS $$66 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression_or_error",
//t    "conditional_expression : null_coalescing_expression INTERR expression error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$67 :",
//t    "lambda_expression_body_simple : $$67 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$68 :",
//t    "lambda_expression : IDENTIFIER ARROW $$68 lambda_expression_body",
//t    "$$69 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$69 lambda_expression_body",
//t    "$$70 :",
//t    "$$71 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$70 opt_lambda_parameter_list CLOSE_PARENS ARROW $$71 lambda_expression_body",
//t    "$$72 :",
//t    "$$73 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$72 opt_lambda_parameter_list CLOSE_PARENS ARROW $$73 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : array_initializer",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$74 :",
//t    "$$75 :",
//t    "$$76 :",
//t    "$$77 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$74 type_declaration_name $$75 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$76 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$77 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : NATIVE",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_extends :",
//t    "opt_class_extends : EXTENDS base_type_name",
//t    "opt_class_extends : EXTENDS base_type_name error",
//t    "opt_class_implements :",
//t    "opt_class_implements : IMPLEMENTS type_list",
//t    "opt_class_implements : IMPLEMENTS type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$78 :",
//t    "block : OPEN_BRACE $$78 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$79 :",
//t    "block_prepared : OPEN_BRACE $$79 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$80 :",
//t    "labeled_statement : identifier_inside_body COLON $$80 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : VOID",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "$$81 :",
//t    "block_variable_declaration : VAR identifier_inside_body COLON variable_type $$81 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$82 :",
//t    "block_variable_declaration : VAR identifier_inside_body $$82 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$83 :",
//t    "block_variable_declaration : CONST identifier_inside_body COLON variable_type $$83 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$84 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$84 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$85 :",
//t    "switch_section : switch_labels $$85 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "do_statement : DO embedded_statement error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$86 :",
//t    "for_statement : FOR open_parens_any $$86 for_statement_cont",
//t    "$$87 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$87 for_condition_and_iterator_part embedded_statement",
//t    "for_statement_cont : error",
//t    "$$88 :",
//t    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$88 for_iterator_part",
//t    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
//t    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
//t    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
//t    "close_parens_close_brace : CLOSE_PARENS",
//t    "close_parens_close_brace : CLOSE_BRACE",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$89 :",
//t    "for_initializer : variable_type identifier_inside_body $$89 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOR_EACH open_parens_any type error",
//t    "$$90 :",
//t    "foreach_statement : FOR_EACH open_parens_any VAR identifier_inside_body COLON type IN expression CLOSE_PARENS $$90 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS SEMICOLON",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "catch_clause : CATCH block",
//t    "$$91 :",
//t    "catch_clause : CATCH open_parens_any IDENTIFIER COLON type CLOSE_PARENS $$91 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$92 :",
//t    "unsafe_statement : UNSAFE $$92 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$93 :",
//t    "$$94 :",
//t    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$93 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$94 embedded_statement",
//t    "$$95 :",
//t    "$$96 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$95 using_initialization CLOSE_PARENS $$96 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$97 :",
//t    "from_clause : FROM identifier_inside_body IN $$97 expression_or_error",
//t    "$$98 :",
//t    "from_clause : FROM type identifier_inside_body IN $$98 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$99 :",
//t    "select_or_group_clause : SELECT $$99 expression_or_error",
//t    "$$100 :",
//t    "$$101 :",
//t    "select_or_group_clause : GROUP $$100 expression_or_error $$101 BY expression_or_error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$102 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$102 expression_or_error",
//t    "$$103 :",
//t    "where_clause : WHERE $$103 expression_or_error",
//t    "$$104 :",
//t    "$$105 :",
//t    "$$106 :",
//t    "join_clause : JOIN identifier_inside_body IN $$104 expression_or_error ON $$105 expression_or_error EQUALS $$106 expression_or_error opt_join_into",
//t    "$$107 :",
//t    "$$108 :",
//t    "$$109 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$107 expression_or_error ON $$108 expression_or_error EQUALS $$109 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$110 :",
//t    "orderby_clause : ORDERBY $$110 orderings",
//t    "orderings : order_by",
//t    "$$111 :",
//t    "orderings : order_by COMMA $$111 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$112 :",
//t    "orderings_then_by : orderings_then_by COMMA $$112 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$113 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$113 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER import_directives opt_COMPLETE_COMPLETION",
//t    "$$114 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$114 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives package_declaration",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$115 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$115 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$116 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$116 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","EACH","ELSE","ENUM","EVENT",
    "EXPLICIT","EXTENDS","FALSE","FINALLY","FIXED","FLOAT","FOR",
    "FOR_EACH","FUNCTION","FUNCTION_GET","FUNCTION_SET","GOTO","IF",
    "IMPLICIT","IMPLEMENTS","IMPORT","IN","INDEXER","INT","INTERFACE",
    "INTERNAL","IS","LOCK","LONG","NAMESPACE","NATIVE","NEW","NULL",
    "OBJECT","OPERATOR","OUT","OVERRIDE","PACKAGE","PARAMS","PRIVATE",
    "PROPERTY","PROTECTED","PUBLIC","READONLY","REF","RETURN","REMOVE",
    "SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC","STRING",
    "STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF","UINT","ULONG",
    "UNCHECKED","UNSAFE","USHORT","USING","VAR","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE","EXTERN",
    "REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","GET","SET",
    "LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
//#line 397 "as-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
//#line 398 "as-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
//#line 417 "as-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
//#line 462 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 29:
  case_29();
  break;
case 42:
  case_42();
  break;
case 43:
  case_43();
  break;
case 51:
  case_51();
  break;
case 52:
  case_52();
  break;
case 53:
//#line 691 "as-parser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
//#line 721 "as-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 58:
  case_58();
  break;
case 59:
//#line 730 "as-parser.jay"
  { yyVal = "event"; }
  break;
case 60:
//#line 731 "as-parser.jay"
  { yyVal = "return"; }
  break;
case 61:
  case_61();
  break;
case 62:
//#line 748 "as-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 63:
  case_63();
  break;
case 64:
//#line 762 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 65:
  case_65();
  break;
case 67:
//#line 781 "as-parser.jay"
  { yyVal = null; }
  break;
case 68:
//#line 785 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 69:
//#line 790 "as-parser.jay"
  { yyVal = null; }
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
  case_72();
  break;
case 73:
  case_73();
  break;
case 74:
//#line 832 "as-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 76:
//#line 840 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 77:
  case_77();
  break;
case 78:
  case_78();
  break;
case 79:
//#line 866 "as-parser.jay"
  { yyVal = null; }
  break;
case 80:
//#line 870 "as-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 81:
//#line 874 "as-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 84:
//#line 886 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 85:
//#line 890 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 96:
  case_96();
  break;
case 97:
//#line 921 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 98:
//#line 925 "as-parser.jay"
  { 
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 99:
  case_99();
  break;
case 100:
  case_100();
  break;
case 101:
  case_101();
  break;
case 102:
  case_102();
  break;
case 103:
//#line 961 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 108:
//#line 1002 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 109:
//#line 1006 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 110:
  case_110();
  break;
case 111:
//#line 1022 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 112:
  case_112();
  break;
case 113:
  case_113();
  break;
case 115:
  case_115();
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
//#line 1099 "as-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[0+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 121:
  case_121();
  break;
case 122:
  case_122();
  break;
case 125:
//#line 1128 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 126:
//#line 1132 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 127:
  case_127();
  break;
case 128:
//#line 1145 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 129:
  case_129();
  break;
case 132:
//#line 1164 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 133:
//#line 1168 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 134:
  case_134();
  break;
case 135:
//#line 1184 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 136:
  case_136();
  break;
case 137:
  case_137();
  break;
case 139:
  case_139();
  break;
case 140:
  case_140();
  break;
case 141:
  case_141();
  break;
case 142:
//#line 1293 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 143:
//#line 1297 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 144:
  case_144();
  break;
case 145:
//#line 1363 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 146:
  case_146();
  break;
case 147:
//#line 1420 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 148:
  case_148();
  break;
case 149:
//#line 1484 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 150:
  case_150();
  break;
case 151:
//#line 1494 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 152:
  case_152();
  break;
case 153:
  case_153();
  break;
case 154:
  case_154();
  break;
case 156:
//#line 1565 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];	  
	  }
  break;
case 158:
  case_158();
  break;
case 159:
//#line 1578 "as-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 164:
  case_164();
  break;
case 165:
  case_165();
  break;
case 166:
  case_166();
  break;
case 167:
  case_167();
  break;
case 168:
//#line 1636 "as-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 169:
//#line 1640 "as-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 170:
  case_170();
  break;
case 171:
  case_171();
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 174:
  case_174();
  break;
case 175:
  case_175();
  break;
case 176:
//#line 1713 "as-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 177:
  case_177();
  break;
case 178:
//#line 1754 "as-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 180:
//#line 1762 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
//#line 1851 "as-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 191:
  case_191();
  break;
case 192:
  case_192();
  break;
case 193:
  case_193();
  break;
case 194:
  case_194();
  break;
case 195:
  case_195();
  break;
case 196:
//#line 1903 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 197:
  case_197();
  break;
case 198:
//#line 1932 "as-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 199:
  case_199();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
  case_208();
  break;
case 210:
  case_210();
  break;
case 211:
  case_211();
  break;
case 212:
//#line 2077 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
  case_216();
  break;
case 217:
//#line 2113 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 220:
//#line 2125 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 221:
//#line 2129 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 222:
//#line 2136 "as-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 223:
//#line 2140 "as-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 228:
//#line 2148 "as-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 229:
//#line 2156 "as-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 230:
//#line 2162 "as-parser.jay"
  {
	  }
  break;
case 231:
  case_231();
  break;
case 233:
//#line 2198 "as-parser.jay"
  { yyVal = null; }
  break;
case 235:
  case_235();
  break;
case 236:
//#line 2214 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 237:
  case_237();
  break;
case 239:
//#line 2260 "as-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 240:
//#line 2261 "as-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 241:
//#line 2262 "as-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 242:
//#line 2263 "as-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 243:
//#line 2264 "as-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 244:
//#line 2265 "as-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 245:
//#line 2267 "as-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 246:
//#line 2268 "as-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 247:
//#line 2270 "as-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 248:
//#line 2271 "as-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 249:
//#line 2272 "as-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 250:
//#line 2273 "as-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 251:
//#line 2274 "as-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 252:
//#line 2275 "as-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 253:
//#line 2276 "as-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 254:
//#line 2277 "as-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 255:
//#line 2278 "as-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 256:
//#line 2279 "as-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 257:
//#line 2280 "as-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 258:
//#line 2281 "as-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 259:
//#line 2282 "as-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 260:
//#line 2283 "as-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 261:
//#line 2290 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 262:
  case_262();
  break;
case 263:
//#line 2309 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 264:
  case_264();
  break;
case 265:
  case_265();
  break;
case 266:
  case_266();
  break;
case 267:
  case_267();
  break;
case 268:
  case_268();
  break;
case 269:
  case_269();
  break;
case 270:
  case_270();
  break;
case 271:
  case_271();
  break;
case 272:
  case_272();
  break;
case 273:
  case_273();
  break;
case 275:
//#line 2564 "as-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 276:
  case_276();
  break;
case 279:
//#line 2581 "as-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 280:
//#line 2585 "as-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 281:
  case_281();
  break;
case 282:
//#line 2598 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 283:
  case_283();
  break;
case 284:
  case_284();
  break;
case 285:
//#line 2623 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 288:
  case_288();
  break;
case 289:
  case_289();
  break;
case 290:
  case_290();
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 295:
  case_295();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 307:
//#line 2785 "as-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 309:
  case_309();
  break;
case 310:
  case_310();
  break;
case 311:
  case_311();
  break;
case 312:
  case_312();
  break;
case 314:
//#line 2844 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 315:
  case_315();
  break;
case 316:
//#line 2863 "as-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 317:
  case_317();
  break;
case 319:
  case_319();
  break;
case 321:
  case_321();
  break;
case 323:
  case_323();
  break;
case 324:
  case_324();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 328:
  case_328();
  break;
case 329:
  case_329();
  break;
case 330:
//#line 2963 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 331:
  case_331();
  break;
case 332:
  case_332();
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 341:
  case_341();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 345:
  case_345();
  break;
case 347:
//#line 3081 "as-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 348:
//#line 3088 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 350:
  case_350();
  break;
case 352:
  case_352();
  break;
case 354:
  case_354();
  break;
case 356:
//#line 3126 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 357:
  case_357();
  break;
case 358:
//#line 3145 "as-parser.jay"
  {
	  	yyVal = new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 359:
  case_359();
  break;
case 360:
  case_360();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
//#line 3195 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 364:
//#line 3196 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 365:
//#line 3197 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 366:
//#line 3198 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 367:
//#line 3199 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 368:
//#line 3200 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 370:
//#line 3205 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 371:
//#line 3206 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 372:
//#line 3207 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 373:
//#line 3208 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 374:
//#line 3209 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 375:
//#line 3210 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 376:
//#line 3211 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 377:
//#line 3212 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 378:
//#line 3213 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 398:
  case_398();
  break;
case 399:
  case_399();
  break;
case 403:
//#line 3260 "as-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
//#line 3264 "as-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
//#line 3265 "as-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 410:
  case_410();
  break;
case 411:
//#line 3298 "as-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 412:
  case_412();
  break;
case 413:
  case_413();
  break;
case 414:
  case_414();
  break;
case 415:
  case_415();
  break;
case 416:
//#line 3330 "as-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 417:
  case_417();
  break;
case 418:
//#line 3338 "as-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 419:
  case_419();
  break;
case 420:
  case_420();
  break;
case 421:
  case_421();
  break;
case 422:
  case_422();
  break;
case 423:
//#line 3369 "as-parser.jay"
  { yyVal = null; }
  break;
case 425:
  case_425();
  break;
case 426:
  case_426();
  break;
case 427:
//#line 3392 "as-parser.jay"
  { yyVal = null; }
  break;
case 428:
//#line 3396 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 429:
  case_429();
  break;
case 430:
  case_430();
  break;
case 431:
  case_431();
  break;
case 432:
  case_432();
  break;
case 433:
//#line 3428 "as-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 434:
  case_434();
  break;
case 435:
  case_435();
  break;
case 436:
  case_436();
  break;
case 439:
//#line 3456 "as-parser.jay"
  { yyVal = null; }
  break;
case 441:
  case_441();
  break;
case 442:
  case_442();
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
  case_446();
  break;
case 450:
  case_450();
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 455:
  case_455();
  break;
case 456:
  case_456();
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
//#line 3607 "as-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 465:
//#line 3615 "as-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 466:
  case_466();
  break;
case 467:
  case_467();
  break;
case 468:
//#line 3635 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 469:
//#line 3642 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
//#line 3709 "as-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 476:
  case_476();
  break;
case 477:
  case_477();
  break;
case 480:
//#line 3736 "as-parser.jay"
  { yyVal = null; }
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
  case_487();
  break;
case 491:
  case_491();
  break;
case 492:
  case_492();
  break;
case 493:
  case_493();
  break;
case 494:
//#line 3812 "as-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 495:
//#line 3816 "as-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
//#line 3874 "as-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 501:
  case_501();
  break;
case 504:
  case_504();
  break;
case 505:
  case_505();
  break;
case 506:
  case_506();
  break;
case 507:
  case_507();
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 513:
  case_513();
  break;
case 514:
  case_514();
  break;
case 515:
//#line 3988 "as-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 516:
//#line 3992 "as-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 517:
//#line 3996 "as-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 518:
//#line 4000 "as-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 519:
//#line 4007 "as-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 521:
//#line 4015 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 525:
//#line 4039 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 526:
//#line 4043 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 530:
//#line 4079 "as-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 531:
//#line 4083 "as-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 532:
//#line 4087 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 533:
//#line 4091 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 534:
//#line 4099 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 536:
  case_536();
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 540:
  case_540();
  break;
case 541:
//#line 4131 "as-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 542:
  case_542();
  break;
case 543:
//#line 4140 "as-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 544:
//#line 4144 "as-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 546:
  case_546();
  break;
case 547:
  case_547();
  break;
case 549:
  case_549();
  break;
case 550:
  case_550();
  break;
case 551:
  case_551();
  break;
case 552:
  case_552();
  break;
case 554:
  case_554();
  break;
case 555:
  case_555();
  break;
case 557:
  case_557();
  break;
case 559:
  case_559();
  break;
case 561:
  case_561();
  break;
case 563:
  case_563();
  break;
case 565:
  case_565();
  break;
case 567:
  case_567();
  break;
case 569:
  case_569();
  break;
case 570:
  case_570();
  break;
case 571:
  case_571();
  break;
case 572:
  case_572();
  break;
case 573:
  case_573();
  break;
case 574:
  case_574();
  break;
case 575:
  case_575();
  break;
case 576:
  case_576();
  break;
case 577:
  case_577();
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 582:
  case_582();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 585:
  case_585();
  break;
case 586:
  case_586();
  break;
case 587:
//#line 4377 "as-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 588:
  case_588();
  break;
case 591:
//#line 4392 "as-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 592:
  case_592();
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 596:
  case_596();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
//#line 4437 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
//#line 4451 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 611:
//#line 4477 "as-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 612:
  case_612();
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 616:
//#line 4506 "as-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 617:
//#line 4519 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 620:
  case_620();
  break;
case 621:
  case_621();
  break;
case 622:
//#line 4561 "as-parser.jay"
  { yyVal = null; }
  break;
case 623:
//#line 4563 "as-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 624:
  case_624();
  break;
case 625:
//#line 4576 "as-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 627:
  case_627();
  break;
case 628:
  case_628();
  break;
case 629:
  case_629();
  break;
case 630:
  case_630();
  break;
case 631:
  case_631();
  break;
case 632:
  case_632();
  break;
case 633:
  case_633();
  break;
case 634:
  case_634();
  break;
case 635:
  case_635();
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 644:
//#line 4687 "as-parser.jay"
  {
		current_type.AddBaseForPart ((FullNamedExpression) yyVals[0+yyTop]);
	 }
  break;
case 645:
  case_645();
  break;
case 647:
//#line 4701 "as-parser.jay"
  {
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 648:
  case_648();
  break;
case 650:
//#line 4715 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
//#line 4807 "as-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 660:
//#line 4811 "as-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 661:
//#line 4818 "as-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 662:
  case_662();
  break;
case 663:
//#line 4832 "as-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 664:
//#line 4836 "as-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 665:
  case_665();
  break;
case 666:
//#line 4861 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 675:
//#line 4905 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 676:
//#line 4909 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 678:
  case_678();
  break;
case 681:
//#line 4933 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 682:
//#line 4937 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 711:
  case_711();
  break;
case 712:
  case_712();
  break;
case 713:
  case_713();
  break;
case 714:
  case_714();
  break;
case 715:
  case_715();
  break;
case 718:
  case_718();
  break;
case 719:
  case_719();
  break;
case 720:
  case_720();
  break;
case 721:
  case_721();
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 731:
  case_731();
  break;
case 732:
  case_732();
  break;
case 736:
  case_736();
  break;
case 739:
  case_739();
  break;
case 740:
  case_740();
  break;
case 741:
//#line 5226 "as-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 742:
//#line 5230 "as-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 747:
  case_747();
  break;
case 749:
  case_749();
  break;
case 750:
//#line 5275 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 751:
  case_751();
  break;
case 752:
//#line 5285 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 753:
//#line 5286 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 754:
  case_754();
  break;
case 755:
  case_755();
  break;
case 756:
  case_756();
  break;
case 759:
  case_759();
  break;
case 760:
  case_760();
  break;
case 761:
  case_761();
  break;
case 762:
//#line 5361 "as-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 763:
  case_763();
  break;
case 764:
  case_764();
  break;
case 765:
  case_765();
  break;
case 767:
  case_767();
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 770:
//#line 5412 "as-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 771:
//#line 5416 "as-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 772:
  case_772();
  break;
case 773:
  case_773();
  break;
case 774:
  case_774();
  break;
case 775:
  case_775();
  break;
case 776:
//#line 5450 "as-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 781:
  case_781();
  break;
case 782:
  case_782();
  break;
case 783:
  case_783();
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
//#line 5510 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 788:
  case_788();
  break;
case 789:
  case_789();
  break;
case 790:
  case_790();
  break;
case 791:
  case_791();
  break;
case 792:
//#line 5551 "as-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 797:
//#line 5579 "as-parser.jay"
  { lexer.putback ('}'); }
  break;
case 798:
//#line 5583 "as-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 800:
  case_800();
  break;
case 801:
  case_801();
  break;
case 803:
//#line 5604 "as-parser.jay"
  { yyVal = null; }
  break;
case 805:
//#line 5609 "as-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 809:
  case_809();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 812:
  case_812();
  break;
case 819:
  case_819();
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 826:
  case_826();
  break;
case 827:
  case_827();
  break;
case 828:
  case_828();
  break;
case 829:
  case_829();
  break;
case 830:
  case_830();
  break;
case 833:
//#line 5790 "as-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 834:
  case_834();
  break;
case 835:
  case_835();
  break;
case 836:
  case_836();
  break;
case 837:
  case_837();
  break;
case 838:
  case_838();
  break;
case 839:
//#line 5839 "as-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 840:
  case_840();
  break;
case 841:
//#line 5856 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 842:
  case_842();
  break;
case 843:
//#line 5874 "as-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 844:
//#line 5881 "as-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 845:
  case_845();
  break;
case 846:
//#line 5891 "as-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 853:
  case_853();
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 858:
  case_858();
  break;
case 859:
//#line 5994 "as-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 863:
  case_863();
  break;
case 864:
  case_864();
  break;
case 865:
  case_865();
  break;
case 866:
  case_866();
  break;
case 867:
  case_867();
  break;
case 868:
  case_868();
  break;
case 869:
//#line 6094 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 870:
  case_870();
  break;
case 871:
//#line 6109 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 872:
  case_872();
  break;
case 873:
  case_873();
  break;
case 874:
  case_874();
  break;
case 876:
  case_876();
  break;
case 877:
  case_877();
  break;
case 878:
//#line 6171 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 879:
  case_879();
  break;
case 880:
  case_880();
  break;
case 881:
  case_881();
  break;
case 882:
  case_882();
  break;
case 884:
  case_884();
  break;
case 890:
//#line 6225 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 891:
  case_891();
  break;
case 892:
//#line 6244 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 893:
  case_893();
  break;
case 894:
  case_894();
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 897:
  case_897();
  break;
case 898:
  case_898();
  break;
case 899:
  case_899();
  break;
case 900:
  case_900();
  break;
case 901:
  case_901();
  break;
case 903:
//#line 6388 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 904:
//#line 6395 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 905:
  case_905();
  break;
case 907:
  case_907();
  break;
case 908:
  case_908();
  break;
case 910:
  case_910();
  break;
case 911:
  case_911();
  break;
case 912:
//#line 6441 "as-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 913:
  case_913();
  break;
case 914:
  case_914();
  break;
case 915:
//#line 6458 "as-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 919:
  case_919();
  break;
case 920:
  case_920();
  break;
case 923:
  case_923();
  break;
case 924:
  case_924();
  break;
case 932:
//#line 6580 "as-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 933:
//#line 6587 "as-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 934:
  case_934();
  break;
case 935:
  case_935();
  break;
case 936:
//#line 6604 "as-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 937:
//#line 6608 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 938:
  case_938();
  break;
case 939:
  case_939();
  break;
case 940:
  case_940();
  break;
case 941:
  case_941();
  break;
case 943:
//#line 6644 "as-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 945:
//#line 6652 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 946:
//#line 6656 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 947:
//#line 6663 "as-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 949:
  case_949();
  break;
case 950:
  case_950();
  break;
case 951:
  case_951();
  break;
//#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
//#line 405 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
//#line 419 "as-parser.jay"
{
		if (yyToken == Token.EXTERN)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
//#line 439 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
//#line 472 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
//#line 480 "as-parser.jay"
{
		var un = new UsingNamespace ((ATypeNameExpression) yyVals[-3+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]));
	  }

void case_19()
//#line 487 "as-parser.jay"
{
		var ut = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing (ut);
		
		lbag.AddLocation (ut, GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
//#line 494 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_21()
//#line 507 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_22()
//#line 520 "as-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = yyVals[0+yyTop] as MemberName;
		if (name == null) {
			name = new MemberName(RootNs);
		}
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
		var un = new UsingNamespace (new SimpleName (RootNs, GetLocation (yyVals[-2+yyTop])), GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing(un);
	  }

void case_23()
//#line 553 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_24()
//#line 558 "as-parser.jay"
{
	  	lbag.AddLocation (current_container, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[0+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_27()
//#line 572 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_28()
//#line 577 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_29()
//#line 582 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_42()
//#line 620 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_43()
//#line 638 "as-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_51()
//#line 671 "as-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }

void case_52()
//#line 676 "as-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_54()
//#line 693 "as-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_55()
//#line 701 "as-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_56()
//#line 708 "as-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }

void case_58()
//#line 726 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_61()
//#line 733 "as-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_63()
//#line 750 "as-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_65()
//#line 764 "as-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_70()
//#line 792 "as-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_71()
//#line 798 "as-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_72()
//#line 804 "as-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_73()
//#line 818 "as-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_77()
//#line 842 "as-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_78()
//#line 852 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_96()
//#line 906 "as-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_99()
//#line 929 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }

void case_100()
//#line 943 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_101()
//#line 948 "as-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_102()
//#line 954 "as-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_104()
//#line 968 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var mod = (Modifiers) yyVals[-4+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[0+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_105()
//#line 981 "as-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-3+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
		current_field = null;
	  }

void case_110()
//#line 1011 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_112()
//#line 1024 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_113()
//#line 1029 "as-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_115()
//#line 1043 "as-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[0+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[0+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-4+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_116()
//#line 1058 "as-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_117()
//#line 1071 "as-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_118()
//#line 1082 "as-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_121()
//#line 1105 "as-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_122()
//#line 1111 "as-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_127()
//#line 1137 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_129()
//#line 1147 "as-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_134()
//#line 1173 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_136()
//#line 1186 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_137()
//#line 1192 "as-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_139()
//#line 1201 "as-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_140()
//#line 1210 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = yyVals[0+yyTop] as Method;
		if (m != null) {
			async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
			current_type.AddMember (m);
		}
		
		Constructor c = yyVals[0+yyTop] as Constructor;
		if (c != null) {
			current_type.AddConstructor (c);
			current_constructor = c;
		}
	  }

void case_141()
//#line 1228 "as-parser.jay"
{
	 	async_block = false;

		if (yyVals[-2+yyTop] is Method) {
		
			Method method = yyVals[-2+yyTop] as Method;
			
			if (yyVals[0+yyTop] == null) {
				method.ParameterInfo.CheckParameters (method);
	
				if ((method.ModFlags & Modifiers.ASYNC) != 0) {
					report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
						method.GetSignatureForError ());
				}
			} else {
				method.Block = (ToplevelBlock) yyVals[0+yyTop];
				
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
						method.GetSignatureForError ());
				}
			}
			
		} else if (yyVals[-2+yyTop] is Constructor) {
		
			Constructor c = yyVals[-2+yyTop] as Constructor;
			
			if (yyVals[0+yyTop] != null) {		
				c.Block = (ToplevelBlock) yyVals[0+yyTop];
			}
			
			if (doc_support)
				c.DocComment = ConsumeStoredComment ();
		
		} else {
		
			Property.PropertyMethod propMethod = yyVals[-2+yyTop] as Property.PropertyMethod;
			
			if (yyVals[0+yyTop] != null) {
		  		propMethod.Block = (ToplevelBlock) yyVals[0+yyTop];			
		  	
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, propMethod.Block.StartLocation,
						"`{0}': interface members cannot have a definition", propMethod.GetSignatureForError ());
				}
			}
			
		}

		current_local_parameters = null;
		current_property = null;
		current_constructor = null;
	
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_144()
//#line 1299 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-7+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-4+yyTop];

		var modifiers = (Modifiers) yyVals[-9+yyTop];
		
		if (current_type != null && name.Name == current_type.MemberName.Name) {

			var c = new Constructor (current_type, name.Name, modifiers, (Attributes) yyVals[-10+yyTop], current_local_parameters, name.Location);

			if (yyVals[0+yyTop] != null) {
					report.Error (7011, c.Location,
						"`{0}': constructor can not have type constraints.",
						c.GetSignatureForError ());
			}

			if ((modifiers & Modifiers.STATIC) != 0) {
				if ((modifiers & Modifiers.AccessibilityMask) != 0){
					report.Error (515, c.Location,
						"`{0}': static constructor cannot have an access modifier",
						c.GetSignatureForError ());
				}
			}

			if (doc_support)
				c.DocComment = Lexer.consume_doc_comment ();
				
			lbag.AddMember (c, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
			yyVal = c;
		
		} else {

			if (current_container.Kind == MemberKind.Class && 
				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
					modifiers |= Modifiers.VIRTUAL;

			var return_type = yyVals[-2+yyTop] as FullNamedExpression;
			
			if (return_type == null) {
				report.Error (7012, GetLocation(yyVals[-3+yyTop]), "Method must specify a return type.");
				return_type = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-3+yyTop]));
			}

			var method = Method.Create (current_type, return_type, modifiers,
					     name, current_local_parameters, (Attributes) yyVals[-10+yyTop], yyVals[0+yyTop] != null);

			if (yyVals[0+yyTop] != null)
				method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
					     
			if (doc_support)
				method.DocComment = Lexer.consume_doc_comment ();

			lbag.AddMember (method, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
			yyVal = method;
			
		}
	  }

void case_146()
//#line 1365 "as-parser.jay"
{
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-6+yyTop];
		var modifiers = (Modifiers) yyVals[-8+yyTop];
		var parameters = (ParametersCompiled) yyVals[-3+yyTop];		
		
		if (current_container.Kind == MemberKind.Class && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;

		if (parameters != null && parameters.Count > 0)
			report.Error (7016, GetLocation (yyVals[0+yyTop]), "Property getter functions may not have parameters");
		
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		} else {
			current_property = null;
		}
		
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-9+yyTop]);
			current_type.AddMember (current_property);
			modifiers = (Modifiers) 0;
		} else {
			current_property.ModFlags |= modifiers & ~Modifiers.AccessibilityMask;
			if (!type.Equals(current_property.TypeExpression)) {
				report.Error (7002, GetLocation (yyVals[0+yyTop]), "Type of property getter and setter must match", current_property.GetSignatureForError ());
			}
			if (current_property.Set != null && !ModifiersExtensions.IsRestrictedModifier (modifiers & Modifiers.AccessibilityMask, current_property.ModFlags & Modifiers.AccessibilityMask)) {
				current_property.Set.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			}
		}
		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[0+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[-7+yyTop]), "Property accessor already defined");
		}
		
		current_property.Get = new Property.GetMethod (current_property,
			modifiers & Modifiers.AccessibilityMask, (Attributes) yyVals[-9+yyTop], GetLocation (yyVals[-7+yyTop]));
	  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_property.Get.ParameterInfo;
		yyVal = current_property.Get;
	  }

void case_148()
//#line 1422 "as-parser.jay"
{
		var void_type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-6+yyTop];
		var modifiers = (Modifiers) yyVals[-8+yyTop];
		var parameters = (ParametersCompiled) yyVals[-3+yyTop];
		
		if (current_container.Kind == MemberKind.Class && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		if (void_type.Type != null && void_type.Type.Kind != MemberKind.Void)
			report.Error (7003, GetLocation (yyVals[0+yyTop]), "Property setter function must not be of type void", current_property.GetSignatureForError ());					
			
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		} else {
			current_property = null;
		}

		FullNamedExpression type; 
		
		if (parameters == null || parameters.Count != 1 || parameters.FixedParameters.Length != parameters.Count) {
			report.Error (7001, GetLocation (yyVals[-3+yyTop]), "Property setter must have a single parameter", current_property.GetSignatureForError ());
			type = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[-3+yyTop]));
		} else {
			type = ((Parameter)parameters.FixedParameters[0]).TypeExpression;	
		}
				
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-9+yyTop]);
			current_type.AddMember (current_property);
			modifiers = (Modifiers) 0;			
		} else {
			current_property.ModFlags |= modifiers & ~Modifiers.AccessibilityMask;		
			if (!type.Equals(current_property.TypeExpression)) {
				report.Error (7002, GetLocation (yyVals[0+yyTop]), "Type of property getter and setter must match", current_property.GetSignatureForError ());
			}
			if (current_property.Get != null && !ModifiersExtensions.IsRestrictedModifier (modifiers & Modifiers.AccessibilityMask, current_property.ModFlags & Modifiers.AccessibilityMask)) {
				current_property.Get.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			}
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[-7+yyTop]), "Property accessor already defined");
		}
		
		current_property.Set = new Property.SetMethod (current_property, 
			modifiers & Modifiers.AccessibilityMask, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop], GetLocation (yyVals[-7+yyTop]));
	  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = parameters;
		yyVal = current_property.Set;
	  }

void case_150()
//#line 1487 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_152()
//#line 1496 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var modifiers = (Modifiers) yyVals[-12+yyTop];
		modifiers |= Modifiers.PARTIAL;

		if ((modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
			modifiers |= Modifiers.VIRTUAL;
			
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-2+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-13+yyTop], yyVals[0+yyTop] != null);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-11+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_153()
//#line 1526 "as-parser.jay"
{
		MemberName name = (MemberName) yyVals[-5+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-6+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-9+yyTop],
					    0, name, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop], false);

		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_154()
//#line 1545 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop], false);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_158()
//#line 1571 "as-parser.jay"
{ 
	  	/* method body.*/
	   	yyVal = null; 
	  }

void case_161()
//#line 1584 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_162()
//#line 1589 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_163()
//#line 1596 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_164()
//#line 1602 "as-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_165()
//#line 1609 "as-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_166()
//#line 1619 "as-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_167()
//#line 1625 "as-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_170()
//#line 1642 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_171()
//#line 1650 "as-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_172()
//#line 1659 "as-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_173()
//#line 1684 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[0+yyTop], lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], lt.Location);
	  }

void case_174()
//#line 1689 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_175()
//#line 1699 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])), lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], l);
	  }

void case_177()
//#line 1715 "as-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-6+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, mod, (Attributes) yyVals[-7+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_181()
//#line 1764 "as-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_182()
//#line 1788 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_183()
//#line 1795 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_184()
//#line 1802 "as-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_185()
//#line 1815 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_186()
//#line 1820 "as-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_187()
//#line 1827 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_188()
//#line 1835 "as-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_189()
//#line 1840 "as-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_191()
//#line 1856 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_192()
//#line 1866 "as-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_193()
//#line 1871 "as-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-2+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-6+yyTop],
			(MemberName) yyVals[-4+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-5+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_194()
//#line 1885 "as-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_195()
//#line 1892 "as-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_197()
//#line 1905 "as-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-7+yyTop], (Modifiers) yyVals[-9+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-10+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-8+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-6+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_199()
//#line 1934 "as-parser.jay"
{
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]));
		current_property = null;		
	  }

void case_204()
//#line 1953 "as-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_205()
//#line 1967 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_206()
//#line 1989 "as-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_207()
//#line 2010 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_208()
//#line 2037 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_210()
//#line 2059 "as-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_211()
//#line 2064 "as-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_213()
//#line 2079 "as-parser.jay"
{
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_214()
//#line 2086 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_215()
//#line 2100 "as-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_216()
//#line 2106 "as-parser.jay"
{
	    lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_231()
//#line 2164 "as-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			var modifiers = (Modifiers) yyVals[-3+yyTop];
			
			if (current_container.Kind == MemberKind.Class && 
				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
					modifiers |= Modifiers.VIRTUAL;			
		
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, modifiers, 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_235()
//#line 2204 "as-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_237()
//#line 2216 "as-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-7+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[0+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_262()
//#line 2292 "as-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-6+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_264()
//#line 2311 "as-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-6+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_265()
//#line 2326 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_266()
//#line 2332 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_267()
//#line 2471 "as-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_268()
//#line 2480 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-7+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-8+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_269()
//#line 2505 "as-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_270()
//#line 2519 "as-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_271()
//#line 2532 "as-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-5+yyTop], (MemberName) yyVals[-3+yyTop], (Attributes) yyVals[-6+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_272()
//#line 2540 "as-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_273()
//#line 2547 "as-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_276()
//#line 2566 "as-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_281()
//#line 2590 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_283()
//#line 2600 "as-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_284()
//#line 2609 "as-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_288()
//#line 2630 "as-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_289()
//#line 2635 "as-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_290()
//#line 2640 "as-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_291()
//#line 2648 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_292()
//#line 2660 "as-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_293()
//#line 2676 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_294()
//#line 2688 "as-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_295()
//#line 2704 "as-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_297()
//#line 2713 "as-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_298()
//#line 2725 "as-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_299()
//#line 2730 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_300()
//#line 2742 "as-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_301()
//#line 2748 "as-parser.jay"
{
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_303()
//#line 2765 "as-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
		}
		yyVal = yyVals[0+yyTop];
	 }

void case_304()
//#line 2773 "as-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_309()
//#line 2791 "as-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_310()
//#line 2799 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_311()
//#line 2812 "as-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_312()
//#line 2820 "as-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_315()
//#line 2846 "as-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_317()
//#line 2865 "as-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_319()
//#line 2884 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_321()
//#line 2895 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_323()
//#line 2907 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_324()
//#line 2916 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_326()
//#line 2928 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_327()
//#line 2935 "as-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_328()
//#line 2943 "as-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_329()
//#line 2949 "as-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_331()
//#line 2965 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_332()
//#line 2974 "as-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_334()
//#line 2985 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_335()
//#line 2994 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_336()
//#line 2999 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_337()
//#line 3007 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_338()
//#line 3013 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_339()
//#line 3021 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_341()
//#line 3031 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_342()
//#line 3042 "as-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_343()
//#line 3048 "as-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_344()
//#line 3058 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop]);
  	  }

void case_345()
//#line 3063 "as-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, Variance.None);
  	  }

void case_350()
//#line 3097 "as-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_352()
//#line 3106 "as-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_354()
//#line 3115 "as-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_357()
//#line 3131 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_359()
//#line 3151 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_360()
//#line 3167 "as-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_361()
//#line 3173 "as-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_362()
//#line 3182 "as-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_398()
//#line 3246 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_399()
//#line 3250 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_410()
//#line 3291 "as-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_412()
//#line 3303 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_413()
//#line 3309 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_414()
//#line 3315 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_415()
//#line 3321 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_417()
//#line 3331 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_419()
//#line 3339 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_420()
//#line 3347 "as-parser.jay"
{
		if (current_constructor == null)
 			report.Error (7014, GetLocation (yyVals[-3+yyTop]), "Base constructor initializer may only be called in constructor");
 		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_421()
//#line 3354 "as-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_422()
//#line 3359 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_425()
//#line 3375 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_426()
//#line 3385 "as-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_429()
//#line 3401 "as-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_430()
//#line 3407 "as-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_431()
//#line 3412 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_432()
//#line 3420 "as-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_434()
//#line 3429 "as-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_435()
//#line 3437 "as-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_436()
//#line 3444 "as-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_441()
//#line 3462 "as-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_442()
//#line 3468 "as-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_443()
//#line 3477 "as-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_444()
//#line 3491 "as-parser.jay"
{
	  	lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_445()
//#line 3497 "as-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_446()
//#line 3505 "as-parser.jay"
{
	    var exp = (Expression) yyVals[0+yyTop];
		var arg = new Argument (exp);
		if (exp is ArrayInitializer) {
			(exp as ArrayInitializer).Argument = arg;
		}
		yyVal = arg;
	  }

void case_450()
//#line 3523 "as-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_451()
//#line 3528 "as-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_452()
//#line 3533 "as-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_453()
//#line 3538 "as-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_455()
//#line 3550 "as-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_456()
//#line 3555 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_457()
//#line 3560 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_458()
//#line 3568 "as-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_459()
//#line 3574 "as-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_460()
//#line 3579 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_461()
//#line 3587 "as-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_462()
//#line 3593 "as-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_466()
//#line 3620 "as-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_467()
//#line 3625 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_470()
//#line 3647 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_471()
//#line 3660 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_472()
//#line 3672 "as-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-4+yyTop], (List<Expression>) yyVals[-2+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-2+yyTop]).Count, GetLocation (yyVals[-3+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[0+yyTop]
			  	}, (ArrayInitializer) null /*$7*/, GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_473()
//#line 3694 "as-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_474()
//#line 3699 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_476()
//#line 3711 "as-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_477()
//#line 3719 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_482()
//#line 3742 "as-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_483()
//#line 3748 "as-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_484()
//#line 3757 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_485()
//#line 3763 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_486()
//#line 3769 "as-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_487()
//#line 3774 "as-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_491()
//#line 3789 "as-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_492()
//#line 3797 "as-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_493()
//#line 3802 "as-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_496()
//#line 3832 "as-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		if (current_variable != null) {
			ai.VariableDeclaration = current_variable;
		}
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_497()
//#line 3841 "as-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (current_variable != null) {
			ai.VariableDeclaration = current_variable;
		}
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_498()
//#line 3857 "as-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_499()
//#line 3863 "as-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_501()
//#line 3876 "as-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_504()
//#line 3887 "as-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_505()
//#line 3895 "as-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_506()
//#line 3901 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_507()
//#line 3909 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_508()
//#line 3915 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_509()
//#line 3921 "as-parser.jay"
{
		var tne = (ATypeNameExpression) yyVals[-3+yyTop];
		if (tne.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (tne, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_510()
//#line 3933 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_511()
//#line 3943 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_512()
//#line 3954 "as-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_513()
//#line 3962 "as-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_514()
//#line 3970 "as-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_522()
//#line 4017 "as-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_523()
//#line 4025 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_527()
//#line 4045 "as-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_528()
//#line 4050 "as-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method is AnonymousMethodExpression) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_536()
//#line 4105 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_537()
//#line 4110 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_538()
//#line 4115 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_540()
//#line 4124 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_542()
//#line 4133 "as-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_546()
//#line 4150 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_547()
//#line 4155 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_549()
//#line 4164 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_550()
//#line 4169 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_551()
//#line 4174 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_552()
//#line 4179 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_554()
//#line 4188 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_555()
//#line 4193 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_557()
//#line 4202 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_559()
//#line 4211 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_561()
//#line 4220 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
//#line 4229 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
//#line 4238 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
//#line 4247 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
//#line 4258 "as-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_570()
//#line 4263 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_571()
//#line 4271 "as-parser.jay"
{
	  	Expression target = (Expression) yyVals[-2+yyTop];
	  	Expression source = (Expression) yyVals[0+yyTop];

	  	var assign = new SimpleAssign (target, source, GetLocation (yyVals[-1+yyTop]));
	  	
	  	if (source is ArrayInitializer) {
	  		(source as ArrayInitializer).Assign = assign;
	  	}
	  	
	  	yyVal = assign;
	  }

void case_572()
//#line 4284 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_573()
//#line 4289 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_574()
//#line 4294 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_575()
//#line 4299 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
//#line 4304 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
//#line 4309 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_578()
//#line 4314 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
//#line 4319 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
//#line 4324 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
//#line 4329 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
//#line 4337 "as-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_583()
//#line 4344 "as-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_584()
//#line 4358 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_585()
//#line 4364 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_586()
//#line 4370 "as-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_588()
//#line 4378 "as-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_592()
//#line 4394 "as-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_594()
//#line 4405 "as-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_595()
//#line 4413 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_596()
//#line 4419 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_597()
//#line 4424 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_598()
//#line 4430 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_600()
//#line 4439 "as-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_601()
//#line 4444 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_603()
//#line 4453 "as-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_604()
//#line 4458 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_612()
//#line 4482 "as-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_613()
//#line 4487 "as-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_614()
//#line 4492 "as-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_618()
//#line 4521 "as-parser.jay"
{
		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
	  }

void case_619()
//#line 4532 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_620()
//#line 4547 "as-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_621()
//#line 4553 "as-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_624()
//#line 4568 "as-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_627()
//#line 4582 "as-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_628()
//#line 4601 "as-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_629()
//#line 4609 "as-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_630()
//#line 4614 "as-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_631()
//#line 4619 "as-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_632()
//#line 4624 "as-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_633()
//#line 4629 "as-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_634()
//#line 4634 "as-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_635()
//#line 4639 "as-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_636()
//#line 4644 "as-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_637()
//#line 4649 "as-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_638()
//#line 4654 "as-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_639()
//#line 4659 "as-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_640()
//#line 4664 "as-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_641()
//#line 4669 "as-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_642()
//#line 4676 "as-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_645()
//#line 4689 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBaseForPart ((FullNamedExpression) yyVals[-1+yyTop]);
	  }

void case_648()
//#line 4703 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_651()
//#line 4720 "as-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_652()
//#line 4726 "as-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_653()
//#line 4745 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_654()
//#line 4751 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_655()
//#line 4761 "as-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_656()
//#line 4767 "as-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_657()
//#line 4793 "as-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_658()
//#line 4800 "as-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_662()
//#line 4820 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_665()
//#line 4854 "as-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_667()
//#line 4866 "as-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_668()
//#line 4871 "as-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_669()
//#line 4880 "as-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_670()
//#line 4885 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_678()
//#line 4912 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_711()
//#line 4976 "as-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_712()
//#line 4981 "as-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_713()
//#line 4986 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_714()
//#line 4994 "as-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_715()
//#line 5002 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_718()
//#line 5015 "as-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_719()
//#line 5031 "as-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_720()
//#line 5072 "as-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_721()
//#line 5087 "as-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_723()
//#line 5112 "as-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = Tokenizer.LocatedToken.Create ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_724()
//#line 5122 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_725()
//#line 5129 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_726()
//#line 5135 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration (new VarExpr (GetLocation(yyVals[-1+yyTop])), li);
	  }

void case_727()
//#line 5142 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_728()
//#line 5148 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_729()
//#line 5155 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_731()
//#line 5165 "as-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		/* TODO: lbag*/
	  }

void case_732()
//#line 5170 "as-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_736()
//#line 5188 "as-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_739()
//#line 5203 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_740()
//#line 5212 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_747()
//#line 5245 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_749()
//#line 5271 "as-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_751()
//#line 5277 "as-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_754()
//#line 5295 "as-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementErrorExpression (yyVals[0+yyTop] as Expression);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_755()
//#line 5308 "as-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_756()
//#line 5316 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_759()
//#line 5330 "as-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_760()
//#line 5339 "as-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_761()
//#line 5349 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_763()
//#line 5363 "as-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_764()
//#line 5369 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_765()
//#line 5379 "as-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_767()
//#line 5388 "as-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_768()
//#line 5395 "as-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_769()
//#line 5402 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new List<SwitchSection> ();
	  }

void case_772()
//#line 5421 "as-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_773()
//#line 5428 "as-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_774()
//#line 5438 "as-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_775()
//#line 5443 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_781()
//#line 5462 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_782()
//#line 5470 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_783()
//#line 5480 "as-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_784()
//#line 5485 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_785()
//#line 5490 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_786()
//#line 5500 "as-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }

void case_788()
//#line 5516 "as-parser.jay"
{
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }

void case_789()
//#line 5524 "as-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_790()
//#line 5537 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_791()
//#line 5545 "as-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_793()
//#line 5555 "as-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_794()
//#line 5564 "as-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_795()
//#line 5569 "as-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_800()
//#line 5589 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_801()
//#line 5596 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_809()
//#line 5620 "as-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_810()
//#line 5636 "as-parser.jay"
{
		report.Error (7006, GetLocation (yyVals[-3+yyTop]), "A for each statement must begin with a 'var' keyword");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_811()
//#line 5649 "as-parser.jay"
{
		start_block (GetLocation (yyVals[-7+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_812()
//#line 5659 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-5+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-10+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_819()
//#line 5682 "as-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_820()
//#line 5690 "as-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_821()
//#line 5695 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_822()
//#line 5703 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_823()
//#line 5709 "as-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_824()
//#line 5714 "as-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_825()
//#line 5722 "as-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_826()
//#line 5727 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_827()
//#line 5735 "as-parser.jay"
{
		var new_stmnt = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (new_stmnt, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = new Throw (new_stmnt, GetLocation (yyVals[-5+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_828()
//#line 5742 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_829()
//#line 5750 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_830()
//#line 5766 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_834()
//#line 5792 "as-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_835()
//#line 5797 "as-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_836()
//#line 5802 "as-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_837()
//#line 5810 "as-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_838()
//#line 5817 "as-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [l.Count - 1].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_840()
//#line 5841 "as-parser.jay"
{
		start_block (GetLocation (yyVals[-4+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-5+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-1+yyTop];

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (c.Variable);
		
		lbag.AddLocation (c, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_842()
//#line 5858 "as-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_845()
//#line 5886 "as-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_847()
//#line 5896 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_848()
//#line 5904 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_849()
//#line 5914 "as-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_850()
//#line 5924 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_851()
//#line 5929 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_852()
//#line 5941 "as-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_853()
//#line 5951 "as-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_854()
//#line 5956 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_855()
//#line 5965 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_856()
//#line 5973 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_858()
//#line 5984 "as-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_860()
//#line 5996 "as-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_861()
//#line 6007 "as-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_862()
//#line 6019 "as-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_863()
//#line 6030 "as-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_864()
//#line 6037 "as-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_865()
//#line 6046 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_866()
//#line 6054 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_867()
//#line 6069 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_868()
//#line 6077 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_870()
//#line 6096 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_872()
//#line 6111 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_873()
//#line 6128 "as-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_874()
//#line 6143 "as-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_876()
//#line 6156 "as-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_877()
//#line 6161 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_879()
//#line 6173 "as-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_880()
//#line 6180 "as-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_881()
//#line 6188 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_882()
//#line 6195 "as-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_884()
//#line 6207 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_891()
//#line 6227 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_893()
//#line 6246 "as-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_894()
//#line 6256 "as-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_895()
//#line 6264 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_896()
//#line 6272 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_897()
//#line 6280 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_898()
//#line 6318 "as-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_899()
//#line 6326 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_900()
//#line 6334 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_901()
//#line 6342 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_905()
//#line 6397 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_907()
//#line 6408 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_908()
//#line 6415 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_910()
//#line 6424 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_911()
//#line 6431 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_913()
//#line 6443 "as-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_914()
//#line 6448 "as-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_916()
//#line 6460 "as-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_917()
//#line 6465 "as-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_919()
//#line 6475 "as-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_920()
//#line 6491 "as-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_923()
//#line 6518 "as-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_type.AddMember (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_924()
//#line 6546 "as-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_934()
//#line 6589 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_935()
//#line 6595 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_938()
//#line 6610 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_939()
//#line 6615 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_940()
//#line 6623 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_941()
//#line 6631 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_949()
//#line 6669 "as-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_950()
//#line 6675 "as-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_951()
//#line 6684 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

//#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   15,   19,   20,    8,   18,   18,   22,   22,   22,   23,
   23,   24,   24,    7,    7,    6,    6,   21,   21,   25,
   25,   26,   26,   27,   27,   27,   27,   27,    9,    9,
   10,   10,   35,   33,   38,   34,   34,   36,   36,   36,
   36,   37,   37,   42,   39,   40,   41,   41,   43,   43,
   43,   43,   43,   44,   44,   48,   45,   47,   50,   50,
   50,   51,   51,   52,   52,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   66,   68,   71,   72,
   73,   29,   29,   76,   54,   77,   77,   78,   78,   79,
   81,   75,   75,   80,   85,   55,   89,   55,   55,   84,
   92,   84,   86,   86,   93,   93,   94,   95,   94,   90,
   90,   96,   96,   97,   98,   88,   88,   91,   91,  101,
   56,  104,  106,   99,  107,   99,  108,   99,  109,  110,
  111,   99,   99,   99,  105,  105,  100,  100,  103,  103,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  115,  115,  118,  118,  118,  121,  118,  119,  119,  122,
  122,  123,  123,  123,  116,  116,  116,  124,  124,  124,
  117,  126,  128,  129,   57,  131,  132,  133,   59,  127,
  127,  127,  127,  127,  137,  134,  138,  135,  136,  136,
  136,  139,  140,  141,  143,   30,   30,  142,  142,  144,
  144,  145,  145,  145,  145,  145,  145,  145,  145,  148,
   60,  147,  147,  149,  149,  152,  146,  146,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  154,  153,  155,  153,  153,  153,  156,   61,  158,   58,
  161,  162,   58,  157,  164,  157,  159,  159,  165,  165,
  166,  167,  166,  168,  163,  160,  160,  160,  160,  160,
  172,  169,  173,  170,  171,  171,   62,  175,  177,  178,
   31,  174,  174,  174,  176,  176,  176,  179,  179,  180,
  181,  180,  180,  182,  183,  184,   32,  185,  185,   16,
   16,  186,  186,  189,  188,  188,  188,  190,  190,  192,
   65,  125,  102,  102,  130,  130,  193,  193,  193,  191,
  191,  194,  194,  195,  195,  197,  197,   83,   74,   74,
   87,   87,  120,  120,  150,  150,  198,  198,  198,  201,
  201,  202,  200,  200,  200,  200,  200,  200,  200,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  205,  205,  205,
  206,  206,  206,  225,  225,  226,  226,  227,  227,  208,
  208,  224,  224,  224,  224,  224,  224,  224,  224,  210,
  210,  210,  230,  230,  231,  231,  232,  232,  234,  234,
  234,  235,  235,  235,  235,  235,  236,  236,  228,  228,
  229,  229,  229,  229,  229,  241,  241,  240,  240,  242,
  242,  242,  242,  243,  211,  211,  211,  239,  239,  239,
  244,  244,  245,  245,  212,  213,  213,  214,  215,  216,
  216,  207,  207,  207,  248,  246,  217,  249,  249,  250,
  250,  251,  251,  252,  252,  252,  252,  247,  247,  199,
  199,  253,  253,  254,  254,  255,  255,  256,  256,  257,
  218,   17,   17,   17,  258,  258,  258,  258,  258,  259,
  187,  219,  220,  221,  261,  222,  262,  222,  260,  260,
  264,  263,  209,  265,  265,  265,  265,  265,  266,  266,
  266,  266,  266,  266,  267,  267,  267,  267,  268,  268,
  268,  268,  268,  268,  269,  269,  269,  270,  270,  270,
  270,  270,  271,  271,  271,  272,  272,  273,  273,  274,
  274,  275,  275,  276,  276,  277,  277,  278,  278,  278,
  280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
  280,  281,  281,  282,  282,  282,  283,  283,  284,  284,
  286,  285,  279,  279,  288,  287,  289,  287,  290,  291,
  287,  292,  293,  287,   46,   46,  237,  237,  237,  237,
  237,  223,  223,  223,   82,  295,  296,  297,  298,  299,
   28,   64,   64,   63,   63,  112,  112,  300,  300,  300,
  300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
  300,  300,   67,   67,   67,   69,   69,   69,   70,   70,
  301,  301,  302,  302,  303,  303,  304,  304,  304,  304,
  196,  196,  305,  305,  307,  113,  308,  308,  310,  309,
  306,  306,  311,  311,  312,  312,  312,  312,  316,  316,
  317,  317,  317,  314,  314,  314,  314,  314,  314,  314,
  314,  314,  314,  314,  314,  314,  318,  318,  318,  318,
  318,  318,  318,  318,  318,  318,  318,  318,  318,  332,
  332,  332,  332,  319,  333,  315,  334,  334,  335,  335,
  335,   49,   49,  337,  313,  339,  313,  341,  313,  336,
  336,  336,  338,  338,  345,  345,  344,  344,  346,  346,
  340,  340,  342,  342,  347,  347,  348,  343,  320,  320,
  320,  331,  331,  349,  350,  350,  321,  321,  351,  351,
  351,  354,  352,  352,  353,  353,  355,  355,  355,  358,
  356,  357,  357,  359,  359,  359,  322,  322,  322,  322,
  360,  360,  361,  361,  361,  365,  362,  368,  364,  364,
  371,  367,  367,  370,  370,  372,  372,  366,  366,  375,
  374,  374,  369,  369,  373,  373,  377,  376,  376,  363,
  378,  363,  323,  323,  323,  323,  323,  323,  379,  380,
  380,  381,  381,  381,  382,  382,  383,  383,  384,  384,
  385,  385,  324,  324,  324,  324,  386,  386,  387,  388,
  387,  387,  325,  326,  389,  329,  327,  327,  391,  392,
  330,  394,  395,  328,  328,  328,  393,  393,  390,  390,
  294,  294,  294,  294,  396,  396,  398,  398,  400,  399,
  401,  399,  397,  397,  397,  397,  397,  405,  403,  406,
  407,  403,  402,  402,  408,  408,  408,  408,  408,  413,
  409,  414,  410,  415,  416,  417,  411,  419,  420,  421,
  411,  418,  418,  423,  412,  422,  426,  422,  425,  428,
  425,  424,  424,  424,  427,  427,  427,  404,  429,  404,
    3,    3,  430,    3,    3,  431,  431,  238,  238,  233,
  233,    5,  432,  432,  432,  432,  436,  432,  432,  432,
  432,  433,  433,  434,  437,  434,  435,  435,  438,  438,
  439,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    5,    3,    5,
    2,    0,    0,   10,    0,    1,    1,    3,    1,    0,
    1,    0,    1,    0,    1,    0,    1,    0,    1,    1,
    2,    1,    2,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    0,    3,    0,    6,    3,    1,    1,    1,
    1,    1,    3,    0,    3,    1,    0,    3,    0,    1,
    1,    3,    3,    1,    1,    0,    4,    4,    0,    1,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
    0,   17,    5,    0,   10,    0,    1,    1,    2,    3,
    0,    3,    1,    1,    0,   10,    0,   10,    8,    0,
    0,    3,    0,    1,    1,    2,    2,    0,    5,    0,
    1,    1,    2,    3,    0,    4,    2,    1,    1,    0,
    3,    0,    0,   11,    0,   10,    0,   10,    0,    0,
    0,   14,   10,    5,    0,    2,    1,    1,    0,    1,
    1,    3,    3,    3,    5,    3,    5,    1,    1,    1,
    1,    3,    5,    2,    5,    0,    8,    0,    1,    1,
    2,    1,    1,    1,    4,    6,    4,    1,    2,    2,
    1,    0,    0,    0,   12,    0,    0,    0,   15,    1,
    2,    1,    2,    1,    0,    5,    0,    5,    1,    1,
    1,    0,    0,    0,    0,   16,    5,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    5,    1,    1,    1,    1,    0,    8,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    8,    0,    8,    2,    2,    0,    9,    0,   10,
    0,    0,   11,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    0,    2,    2,    2,    1,    1,    1,
    0,    5,    0,    5,    1,    1,    2,    0,    0,    0,
   12,    0,    2,    2,    0,    1,    2,    1,    3,    2,
    0,    5,    1,    0,    0,    0,   13,    0,    1,    1,
    3,    1,    4,    2,    0,    3,    2,    1,    3,    0,
    3,    1,    1,    3,    1,    2,    3,    4,    4,    0,
    3,    1,    3,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    1,    2,    1,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
    3,    4,    4,    4,    3,    3,    4,    3,    4,    4,
    4,    4,    0,    1,    3,    4,    0,    1,    1,    3,
    2,    3,    1,    2,    3,    2,    1,    1,    0,    1,
    1,    3,    3,    3,    2,    1,    1,    1,    1,    2,
    2,    4,    3,    1,    4,    4,    3,    1,    3,    2,
    1,    3,    1,    1,    1,    4,    3,    2,    2,    6,
    3,    6,    7,    3,    0,    2,    4,    1,    2,    0,
    1,    1,    3,    3,    1,    1,    1,    0,    1,    1,
    2,    2,    3,    1,    2,    2,    4,    1,    3,    0,
    5,    1,    1,    1,    2,    3,    3,    4,    4,    1,
    2,    4,    4,    4,    0,    4,    0,    5,    0,    1,
    0,    4,    4,    1,    2,    2,    4,    2,    1,    2,
    2,    2,    2,    2,    1,    3,    3,    3,    1,    3,
    3,    3,    3,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    1,    3,    1,    3,    1,
    3,    1,    3,    1,    3,    1,    3,    1,    5,    4,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    2,    1,    0,    1,    1,    1,
    0,    2,    1,    1,    0,    4,    0,    5,    0,    0,
    7,    0,    0,    8,    1,    1,    1,    1,    1,    1,
    1,    6,    4,    4,    1,    1,    0,    0,    0,    0,
   16,    0,    1,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    2,    3,    0,    2,    3,    0,    1,
    1,    2,    4,    3,    1,    3,    1,    3,    1,    1,
    0,    1,    1,    1,    0,    4,    1,    1,    0,    4,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    4,    1,    2,    2,    2,
    1,    1,    1,    0,    8,    0,    6,    0,    8,    0,
    2,    1,    0,    1,    0,    1,    1,    2,    2,    4,
    0,    2,    0,    1,    1,    2,    4,    1,    2,    2,
    2,    2,    2,    1,    1,    1,    1,    1,    5,    7,
    4,    0,    8,    4,    0,    1,    1,    2,    1,    0,
    3,    1,    2,    3,    3,    1,    1,    1,    1,    1,
    5,    4,    7,    3,    6,    0,    4,    0,    5,    1,
    0,    4,    2,    2,    2,    1,    1,    0,    1,    0,
    5,    1,    0,    1,    0,    1,    1,    1,    3,    4,
    0,   11,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    3,    4,    3,    3,    2,    6,    2,    4,    3,
    0,    1,    3,    4,    5,    3,    1,    2,    2,    0,
    8,    3,    2,    2,    0,    3,    5,    4,    0,    0,
   10,    0,    0,    9,    5,    4,    2,    1,    0,    2,
    2,    2,    2,    2,    4,    5,    4,    5,    0,    5,
    0,    6,    3,    2,    2,    2,    1,    0,    3,    0,
    0,    6,    1,    2,    1,    1,    1,    1,    1,    0,
    5,    0,    3,    0,    0,    0,   12,    0,    0,    0,
   13,    0,    2,    0,    3,    1,    0,    4,    1,    0,
    4,    1,    2,    2,    1,    2,    2,    0,    0,    4,
    2,    3,    0,    4,    2,    2,    3,    0,    1,    1,
    1,    2,    2,    2,    4,    3,    0,    7,    4,    4,
    3,    1,    3,    0,    0,    4,    0,    1,    1,    3,
    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  921,    0,    0,  925,    0,
    0,   15,   17,  365,  371,  378,  366,  368,    0,  367,
    0,  374,  376,  363,    0,  370,  372,  364,  375,  377,
  373,  330,  942,    0,  369,  932,    0,   10,    1,    0,
    0,    0,   12,    0,  756,    0,    0,    0,    0,    0,
    0,    0,  405,    0,    0,    0,    0,    0,    0,    0,
    0,  403,    0,    0,    0,  465,    0,  404,    0,  500,
    0,  845,    0,    0,    0,  611,    0,    0,    0,    0,
    0,    0,    0,  665,    0,  714,    0,    0,    0,    0,
    0,    0,    0,  402,    0,  599,    0,    0,  755,    0,
  697,    0,    0,    0,  379,  380,  381,    0,  383,  384,
  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  400,  401,  606,  610,  529,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  607,  605,  608,  609,  681,  683,    0,  679,  682,  698,
  700,  701,  702,  703,  704,  705,  706,  707,  708,  709,
  699,    0,  757,  758,  777,  778,  779,  780,  813,  814,
  815,  816,  817,  818,    0,    0,    0,    0,  347,  723,
  358,    0,    0,    0,    0,  346,  320,    0,  322,  502,
    0,    0,    0,  929,   16,  922,    0,    0,  244,  243,
  240,  245,  246,  239,  258,  257,  250,  251,  247,  249,
  248,  252,  241,  242,  253,  254,  260,  259,  255,  256,
    0,    0,  945,    0,  934,    0,  933,    3,   53,    0,
    0,    0,   51,   13,    0,  406,    0,  407,    0,    0,
  819,  843,    0,  722,    0,  821,  820,    0,  713,  754,
  684,  711,  710,  712,  685,  686,  687,  688,  689,  690,
  691,  692,  693,  694,  695,  696,    0,    0,    0,  786,
    0,  521,  515,  520,    0,    0,    0,    0,    0,    0,
    0,    0,  826,    0,    0,    0,    0,  832,    0,    0,
    0,  828,    0,    0,    0,  844,    0,    0,    0,    0,
    0,  350,    0,    0,    0,    0,  349,    0,    0,    0,
    0,    0,    0,    0,  602,    0,    0,    0,  382,  528,
    0,    0,  526,  530,  531,  525,  534,  532,  533,  595,
  511,    0,  399,  398,    0,    0,    0,  139,  496,  138,
  498,    0,    0,    0,  715,    0,    0,    0,  468,  469,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  924,  680,  752,  753,
  877,  892,    0,    0,  878,  880,    0,  904,  863,  861,
  885,    0,    0,  883,  886,  887,  888,  889,  864,  862,
  927,    0,    0,  324,  319,    0,  357,   19,  510,  505,
    0,    0,    0,  356,    0,  359,    0,    0,    0,  941,
    0,  331,    0,    0,    0,  943,    0,    6,    0,   52,
  467,    0,  463,  464,    0,    0,  461,    0,    0,    0,
    0,  446,  449,    0,    0,  441,  448,  447,    0,    0,
    0,  784,    0,  751,  749,  750,  721,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  615,    0,  824,
  822,  616,    0,    0,  487,    0,    0,    0,  478,    0,
  482,  474,    0,    0,    0,    0,  471,  352,  476,  351,
  825,    0,    0,    0,  836,    0,    0,    0,  837,    0,
    0,  846,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  535,    0,    0,  517,    0,  597,
  678,    0,    0,  673,  675,  676,  677,  410,  411,    0,
  327,  328,    0,  183,  182,  184,  354,    0,    0,    0,
  353,    0,  582,    0,    0,    0,    0,  830,    0,    0,
  415,    0,  418,    0,  416,  457,    0,    0,    0,    0,
  571,  572,  573,  574,  575,  576,  577,  578,  579,  581,
  580,  536,  538,  537,  543,  544,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  567,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  876,  875,    0,  884,    0,  874,    0,    0,
    0,    0,  321,  506,  492,  494,    0,  491,    0,  939,
  940,  345,    0,    0,  342,    0,    0,  180,    0,    0,
  949,  935,  937,   61,   59,   60,    0,    0,   54,    0,
    0,   62,   64,   29,   27,   22,    0,  414,    0,  466,
    0,  454,  451,  450,    0,  445,  408,  409,  420,    0,
  513,  728,  523,    0,  720,  719,  849,  718,  790,    0,
  808,  787,    0,  799,    0,    0,  810,  170,  191,    0,
    0,    0,  160,    0,    0,    0,  171,  516,  823,  761,
    0,  848,    0,    0,  477,    0,    0,    0,  433,    0,
    0,  429,    0,    0,  458,    0,    0,  512,  764,    0,
    0,  839,    0,  834,    0,  838,  504,    0,    0,  514,
  856,    0,  852,  724,  732,    0,    0,  782,    0,    0,
  867,    0,  865,    0,    0,  613,  614,    0,    0,    0,
  667,  668,  666,  674,  590,  596,  589,    0,    0,  326,
  585,    0,    0,    0,  527,  499,  497,  829,  716,  419,
  413,  417,  412,  456,  455,  421,  422,  570,    0,  594,
  593,  893,  869,    0,  894,    0,  879,  881,  890,    0,
  905,    0,  873,  919,   20,   18,  323,  509,  493,  495,
  508,  664,  663,    0,  662,    0,  341,  951,  181,  946,
    0,    0,   55,    0,    0,    0,    0,    0,   81,   80,
    0,  462,  453,    0,  444,  443,  442,    0,    0,    0,
  800,  788,    0,    0,    0,    0,    0,  174,  522,    0,
    0,    0,    0,  847,  484,  483,  436,    0,    0,  930,
  931,  425,  431,    0,  434,    0,  460,    0,    0,    0,
  762,    0,  842,    0,  835,    0,  501,  855,    0,    0,
  748,  731,    0,    0,    0,  737,  781,  868,  866,    0,
  518,    0,  598,  592,  329,  584,  583,  600,  569,    0,
  871,    0,  898,    0,    0,  913,  914,  907,    0,  344,
  343,  950,    0,    0,   63,   57,    0,   65,   23,   28,
   78,  452,    0,    0,  785,    0,    0,    0,    0,    0,
  809,    0,  189,  190,    0,    0,    0,    0,  163,  172,
  164,  166,    0,  435,  437,  438,  432,  426,  430,    0,
  489,  472,  459,  470,  424,    0,  827,    0,  858,    0,
    0,    0,    0,  727,  738,  612,  603,    0,  870,    0,
    0,    0,    0,  891,    0,  920,  938,    0,    0,    0,
   70,   71,   74,   75,    0,  742,  114,    0,    0,    0,
  745,  783,  860,    0,    0,    0,  804,    0,    0,    0,
    0,  187,    0,    0,    0,  760,  473,  769,    0,  776,
    0,    0,  767,    0,  772,    0,  857,  853,    0,    0,
    0,  601,  872,  895,    0,  882,    0,    0,  909,    0,
   76,   68,    0,    0,    0,  729,  746,  850,  801,  789,
  797,  796,  791,  793,    0,  175,    0,    0,  167,  165,
    0,  763,  768,    0,  773,  840,    0,  725,  740,  604,
    0,  899,  916,  917,  910,   56,    0,   72,   73,    0,
    0,    0,    0,  811,  176,  186,  775,  774,    0,    0,
  854,    0,    0,    0,   77,    0,    0,    0,    0,   40,
   42,   44,   45,   46,   47,   48,  747,  851,  792,    0,
    0,  806,    0,    0,  669,  841,  896,    0,  911,  633,
  631,  639,  628,  638,  632,  630,  629,  636,  634,  635,
  641,  637,  640,  642,    0,    0,  626,   43,   24,   41,
  795,  794,  812,  177,    0,    0,  900,    0,    0,  623,
    0,  627,    0,    0,    0,    0,  348,    0,  617,    0,
    0,  670,    0,  897,    0,    0,    0,  298,    0,  217,
    0,  103,    0,  903,  901,  314,  304,  303,    0,  618,
  213,   98,    0,  299,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  315,    0,    0,  313,  300,    0,  308,
  362,    0,    0,    0,    0,    0,    0,    0,  297,    0,
    0,  645,    0,  360,    0,  619,    0,  651,  214,   99,
  316,    0,    0,  309,  648,    0,    0,    0,  652,    0,
    0,    0,    0,   31,  301,  361,  654,    0,    0,    0,
  100,  317,  312,  659,    0,  660,  657,    0,  655,   96,
    0,   94,    0,    0,   84,   86,   87,   88,   89,   90,
   91,   92,   93,   95,  140,    0,  229,  222,  223,  224,
  225,  226,  227,  228,    0,    0,  220,    0,    0,    0,
    0,  620,   85,    0,    0,  215,  221,    0,  658,  656,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  230,  238,    0,  158,  141,  157,    0,
    0,  101,    0,    0,  333,  332,    0,    0,    0,  266,
    0,    0,  267,    0,    0,    0,    0,  265,    0,  335,
    0,    0,    0,    0,    0,    0,  149,    0,  621,  216,
    0,    0,    0,    0,    0,    0,  263,    0,    0,  154,
  142,    0,  145,  147,  261,    0,  336,    0,  236,    0,
    0,    0,  233,  232,  231,  102,  104,  337,    0,    0,
    0,    0,  334,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  192,  115,    0,    0,  271,    0,  338,
    0,  339,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  196,    0,    0,    0,  150,  113,  111,    0,    0,
  275,    0,    0,  119,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  193,  121,    0,    0,    0,    0,
    0,    0,  108,  290,    0,  272,    0,    0,  284,    0,
    0,    0,  279,    0,  137,    0,    0,    0,    0,  132,
  268,    0,  143,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  125,    0,  112,    0,  105,  109,
    0,    0,    0,  286,    0,  287,  276,    0,    0,  270,
  280,  264,    0,    0,  118,  133,  156,    0,  153,  146,
  148,  262,    0,  235,  237,  234,  204,    0,  194,    0,
    0,  122,    0,  116,  126,    0,  110,  291,  293,  273,
    0,    0,  285,  282,  136,  134,  144,  197,    0,    0,
  201,  203,  128,    0,    0,    0,  284,    0,  205,  207,
  195,    0,  151,  295,  296,  292,  294,  283,  198,    0,
    0,  129,    0,    0,  211,  210,  209,  206,  208,  152,
  199,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   49,    9,   50,   10,   11,   51,  240,  700,  422,
   12,   13,   52,   22,   23,  314,  194,  666,  827,  985,
 1088,  667, 1524,  567, 1089, 1090, 1242, 1092, 1093, 1094,
 1095, 1096,  243,  659,  447,  660,  661,  914,  662,  663,
  918,  826,  980,  981,  982,  260,  463, 1067,  110,  831,
 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
 1253, 1254, 1125, 1141, 1305, 1163, 1181, 1177, 1194, 1206,
 1221, 1268, 1331, 1191, 1399, 1377, 1421, 1422, 1423,  986,
 1419,  987, 1146, 1417, 1395, 1453,  509, 1406, 1385, 1438,
  881, 1451, 1454, 1455, 1522, 1439, 1440, 1436, 1255, 1298,
 1274, 1306,  702, 1367, 1443, 1478, 1369, 1370, 1352, 1418,
 1533, 1126,  261,  703,  704,  705,  706,  707,  646,  559,
 1104,  647,  648,  847, 1307, 1394, 1489, 1450, 1510, 1322,
 1413, 1518, 1534, 1490, 1491, 1538, 1530, 1531, 1161, 1176,
 1220, 1265, 1301, 1266, 1267, 1294, 1355, 1328, 1485,  317,
  231, 1373, 1295, 1371, 1364, 1339, 1402, 1379, 1431, 1426,
 1400, 1462, 1467, 1429, 1432, 1433, 1517, 1468, 1427, 1428,
 1526, 1515, 1516, 1158, 1169, 1188, 1179, 1200, 1189, 1190,
 1212, 1173, 1197, 1222,  427,  197,  112,  344,  199,  553,
  442,  232, 1309,  644,  645,  814, 1147,  201,  434,  113,
 1203, 1192,   45,  114,  115,  116,  117,  118,  119,  120,
  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
  131,  132,  133,  134,  135,  253,  679,  464,  465,  954,
  507,  720,  862,  721,  722,  947,  136,  206,  726,  466,
  467,  468,  673,  456,  457,  291,  952,  292,  498,  499,
  500,  501,  435,  637,  137,  352,  305,  203,  430,  283,
  487,  758,  284,  486,  138,  139,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  792,  152,
  562,  563,  564,  766,  767,  768,  153,  550,  760,  345,
  968,  539, 1021,  154,  493, 1159, 1175, 1218, 1296, 1127,
 1207, 1208, 1238, 1239,  815,  542,  331,  763, 1106, 1135,
  543,  544,  262,  263,  264,  157,  158,  159,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  171,  277,  570,  481,  482,  747,  880,  884,  526,  924,
  838,  989,  882,  885,  995,  886,  990,  991,  278,  172,
  173,  174, 1011,  956, 1012, 1013, 1014, 1054, 1015,  175,
  176,  177,  178,  692,  483,  693,  998,  930,  999, 1099,
 1073, 1044, 1100,  694,  929,  695, 1102, 1103,  179,  180,
  181,  182,  183,  184,  299,  518,  519, 1080,  308,  928,
  840, 1072,  961,  879, 1057,  185,  410,  186,  411,  900,
  970,  412,  413,  628,  619,  620,  904,  414,  415,  416,
  417,  418,  905,  614,  902, 1061, 1136, 1154,  972, 1083,
 1145,  801,  622,  802, 1028,  975, 1029, 1084,  909,   17,
   19,   46,   47,  235,  649,  822,  443,  650,  651,
  };
  protected static readonly short [] yySindex = {         -101,
    0, -184,  -89,   -4,   74, 9736,    0,  200,    0,    0,
   74,   -4,    0,    0,   79,    0, 5055,   74,    0, 7487,
 -228,    0,    0,    0,    0,    0,    0,    0,  269,    0,
  293,    0,    0,    0, 2626,    0,    0,    0,    0,    0,
    0,    0,    0,  322,    0,    0,  370,    0,    0,  200,
  267,   74,    0,  311,    0,  418,  407, -265, -253, -180,
 -266, 5226,    0, -266, -266, -266,  512,  137, -266, -266,
  524,    0, 6323, -266, -266,    0,  651,    0,  541,    0,
 -265,    0, -266, -253, -266,    0, 9743, 9743,  577, -266,
 -266,  -60, 9379,    0, 8614,    0, 9379, 9379, 9379, 9379,
 9379, 9379, 9379,    0,  232,    0, 9925, 6031,    0,  102,
    0,  546,  609,  539,    0,    0,    0,  617,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  694,  793,
   38,  595,  559,  143,  632,  706,  655,  663,  283,  720,
    0,    0,    0,    0,    0,    0, 2609,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -250,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  400,  472,  267,    0,    0,    0,
    0,  357, -238,  740,  745,    0,    0,  222,    0,    0,
  854,  838,  866,    0,    0,    0, 9925, 9925,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  861,  830,    0,  831,    0, -255,    0,    0,    0,  267,
  946,  267,    0,    0, 1010,    0,  840,    0, 8749, 8074,
    0,    0, 8614,    0,  890,    0,    0, 9925,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -149,  111, 9514,    0,
 9823,    0,    0,    0, 8614,  892,  901, 8614, 8614, 7409,
 -182,10005,    0, -266, -266, 9379,  232,    0,  907, 9925,
 8614,    0, -266,  668, -266,    0, 8614,  541, 8209,  904,
 8614,    0,   58,  317, 1012, -253,    0,  885, 1015, -253,
 8614, 8614, 8614,  512,    0,  956, 1024,  412,    0,    0,
 5397, -282,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 7638,    0,    0, 9600,   58,  934,    0,    0,    0,
    0,  933,  936, 8614,    0,  894,  507,  550,    0,    0,
 6469, 8074, 9379, 8614, 8614, 8614, 8614, 8614, 8614, 8614,
 8614, 8614, 8614, 8614, 9379, 9379, 9379, 9925, 9925, 9379,
 9379, 9379, 9379, 9379, 9379, 9379, 9379, 9379, 9379, 9379,
 9379, 9379, 9379, 9379, 9379, 8614,    0,    0,    0,    0,
    0,    0, 9743, 9743,    0,    0, -253,    0,    0,    0,
    0,  570,  954,    0,    0,    0,    0,    0,    0,    0,
    0,  267,  895,    0,    0, -272,    0,    0,    0,    0,
  894,  745,  480,    0,  854,    0, -253,  861,  861,    0,
   82,    0,  527,  861,  945,    0, -172,    0, -168,    0,
    0,  894,    0,    0,  943,  682,    0, 8614, 8614,  949,
 1078,    0,    0, -273,  951,    0,    0,    0,  955, 9514,
  962,    0, -266,    0,    0,    0,    0,  340,  539,  838,
 -253,  854, 6177, -253, 1083, -165,  541,    0,  961,    0,
    0,    0,  -62,   83,    0,  543,    0,  971,    0,  968,
    0,    0, 7263,  977, 8614, 8074,    0,    0,    0,    0,
    0,  978,  138, 8074,    0, -265,  541,  240,    0, 7518,
  980,    0,  147, -253, 9514, -179,  152,  938, 8614, 1071,
  894, 8614, 1073,  989,    0,  992,  993,    0, 9600,    0,
    0, -287, 5397,    0,    0,    0,    0,    0,    0,  541,
    0,    0, -263,    0,    0,    0,    0,   58, -253,10049,
    0,  996,    0,  994, 9379, 6615, 1001,    0,  998, 5397,
    0,  489,    0,  523,    0,    0,  -77, -273,  -95,  793,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  793,  793,   38,   38,
  595,  595,  595,  595,  559,  559,  143,  632,  706,  655,
  663,    0, -187, 6761, 1088, -253, 1093, -253, 6761, 6761,
 1005, 8614,    0,    0,  954,    0, -253,    0, -240, 1011,
  894,  745,    0,    0,    0,    0,  737,    0,  745,    0,
    0,    0,  669,  146,    0,10049,  527,    0, 1017, 1018,
    0,    0,    0,    0,    0,    0,   58, 1020,    0, 1022,
 1021,    0,    0,    0,    0,    0, 1025,    0,  497,    0,
 8749,    0,    0,    0, 7939,    0,    0,    0,    0, 5885,
    0,    0,    0, 8614,    0,    0,    0,    0,    0, -253,
    0,    0, 1028,    0, 1026, 1030,    0,    0,    0,  689,
  132, 1029,    0, 1033, 1034, 1043,    0,    0,    0,    0,
 5226,    0, 5226, 6615,    0, 7409, 8344,  467,    0, -281,
  -52,    0,  990,  999,    0,  129, 1051,    0,    0, 1058,
 1054,    0, -167,    0,  541,    0,    0,  447, 1055,    0,
    0, 5226,    0,    0,    0, 6615, 1059,    0, 5226,  894,
    0, 8614,    0, 8614, 9925,    0,    0,  541, 1063,  541,
    0,    0,    0,    0,    0,    0,    0, 6761, 9925,    0,
    0, -253, 9600, 1094,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6761,    0,
    0,    0,    0, 1151,    0, 1152,    0,    0,    0,  859,
    0, 1069,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1031,    0,   82,    0,    0,    0,    0,
  527,  527,    0,  895, 1076, 1077, 1080, 1037,    0,    0,
 8614,    0,    0,  593,    0,    0,    0, 1070,  153, 1075,
    0,    0, 8614, 9925,  689, 1040, 9925,    0,    0,  224,
 1215, 1217, 1194,    0,    0,    0,    0, -161, 8479,    0,
    0,    0,    0, 7128,    0, 1220,    0,  854, 8614, 1101,
    0, 1095,    0, 1097,    0,  226,    0,    0, -156, -179,
    0,    0, -253, 1098, 1059,    0,    0,    0,    0, 1104,
    0, 1127,    0,    0,    0,    0,    0,    0,    0, 6761,
    0, 6761,    0, 1126, 6761,    0,    0,    0,  635,    0,
    0,    0, 1108,  895,    0,    0, 8884,    0,    0,    0,
    0,    0, 8614, 1109,    0, 1106, 6615, 1059, -179, 8614,
    0, 1195,    0,    0, 1110, -159, 1112, 1115,    0,    0,
    0,    0, 5226,    0,    0,    0,    0,    0,    0, 1121,
    0,    0,    0,    0,    0, -200,    0, 9925,    0, 1059,
 1123, 1059, 1116,    0,    0,    0,    0,  541,    0, 6761,
 1146, 6761, 6761,    0, 8614,    0,    0, 1021,  698,  665,
    0,    0,    0,    0,   -4,    0,    0, -253, 1120, 1109,
    0,    0,    0, 1059, 1128, 1059,    0, 5226,  659, 8614,
 7692,    0, 1124, 1256, 1259,    0,    0,    0, 8614,    0,
 1139, -203,    0, -203,    0, 1136,    0,    0, 1133, 6615,
  541,    0,    0,    0, 1165,    0,  881, 1142,    0, 1143,
    0,    0, 8884,   74, 1138,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1145,    0, 1141, 8614,    0,    0,
 -100,    0,    0, 5397,    0,    0, 5226,    0,    0,    0,
 6761,    0,    0,    0,    0,    0, 8614,    0,    0,  267,
 8614, 5226, 8614,    0,    0,    0,    0,    0, 5397, 1153,
    0, 1176, 6761, 8614,    0,10577,  634, 1168,  267,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  768,
 1026,    0, 5226, 8614,    0,    0,    0, 1189,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  134,10577,    0,    0,    0,    0,
    0,    0,    0,    0, 5397, 6761,    0,10097, 1122,    0,
  325,    0, 1170, 1183, 6761, 1122,    0, 1166,    0, 1297,
 1298,    0, -253,    0, 1183, 1173, 7736,    0, 1122,    0,
 1122,    0, 1122,    0,    0,    0,    0,    0, 1178,    0,
    0,    0, -165,    0, 1272, 1272, 1272, 1180,  267, 9925,
 1261, 1261, 1261,    0, 1132,  874,    0,    0, 1184,    0,
    0, 1314, 9925, 1223, 1223, 1223, 1223,    0,    0, 1197,
  267,    0,   50,    0, 1159,    0, 1223,    0,    0,    0,
    0, 1200, 1206,    0,    0, 9925,  -93, 1203,    0, 1222,
 1224, 1208, 8614,    0,    0,    0,    0, 9650,  177,  267,
    0,    0,    0,    0, 1216,    0,    0, 1221,    0,    0,
10577,    0, 1228,  177,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,10577,    0,    0,    0,    0,
    0,    0,    0,    0, 1229,  267,    0,  177, 1226, 9650,
11328,    0,    0,  461,11351,    0,    0, 1231,    0,    0,
 1182, 1185,  235, 1199,  918, 1185, 1185,  268, -245, 2626,
 1185, 1201, 1320,    0,    0, 1206,    0,    0,    0, 7783,
 1206,    0, 1236,   58,    0,    0, 1237, 1204, 1205,    0,
 1247, 1249,    0,  -75, 7783, 1254, 1257,    0, 1264,    0,
   58, 1255, -226, 1265, 1266, 1268,    0,  509,    0,    0,
 1206, 9925, 1267, 9925,  894, 1225,    0,10005, 1227,    0,
    0, 1275,    0,    0,    0,10097,    0,  894,    0,10097,
10097, 1185,    0,    0,    0,    0,    0,    0, 1280, 1276,
 7578, 1277,    0, -165, 1403, 1281, -165, -165, -165, -165,
 -165, 1282, -165,    0,    0, 1284, -107,    0, 1285,    0,
    0,    0, 1289, 1286, 1287, 1291, 1293, 1296, 1299, 1300,
 1302,    0, 1303, 1290, 1288,    0,    0,    0, 1304,  180,
    0, 1305, 1295,    0, 1431, 1306,  461, 1307, 1308, 1310,
 1311, 1312, -165, 1313,    0,    0, 1315, -165, 8614, 1263,
 1316, 1304,    0,    0,10577,    0,  267,  267,    0, 1278,
 1317, 1305,    0, 9925,    0, 8614, 1279, 1318, 1306,    0,
    0,10097,    0,10097,10097,10097, 9925, 1325,10141,  189,
 6615, 1283, 1323, 1315,    0, 1328,    0, -107,    0,    0,
 -155, 1334,10577,    0,10577,    0,    0, 6615, 1324,    0,
    0,    0, 1333, 1287,    0,    0,    0, 1223,    0,    0,
    0,    0, 1337,    0,    0,    0,    0,10577,    0,  189,
  189,    0, 1326,    0,    0, 1331,    0,    0,    0,    0,
 1394, 1457,    0,    0,    0,    0,    0,    0,  883, 1342,
    0,    0,    0, 1374,  624,  624,    0,  189,    0,    0,
    0, 6615,    0,    0,    0,    0,    0,    0,    0,  -84,
  -84,    0, 1223, 1345,    0,    0,    0,    0,    0,    0,
    0,
  };
  protected static readonly short [] yyRindex = {           30,
    0,    0, 5568,   30,    0,    0,    0, 1725,    0,    0,
   35, 2513,    0,    0,    0,    0,    0,   35,    0,    0,
   31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1726,    0,    0, 1726,    0,    0, 1725,
   66,  366,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1349,    0,    0,    0,
10191,    0, 1341,    0,    0,    0,10191,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  223,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3172,    0,    0,    0,    0,    0,
    0,    0,    0, 3108,    0,    0,    0, 2990,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2195, 3290,
 3562, 3766, 1910, 4331, 4467, 4603, 4739, 1179,  718, 1775,
    0,    0,    0,    0,    0,    0,   31,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   67, 1322,    0,    0,
    0,  476,  429,    0,    0,    0,    0,    0,    0,    0,
 2266, 2109,  773,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1726,  119,    0,    0,    0,    0,    0,    0,    0,   45,
    0,   75,    0,    0,    0,    0,    0,    0,    0,  158,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1350,
    0,    0,    0,    0,    0,    0, 2700,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
    0,    0,  597, 2109,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1349,    0,    0,    0, 2700,    0,    0,
 -267,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1347, 1994,    0,    0,    0,    0,
    0, 1351,    0, 1341,    0, 2700,    0,    0,    0,    0,
    0,  158,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4931,    0,    0,    0,    0,    0,    0,    0,
    0, 2426,    0,    0,    0,    0,    0,    0,    0,    0,
  423,    0,    0,    0, 1824,    0,    0, 1726, 1726,    0,
 -117,    0, 9834, 1726, 1731,    0,    0,    0, 1357,    0,
    0, 2700,    0,    0,    0,    0,    0,    0,    0, -169,
    0,    0,    0,    0,  197,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  185,    0, 6960,
    0,  329, 1352,    0,    0,  307,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  923, 1193,    0,    0, 1358,
    0,    0,   13,    0,    0, 1353,    0,    0,    0,    0,
    0,    0,    0, 1353,    0,    0,    0, 1477,    0,    0,
    0,    0,    0,    0,    0,  645,    0,    0,    0,    0,
 1994,    0,    0,    0,    0,    0,    0,    0, 1347,    0,
    0,    0,  128,    0,    0,    0,    0,    0,    0, 6907,
    0,    0,    0,    0,    0,    0,    0,  760,    0,    0,
    0, 1355,    0,    0,    0, 1359,    0,    0,    0,    0,
    0, 2700,    0, 2700,    0,    0,    0,    0,  197, 3358,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3426, 3494, 3630, 3698,
 3834, 3902, 3970, 4038, 4195, 4263, 4399, 4535, 4671, 4807,
 4875,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4931,    0,    0,    0,    0,    0,
  423,    0,    0,    0,    0,    0,    0,    0,  242,    0,
    0,    0, 1330,    0,    0,    0,10235,    0,    0,  677,
    0,    0,    0,    0,    0,    0,  813,  684,    0,    0,
 1351,    0,    0,    0,    0,    0, 1368,    0, 9019,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1362,    0,    0,    0,    0, 1332,
  587,    0,    0,  713,  767,  784,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1375,    0, 4106,    0,    0,
  192,    0,   59,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  463,    0,    0,
    0,    0,    0,    0,    0,    0, 1370,    0,    0, 1994,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 6907,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -175,
    0,  775,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -117,    0,    0,    0,    0,
10283, 9914,    0, 1359,    0,  822,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  783,    0,  795,
    0,    0,    0,    0,10327,    0,    0,    0,    0,  615,
    0,    0, 1664,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2786,    0, 2904,
    0,    0,    0,    0,    0,    0,    0,    0,  795,  645,
    0,    0,    0,    0, 1373,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  800,    0,    0,    0,
    0,    0,    0, 1377,    0,    0,    0, 1387,  645,  674,
    0,    0,    0,    0,    0,    0,  829,  833,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1392,    0,    0,    0, 1387,
    0, 1370,  708,    0,    0,    0,    0, 6907,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1351, 7777,    0,
    0,    0,    0,    0,10468,    0,    0,    0,    0, 1388,
    0,    0,    0, 1391,    0, 1370,    0,    0,    0,    0,
    0,    0,  778,    0,    0,    0,    0,    0,    0,    0,
    0, 1397,    0, 5739,    0,    0,    0,    0,    0,    0,
 6907,    0,    0,    0,    0,    0,  289,  920,    0,    0,
    0,    0,    0,10536,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  790,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10926,
    0,    0,  825,    0,    0,    0,    0,    0, -208,    0,
    0,    0,    0,    0,    0,  448,11173,    0,10973,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  826,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  361,11139,    0,    0,    0,    0,
    0,    0,    0,    0, 1398,    0,    0,    0,    0,    0,
    0,    0,    0,  932,    0,    0,    0, 1400,    0, 1356,
 1361,    0,    0,    0,  932,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  307,    0,  101,  101,  101,    0,  216,    0,
 -227, -227, -227,    0,    0, 9314,    0,    0, 1402,    0,
    0,  108,    0, 1408, 1408, 1408, 1405,  562,    0,    0,
  304,    0,  339,    0,    0,    0,  647,    0,    0,    0,
    0,    0,10400,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,10660,10728,
    0,    0,    0,    0,    0,    0,    0, -251,    0,    0,
11285,    0,    0,10796,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,11285,    0,    0,    0,    0,
    0,    0,    0,    0,    0,10864,    0,10660,    0,    0,
  361,    0,    0,    0,  361,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  389,    0,    0,10400,    0,    0,    0,    0,
10400,    0,    0,  156,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1409,    0,    0,    0,    0,    0,    0,    0,    0,    0,
10400,    0,    0,    0, 1409,  217,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1409,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  648,    0,
  672,    0,    0,  307, 1414,    0,  307,  307,  307,  307,
  307,    0,  307,    0,    0,    0,    0,    0,  834,    0,
  -13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  844,    0,    0,    0, 1410,11223,
    0, 1411,    0,    0, 9154, 1412,    0,  398,    0,    0,
    0,    0,  409,    0,    0,    0, 1413,  307,    0,    0,
    0, 1415,    0,    0,  221,    0,11035,11070,    0,    0,
    0, 1417,    0,    0,    0,    0,    0,    0, 1420,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 7101,
    0,    0,    0, 1421,    0,    0,    0,    0,    0,    0,
    0,    0, 1470,    0, 1533,    0,    0,    0,  850,    0,
    0,    0,    0,    0,    0,    0,    0,  650,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  888,    0, 1074,
11020,    0,  857,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 9246,10592,    0, 7101,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  650,    0,    0,    0,    0,    0,    0,    0,
    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1760,    0,    0,    0,    6,  -11, 1638,  -48,  -27,
    0, 1814, 1822,  584,    0,  -16, 1321,    0,    0,    0,
    0,    0, -764, -634,    0,  741,-1011,    0,    0,    0,
    0,    0, -229,    0,    0,    0,  917,    0, 1013,    0,
    0,    0,    0,  801,  803,  -12, -237,    0, 1164,    0,
  572,    0,  594,-1112, -788, -519, -396, -377, -366, -327,
    0,-1051,-1183,    0,    3,    0,  122,    0,  121,-1159,
    0,    0,    0,   -2,  384,    0,    0,    0,  421,-1039,
    0, -274, -673,    0,    0,    0,  508,  371,    0,    0,
 -102,    0,    0,  399,    0,    0,  413,    0,    0,  450,
    0, -198, -751,    0,    0,    0,    0,    0,    0,    0,
    0, -573,  -17,    0,    0, 1008, 1019, 1023, 1160, -540,
    0,    0, -319, 1016,  571,    0, -725,    0,    0,    0,
    0,    0,    0,    0,    0,  332,    0,    0,    0,    0,
    0,    0,    0,    0,  604,    0,    0,    0,    0,   19,
  581,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  358,    0,    0,  442,    0,    0,  449,  451,
  360,    0,    0,    0,    0,    0,    0,    0,    0,  678,
    0,    0,    0,    0, -160,    0,  140, -135,    0,    0,
  547,    0,  596,    0, 1066,    0,    5, -291, -412,  171,
    0, -687,    0, -261, -216,    0,    0,  -50,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -268,    0,  714, 1309, -283, -308,    0,
  -46,    0,    0,    0, 1027,    0, -302, -140, 1167,    0,
 1209,    0, 1427, 1527, 1219, 1815,    0,    0,    0,    0,
    0, 1177,    0,    0,    0,    0,    0,    0, -388, 1570,
    0,    0,    0,    0,    0,  491,  536,  903,  887,  912,
 1505, 1506, 1504, 1507, 1508,    0, 1503,    0, -505,    0,
    0, 1130, 1360, -720,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -295,    0,    0,    0,    0,-1080,
    0,  697,    0,  631,    0,  774,    0,    0,    0,    0,
  858, -515,  -15, -317,   -9,    0, 1756,    0,   65,    0,
   77,   86,  103,  109,  112,  115,  117,  118,  124,  126,
    0, -580,    0, -275,    0, -539,    0, -858,    0,    0,
    0,    0,  896, -541,  958, -499,    0,  924, -462,    0,
    0,    0,    0,    0,    0,  910,    0,    0,  905,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  842,    0,    0,    0,    0,
    0,    0,    0,    0, 1569,    0, 1406,    0,    0, 1046,
    0,    0,    0,    0,    0,    0, -171,    0,    0,    0,
    0,    0, 1514, 1319,    0,    0,    0, 1515,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  786,    0,    0,
    0,    0,    0,    0,    0,    0,  849,    0,    0,    0,
    0,    0,    0,  -14, 1125,    0,    0,    0, 1137,
  };
  protected static readonly short [] yyTable = {           111,
  510,  155,  241,  193,  109,  351,  187,  156,   43,   18,
  489,  454,  450,  546,  420,  527,  397,  479,  534,  772,
  691,  497,  638,  242,  200,  560,  825,  764,  479,   36,
  928, 1097,  237,  524,   34, 1209, 1210, 1211,  196,  893,
  252,  436,  329,  634,   49, 1142,  329,  329,  329,  329,
  329,  329,  329,  579,  779, 1008,  424, 1271, 1091,  771,
  298,  304,  480,  306, 1009,    5,  926, 1009,  788,  688,
   20,   14, 1275,  502,    7,  256,  745, 1091,  578,  445,
  912,  160,  332,  654,  316,  320,  611,  664,  873, 1320,
  698,  761,  480,  161,  867,  350, 1002,  860,  653,  959,
  548,  190,  162, 1019,  347,  818,  472, 1498, 1347,  677,
  655,  671,   94,  797,  798,  246,  246, 1258,  340,  163,
  190,  769,  646,  454,  630,  164,  653, 1187,  165,  425,
  853,  166,  854,  167,  168,  653,  399, 1039,  241,  111,
  169,  155,  170,  528,  109,  426,  805,  156, 1397, 1187,
  646,  656,  762, 1258,    1, 1077,  631,  549,  861,  198,
  787,  878, 1227,  770,  248,  248,  678,   16,  887, 1499,
  771, 1535,  671,   42,  912,  254,   44,  424,  784,  912,
 1340,  912,   49, 1321,  912,  912,  699,  912,  912,  400,
  202,  448,  450,  710,  682,  503,   49,  504,  789,  246,
  723,  473, 1348,  863,  438,  439,  257,  690,  479,  912,
  424,  204,  746,  611,  239,  611,  440,  944, 1257,  560,
  571,  160,  727,  869,  771,  546,  318,  318,  329, 1010,
  731,  324, 1010,  161, 1142,  927,  453,  462,  446,  329,
  469, 1461,  162,  808,   15,  329,  318, 1022,  248,  744,
  811,  505,  546,  480, 1257,  471,  657,  202,  202,  163,
  665,  874,  894,  479,  912,  164,  480,    2,  165, 1003,
  611,  166,  488,  167,  168,  492,  494,  202,  485, 1501,
  169, 1502,  170,  899, 1398, 1078,   36,  928,  513,  680,
  522,   34, 1228,   94,  521,  633,  523,  512,  492,  378,
 1060,   49, 1536,  785, 1509, 1215, 1341,  671,  480,  536,
  537,   49,  329,  190,  928,  545,  668,  685, 1507,  686,
  711,  547,    5,  926,  329,  329,  329,  819,   36,  329,
  329,    7,  864,    3,    4,    5,    6,  642,  712,  552,
  962,  298,  379, 1030,  726,   36,  318,  318,  453,  462,
   34,  581,  582,  583,  584,  585,  586,  587,  588,  589,
  590,  591, 1006,  561,    2,   35,  834,  353,  254,  325,
  327,  345,   20, 1540,  340,  595,  596,  202,  202, 1457,
  931,   49,   49,  613,  867,  965,  994,  848,  839,  996,
   50,  427,  643,  729,  969,  633,  971,  318,  643,  974,
  616,  618,  741,  340,  285,  644,  629,  748,  925,   36,
 1138,  330,  286,  345,   34, 1139,  340, 1040,  994,  329,
  318, 1178,  424,  640,  641,  354,  380,  381,  202,  652,
  658,  318, 1240,  454, 1216, 1424,  781,  928,  783,  318,
  318, 1259,  836,  928, 1487,  672,  672,  497, 1225,  478,
  643,  202,  427,  560,  479,  951,   48,  644,  701,  341,
 1047,  239,  202,  776, 1023,  713, 1025, 1026,  340,  708,
  202,  450,  340,  726,  329,  726, 1081, 1259,  643,  478,
  726,  318,  342,  624,  318,  644, 1140,  355,  723,  474,
 1310, 1098,  725,  462,  965,  807,  340,  475,  732,  734,
  340,  462,  340,  738,  340, 1204,  672,   54,  516,  868,
  190,  239,  202,  869,  329,  202,  751,  318,  318,  753,
  730,  424, 1133, 1318,  200,  933,  735,  545, 1226,  742,
  816, 1329,  765,  547,  749,  926, 1330,  330,  196,  325,
  439,  330,  318,  318,  915,  624,  723, 1311,  202,  202,
  476,  388,  389,  350,  545, 1082,  239,  561,  318,  239,
  547,  723,  318,  764,  318,  254, 1356,  672,  239,  318,
  428,  318,  817,  202,  202,  937,  318, 1108,  561,  440,
 1319,  207,  865,  330,  717,  340,  318,  333,  334,  335,
  336,  337,  338,  339,  305,  190, 1149,  439,  340,  190,
  325,  791,  340,  239,  205,  208,  791,  791,  723,  800,
  691,  855, 1383,  318,  807, 1387, 1388, 1389, 1390, 1391,
   49, 1393,   35,   49,  507,  507,   35, 1150,  507,   49,
 1144,  428,  622,  341,  997,  205,  440,   35,  915, 1155,
  478,   49,   35,  915,   49,  915,  239,   35,  915,  915,
  431,  915,  915,  478,  631,  401,  342, 1151,  453,  198,
  623, 1448,  462,  622,  561,  329, 1456,  462,   35,   35,
  343,  492, 1372,  915,   35,   35, 1374, 1375,  318,  984,
   35,   35,  307,   35,  425,   35,   35,   35,  647,  159,
  202,  623,   35,  622,  394,  478,   35,  244,   35,  318,
  528,  350,  717,  233,  725,  234,  395,  425,   35,  202,
 1260, 1315,   35,  717,   35,  717,  647,  875,   35,  624,
  717,  623,   49,  357,  624,   49, 1315,  401,  915,  624,
  202,   49,   49,  350, 1051,   49,  546,  976,   35,  888,
  891,  889,  765,   49,   35,   35, 1260,  155,  423,  402,
  624,  233,  890,  236,  403,  791,  404,  717,  341,  405,
  406,  546,  407,  408, 1511, 1512,  895,  643, 1477,  250,
 1479, 1480, 1481, 1076,  258,  155,  791,  279,  280,  281,
  624,  342,  288,  289,  155,  318,  330,  300,  301,  159,
  325,  561, 1529,  251,  307,  984,  309,  245,  311,  246,
  624,  247,  325,  322,  323,  325,  325,  658,  318,  325,
  829,  535,  946,  341,  425,  318,  202,  546,  921,  830,
  340,  402,  701,  955,  993,  623,  403,  362,  404, 1134,
  876,  405,  406, 1261,  407,  408,  342,   49,   94,  409,
  554,  932,  318,  325,  936,  318,  945, 1297,  248,  555,
  343,  249, 1262,  535,  722,  325,  953,  450,  859,  325,
  635,  556,  325, 1263,  636,  592,  593,  594,  341, 1261,
  535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
  535,  535,  535,  535,  535,  535,   94,  791, 1262,  791,
  401,  342,  791,  282,  318, 1353,  722,  658,  580, 1263,
   50,  290, 1264,   50,  983,  343,  302,  722,  318,   50,
  488,  419,  318,  342,  350,  597,  598,  492,   94,  402,
  246,   50,  358,  515,  403,  202,  404,  780,   49,  405,
  406,   49,  407,  408,  714,  572,  516,   49, 1264,  202,
  310,  359,  360,  202,  341,  573,  310,  342, 1233,   49,
  765,  384,  385,  311,  517, 1016,  450,  791,  321,  791,
  791,  782, 1027,  318,  325,  386,  387,  342,  812,  248,
  325,   49,  361,  566,  356,  922,  325,  680,  574,  325,
  325,  343,  813,  318,  402,   49,  318, 1045,  575,  403,
 1034,  404,  357,  535,  405,  406,  488,  407,  408,  382,
  383,   94,  554,  765,  506,  845,  363,  350,  307,  624,
 1224,  555, 1128,  239,  202,   50,  514,  202,  520,  561,
  983, 1086, 1070,  556,  650,  325,  390,  649,  722,  730,
  906,  730,  269,  650,  269,  488,  649, 1041,  545,  269,
 1086, 1042, 1087,   49,  547, 1043,  510, 1032,  791, 1033,
  392,  340,  803,  318, 1085,  775,  803,  948,  488,  948,
  803, 1087,  670,  545,   66,   66,  671,  566,   66,  547,
  791, 1027,  566,  393,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  364, 1314, 1316, 1317, 1031,
  739,  488,  739,  161,  739,  161,  566,  318,  566,  341,
  566, 1314,  566,  566,  566,  391,  365,  366,  367,  368,
  369,  370,  371,  372,  373,  374, 1342,  809,  566,  545,
  396,  810,  342,  791,  906,  547,  428,  325,  202,  906,
 1185,  906,  791,  325,  906,  906,  343,  906,  906,  325,
  318, 1148,  586,  325,  586,  701, 1131,  168, 1156,  168,
 1132, 1186, 1185, 1376, 1168,  503,  196,  566,  185,  503,
  185, 1170,  185, 1171,  169, 1172,  169,  741, 1333,  741,
  173,  202,  173, 1186,  173,  908,  429,  859, 1110,  859,
 1241, 1256,   69,  195,   69, 1333,  684,  902,  325,  375,
  376,  377,  362,  325,  325, 1241,  325,  325,   58, 1360,
 1362, 1186,   67,  805,  807,  425,   67,  805,  807,  191,
  488,  191, 1362,  162,  906,  162, 1186, 1256,  274, 1241,
  274, 1111,  255,  906,  907, 1237, 1112, 1113,  120,  733,
  120,  287, 1114,  433,  281, 1115,  281, 1116, 1117, 1118,
 1186,  127,  233,  127, 1119, 1063, 1064,  310, 1120,  437,
  315,  319, 1199,  239,  441,  326, 1299, 1519, 1520,  444,
 1121,  449,  624,  624, 1122,  451, 1123, 1237,  452,  908,
  601,  602,  603,  604,  908,  470,  908,  318,  490,  908,
  908,  902,  908,  908,  599,  600,  902,  491,  902,  525,
 1124,  902,  902,  511,  902,  902,  318, 1182, 1183,  605,
  606,  485, 1195, 1196,  325, 1313,  325,  485,  202,  540,
 1354,  529,  643,  531,  532,  324,  565,  566,  342,  318,
  627,   21,  568,  346,  653,  325,  325,  202,  669, 1357,
  675, 1359,  318,  676,   49,  680,  701,  681,  697,  701,
  701,  701,  701,  701,  683,  701, 1304,  709, 1492,  715,
  202, 1425,  716,  325,  535,  318,  325,  724,  552,  908,
  728,  432,  740,  202,  196, 1503,  750,  318,  196,  196,
  752,  902,  754,  755,  756,  757,  774,   49, 1463, 1465,
  773,  777,   49,   49,  778,  701,  202,  793,   49, 1299,
  701,   49,  795,   49,   49,   49,  799,  806,  202,  820,
   49, 1488,  821,  528,   49,  824,  488,  823,  828,  318,
  843,  849,  455,  455,  842,  844,   49,  850,  851, 1532,
   49, 1308,   49, 1473, 1308, 1308, 1308,  852, 1308,  204,
 1308, 1472,  866,  870,  564,  871,  872,  877,  350, 1308,
  202, 1488, 1488,  883, 1482,  892,   49,  898,   49,   49,
  901,  903,  200,  908, 1308,  350,  916,  919,  917,  910,
  196,  923,  196,  196,  196,  920,  927, 1486,  935, 1488,
  941,  318,  942,  318,  943,  950,  833,  318,  503,  530,
  967,  957,  958,  533,  964,  318,  966,  973,  977,  318,
  318, 1308,  992,  988, 1000, 1001, 1004, 1525, 1525, 1005,
  318, 1007,  202, 1024,  202, 1018, 1036, 1020,  202,  350,
 1038, 1049, 1537, 1537, 1050, 1048,  202, 1052, 1056, 1058,
  202,  202, 1062, 1066,  455,  455, 1065, 1074,  564, 1071,
 1105,  202, 1075,  564, 1107,  564,  564,  564,  564,  564,
  564,  564,  564,  564,  564,  564, 1129, 1137, 1152, 1153,
   42, 1157, 1160, 1162, 1166, 1174, 1180,  564, 1193,  564,
 1198,  564, 1184,  564,  564,  564,  615,  617, 1201, 1202,
  621,  486, 1205,  318,  400, 1213,  400,  486,   21,  564,
 1229,  318,   21,  318,  318,  318,  318, 1217,  318,  632,
  564, 1223, 1224,   21, 1232,  400,  400, 1269,   21, 1230,
  639, 1231,  564,   21,  202, 1270, 1272, 1276, 1279, 1302,
 1303, 1327,  202, 1304,  202,  202,  202,  202,  564,  202,
   21, 1332, 1334,  400,   21,   21,  400, 1312, 1337, 1326,
   21,   21, 1335, 1336, 1338, 1343,   21,   21, 1344,   21,
 1346,   21,   21,   21,  687, 1345, 1349,  696,   21, 1361,
 1358, 1350,   21, 1351,   21, 1366, 1368, 1378, 1384, 1380,
 1382, 1392, 1386,  759,   21, 1396, 1405, 1415,   21,  455,
   21, 1403, 1404, 1407,   21, 1408, 1401,  455, 1409, 1416,
 1434, 1410, 1411,  195, 1412, 1414, 1435,  743, 1420, 1430,
 1437, 1458, 1442, 1444,   21, 1445, 1446, 1447, 1449, 1452,
   21,   21, 1459, 1470, 1475, 1483, 1469, 1474,  504, 1494,
 1496, 1493, 1500, 1505, 1508, 1504, 1514, 1513, 1499, 1498,
 1521, 1523,  771, 1541,    9,  944,  519,  831,  480,  587,
  936,   32,  833,  833,   25,  439,  481,  588,  798,   33,
  833,  833,  833,  833,  833,   26,  833,  833,  802,  833,
  833,  833,  833,  479,  833,  833,  733,  833,  661,  734,
  178,   21,  833,  743,  833,  833,  833,  833,  833,  735,
  765,  833,  833,  736,  744,  766,  671,  302,  833,  794,
  306,  796,  833,  833,  212,  649,  833,  833,  833,   97,
  804,  649,  325,  117,  624,  624,  106,  277,  130,  123,
  833,  107,  833,  278,  833,  833,  131,  124,  833,  238,
  833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  833,  490,  421,   53,   21,  833,  833, 1130,
  978,  833,  833, 1068,  455, 1069,  915, 1273,  455, 1278,
  739, 1497, 1460,  455, 1506, 1365,  833,  833,  833,  833,
  833, 1476, 1495,  841,  833,  833, 1441,  938,  833,  846,
  934, 1325, 1539,  833,  833,  833,  833,  833,  939, 1277,
 1324,  833,  940, 1471, 1528, 1527, 1466, 1464, 1214,  833,
  833,  911, 1363,  858, 1323,  674,  786,  577,  837,  832,
  949,  303,  856,  538,  607,  609,  608,  612,  759,  610,
 1280,  611,  897, 1219,  833,  833,  833,  833, 1143,  833,
  833, 1079,  398, 1037, 1101, 1059,  833, 1017, 1055,  759,
  759, 1053,  569,  736,  960,  625,  626,  759,  759,  759,
  759,  759, 1109,  759,  759,  896,  759,  759,  759,  759,
 1165,  759,  759,  803,    0,    0,  913,    0,    0,  759,
    0,  759,  759,  759,  759,  759,    0,  912,  759,  759,
    0,    0,    0,    0,    0,  759,    0,    0,    0,  759,
  759,    0,    0,  759,  759,  759,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  759,    0,  759,
    0,  759,  759,  325,    0,  759,    0,  759,  759,  759,
  759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
    0,    0,    0,    0,  759,  759,    0,    0,  759,  759,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  568,    0,    0,  759,  759,  759,  759,  759,    0,  632,
    0,  759,  759,    0,    0,  759,  963,    0,    0,    0,
  759,  759,  759,  759,  759,    0,    0,    0,  759,    0,
    0,    0,    0,    0,    0,    0,  759,  759,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  490,
  455,    0,    0,    0,    0,  490,    0,    0,    0,    0,
    0,  759,  759,  759,  759,    0,  759,  759,    0,    0,
    0,    0,    0,  759,    0,    0,    0,    0,  318,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  490,    0,  490,  568,    0,    0,    0,  490,  568,
    0,  568,  568,  568,  568,  568,  568,  568,  568,  568,
  568,  568,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1035,    0,  568,    0,  568,    0,  568,    0,  568,
  568,  568,    0,    0,    0,  553,    0,    0,    0,    0,
    0,    0,    0,  490,    0,    0,    0,    0,  490,    0,
  490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
  490,    0,    0,    0,    0,    0,  455,  490,    0,    0,
    0,  490,  490,    0,  490,  490,  490,  490,  490,  490,
  490,    0,  490,  490,  568,  490,  490,  490,  490,  490,
  490,  490,  490,  490,  490,    0,  490,  490,  490,  490,
  490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
  490,  490,  490,  490,  490,  490,    0,  490,    0,  325,
  490,    0,  490,    0,  490,  325,    0,  490,    0,  553,
    0,    0,    0,  490,  553,  355,  553,  553,  553,  553,
  553,  553,  553,  553,  553,  553,  553,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  553,    0,
  553,  325,  553,  325,  553,  553,  553,    0,  325,    0,
    0,    0,    0,    0,  553,  553,    0,    0,    0,  553,
  553,    0,    0,    0,    0,    0, 1164,    0,  553,  553,
  553,  553,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  553,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  325,    0,    0,    0,    0,  325,  553,
  325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  325,  325,    0,    0,  318,    0,    0,  325,    0,    0,
  318,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  325,    0,  325,  325,    0,  325,  325,  325,  325,  325,
    0,    0,    0,  325,  325,    0,    0,    0,  325,  325,
  325,  325,  325,  325,  325,  325,  318,    0,  318,    0,
    0,    0,    0,  318,    0,    0,    0,  325,    0,    0,
  325,    0,  325,    0,  325,   50,    0,  325,    0,    0,
    0,    0,    0,  325,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  535,    0,    0,    0,    0,    0,  535,    0,  318,    0,
    0,    0,    0,  318,    0,  318,  318,  318,  318,  318,
  318,  318,  318,  318,  318,  318,    0,    0,    0,    0,
    0,    0,  318,    0,    0,    0,  318,  318,  318,  318,
  318,  318,    0,  318,  318,  318,    0,  318,  318,  535,
  318,  318,  318,  318,  318,    0,    0,    0,  318,  318,
    0,    0,   37,  318,  318,  318,  318,  318,  318,  318,
  318,  355,    0,    0,    0,    0,    0,  355,    0,    0,
    0,    0,  318,    0,    0,  318,    0,  318,    0,  318,
    0,    0,  318,    0,  535,    0,    0,    0,  318,  535,
    0,  535,  535,  535,  535,  535,  535,  535,  535,  535,
  535,  535,    0,  355,    0,  355,    0,    0,    0,    0,
  355,    0,    0,  535,    0,  535,    0,  535,    0,  535,
  535,  535,    0,  535,  535,    0,    0,  535,  535,  535,
  535,  535,  535,  535,  535,  535,    0,    0,    0,  535,
  535,  535,  535,  535,  535,  535,  535,    0,    0,    0,
    0,    0,    0,    0,    0,  355,    0,    0,  535,    0,
  355,    0,  355,  355,  355,  355,  355,  355,  355,  355,
  355,  355,  355,    0,  535,    0,    0,    0,    0,  355,
    0,    0,    0,  355,  355,    0,  355,  355,  355,    0,
  355,  355,  355,    0,  355,  355,    0,  355,  355,  355,
  355,  355,    0,    0,    0,  355,  355,    0,    0,    0,
  355,  355,  355,  355,  355,  355,  355,  355,    0,    0,
    0,    0,   50,    0,    0,    0,   50,    0,   50,  355,
    0,    0,  355,    0,  355,    0,    0,   50,   50,    0,
    0,    0,   50,    0,    0,  355,    0,   50,   50,   50,
    0,    0,    0,   50,    0,    0,    0,   50,   50,   50,
    0,    0,   50,    0,    0,   50,   50,    0,   50,   50,
    0,    0,    0,    0,   50,   50,    0,    0,   50,   50,
   50,   50,    0,   50,   50,   50,   50,   50,    0,    0,
   50,    0,   50,    0,    0,    0,   50,    0,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   50,   37,
    0,   50,   50,   37,   50,    0,    0,    0,   50,    0,
    0,    0,    0,    0,   37,    0,    0,    0,    0,   37,
    0,    0,    0,    0,   37,    0,    0,    0,   50,    0,
   50,   50,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,    0,    0,    0,   37,   37,    0,    0,    0,
    0,   37,   37,    0,    0,    0,    0,   37,   37,    0,
   37,    0,   37,   37,   37,    0,    0,    0,    0,   37,
    0,    0,    0,   37,    0,   37,    0,    0,    0,    0,
    0,    0,    0,    0,   50,   37,    0,    0,    0,   37,
    0,   37,    0,    0,   55,   37,    0,    0,    0,    0,
    0,    0,   56,   24,   57,   25,    0,    0,   26,   58,
    0,   59,   60,   27,   61,   37,   62,   28,    0,    0,
    0,   37,   37,    0,   63,    0,   64,   30,   65,   66,
   67,    0,    0,   68,   69,    0,    0,    0,    0,    0,
   32,  209,    0,    0,   70,   33,    0,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   36,    0,   37,   74,    0,    0,
   38,    0,   75,   76,   77,   78,   79,   80,   39,   40,
   81,   82,   41,   83,   84,  325,    0,    0,    0,   85,
   86,  325,  210,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,   93,    0,    0,    0,   94,    0,    0,    0,
   95,    0,    0,    0,    0,   96,   97,   98,   99,  100,
    0,    0,    0,  101,  325,    0,    0,    0,    0,    0,
    0,  102,  103,  211,  212,  213,  214,    0,  215,  216,
  217,  218,  219,  220,  221,  222,    0,    0,  223,  224,
  225,  226,  227,  228,  229,  230,  104,  105,  106,  107,
    0,  488,  108,    0,    0,    0,    0,  488,  204,  325,
    0,    0,    0,    0,  325,    0,  325,  325,  325,  325,
  325,  325,  325,  325,  325,  325,  325,  325,    0,    0,
    0,    0,    0,  325,    0,    0,    0,    0,  325,  325,
  325,  325,  325,  325,  325,  325,  325,    0,  325,  325,
  488,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  325,    0,  325,  325,  325,  325,  325,  325,  325,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  325,  325,    0,  325,    0,    0,    0,    0,  325,    0,
  325,    0,    0,  325,    0,  488,    0,    0,    0,  325,
  488,    0,  488,  488,  488,  488,  488,  488,  488,  488,
  488,  488,  488,    0,    0,    0,    0,    0,    0,  423,
    0,    0,    0,    0,  488,  423,  488,  488,  488,  488,
  488,  488,  488,    0,  488,  488,    0,  488,  488,  488,
  488,  488,  488,  488,  488,  488,  488,    0,  488,  488,
  488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
  488,  488,  488,  488,  488,  488,  488,  488,  423,  488,
    0,    0,    0,    0,    0,    0,  488,    0,    0,  488,
    0,    0,    0,    0,    0,  488,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  382,    0,    0,    0,    0,
    0,  382,    0,  423,    0,    0,    0,    0,  423,    0,
  423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
  423,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  423,    0,  423,  423,  423,  423,  423,  423,
  423,    0,  423,  423,  382,  423,  423,  423,  423,  423,
  423,  423,  423,  423,  423,    0,  423,  423,  423,  423,
  423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
  423,  423,  423,  423,  423,  423,    0,  423,    0,    0,
    0,    0,    0,    0,  423,    0,    0,  423,    0,  382,
    0,    0,    0,  423,  382,    0,  382,  382,  382,  382,
  382,  382,  382,  382,  382,  382,  382,    0,    0,    0,
    0,    0,    0,  524,    0,    0,    0,    0,  382,  524,
  382,  382,  382,  382,  382,  382,  382,    0,  382,    0,
    0,  382,  382,  382,  382,  382,  382,  382,  382,  382,
  382,    0,  382,  382,  382,  382,  382,  382,  382,  382,
  382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
  382,  382,  524,  382,    0,    0,    0,    0,    0,    0,
  382,    0,    0,  382,    0,    0,    0,  325,    0,  382,
    0,    0,    0,  325,    0,    0,    0,  722,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  524,    0,    0,
    0,    0,  524,    0,  524,  524,  524,  524,  524,  524,
  524,  524,  524,  524,  524,    0,  325,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  524,    0,  524,    0,
  524,    0,  524,  524,  524,  722,  524,  524,    0,  524,
  524,  524,  524,  524,  524,  524,  524,  524,  524,    0,
    0,    0,  524,  524,  524,  524,  524,  524,  524,  524,
  524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
    0,  524,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  539,    0,  524,    0,    0,
  325,  539,  325,  325,  325,  325,  325,  722,  325,    0,
  325,  325,    0,  325,  325,  325,  325,  325,  325,  325,
  325,  325,  325,    0,  325,  325,  325,  325,  325,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  325,  325,  325,  325,  539,  325,    0,    0,    0,    0,
    0,    0,  325,    0,    0,  325,    0,    0,    0,    0,
    0,  325,    0,  542,    0,    0,    0,    0,    0,  542,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  539,
    0,    0,    0,    0,  539,    0,  539,  539,  539,  539,
  539,  539,  539,  539,  539,  539,  539,    0,    0,    0,
    0,    0,  542,    0,    0,    0,    0,    0,  539,    0,
  539,    0,  539,    0,  539,  539,  539,    0,  539,  539,
    0,  540,  539,  539,  539,  539,    0,  540,    0,  539,
  539,    0,    0,    0,  539,  539,  539,  539,  539,  539,
  539,  539,    0,    0,    0,    0,    0,  542,    0,    0,
    0,    0,  542,  539,  542,  542,  542,  542,  542,  542,
  542,  542,  542,  542,  542,    0,    0,    0,    0,  539,
  540,    0,    0,    0,    0,    0,  542,    0,  542,    0,
  542,    0,  542,  542,  542,    0,  542,  542,    0,  541,
  542,  542,  542,  542,    0,  541,    0,  542,  542,    0,
    0,    0,  542,  542,  542,  542,  542,  542,  542,  542,
    0,    0,    0,    0,    0,  540,    0,    0,    0,    0,
  540,  542,  540,  540,  540,  540,  540,  540,  540,  540,
  540,  540,  540,    0,    0,    0,    0,  542,  541,    0,
    0,    0,    0,    0,  540,    0,  540,    0,  540,    0,
  540,  540,  540,    0,  540,  540,    0,  545,  540,  540,
  540,  540,    0,    0,    0,  540,  540,    0,    0,    0,
  540,  540,  540,  540,  540,  540,  540,  540,    0,    0,
    0,    0,    0,  541,    0,    0,    0,    0,  541,  540,
  541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
  541,    0,    0,    0,    0,  540,    0,    0,    0,    0,
    0,    0,  541,    0,  541,    0,  541,    0,  541,  541,
  541,    0,  541,  541,    0,  546,  541,  541,  541,  541,
    0,    0,    0,  541,  541,    0,    0,    0,  541,  541,
  541,  541,  541,  541,  541,  541,    0,    0,    0,    0,
    0,  545,    0,    0,    0,    0,  545,  541,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,    0,
    0,    0,    0,  541,    0,    0,    0,    0,    0,    0,
  545,    0,  545,    0,  545,    0,  545,  545,  545,    0,
    0,    0,    0,  547,  545,  545,  545,  545,    0,    0,
    0,  545,  545,    0,    0,    0,  545,  545,  545,  545,
  545,  545,  545,  545,    0,    0,    0,    0,    0,  546,
    0,    0,    0,    0,  546,  545,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,    0,    0,    0,
    0,  545,    0,    0,    0,    0,    0,    0,  546,    0,
  546,    0,  546,    0,  546,  546,  546,    0,    0,    0,
    0,  548,  546,  546,  546,  546,    0,    0,    0,  546,
  546,    0,    0,    0,  546,  546,  546,  546,  546,  546,
  546,  546,    0,    0,    0,    0,    0,  547,    0,    0,
    0,    0,  547,  546,  547,  547,  547,  547,  547,  547,
  547,  547,  547,  547,  547,    0,    0,    0,    0,  546,
    0,    0,    0,    0,    0,    0,  547,    0,  547,    0,
  547,    0,  547,  547,  547,    0,    0,    0,    0,  549,
  547,  547,  547,  547,    0,    0,    0,  547,  547,    0,
    0,    0,  547,  547,  547,  547,  547,  547,  547,  547,
    0,    0,    0,    0,    0,  548,    0,    0,    0,    0,
  548,  547,  548,  548,  548,  548,  548,  548,  548,  548,
  548,  548,  548,    0,    0,    0,    0,  547,    0,    0,
    0,    0,    0,    0,  548,    0,  548,    0,  548,    0,
  548,  548,  548,    0,    0,    0,    0,  550,  548,  548,
  548,  548,    0,    0,    0,  548,  548,    0,    0,    0,
    0,    0,  548,  548,  548,  548,  548,  548,    0,    0,
    0,    0,    0,  549,    0,    0,    0,    0,  549,  548,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,    0,    0,    0,    0,  548,    0,    0,    0,    0,
    0,    0,  549,    0,  549,    0,  549,    0,  549,  549,
  549,    0,    0,    0,    0,  551,  549,  549,  549,  549,
    0,    0,    0,  549,  549,    0,    0,    0,    0,    0,
  549,  549,  549,  549,  549,  549,    0,    0,    0,    0,
    0,  550,    0,    0,    0,    0,  550,  549,  550,  550,
  550,  550,  550,  550,  550,  550,  550,  550,  550,    0,
    0,    0,    0,  549,    0,    0,    0,    0,    0,    0,
  550,    0,  550,    0,  550,    0,  550,  550,  550,    0,
    0,    0,    0,  552,  550,  550,  550,  550,    0,    0,
    0,  550,  550,    0,    0,    0,    0,    0,  550,  550,
  550,  550,  550,  550,    0,    0,    0,    0,    0,  551,
    0,    0,    0,    0,  551,  550,  551,  551,  551,  551,
  551,  551,  551,  551,  551,  551,  551,    0,    0,    0,
    0,  550,    0,    0,    0,    0,    0,    0,  551,    0,
  551,    0,  551,    0,  551,  551,  551,    0,    0,    0,
    0,  325,  551,  551,  551,  551,    0,  325,    0,  551,
  551,    0,    0,    0,    0,    0,  551,  551,  551,  551,
  551,  551,    0,    0,    0,    0,    0,  552,    0,    0,
    0,    0,  552,  551,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,    0,    0,    0,    0,  551,
  325,    0,    0,    0,    0,    0,  552,    0,  552,    0,
  552,    0,  552,  552,  552,    0,    0,    0,    0,    0,
  552,  552,  552,  552,    0,    0,    0,  552,  552,    0,
    0,    0,    0,    0,  552,  552,  552,  552,  552,  552,
  554,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  552,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  552,    0,    0,
    0,    0,    0,    0,  325,    0,    0,  325,    0,  325,
  325,    0,    0,    0,  325,  325,    0,    0,  325,  325,
  325,  325,  325,  325,  325,  325,  325,    0,  325,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  555,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  325,
    0,    0,    0,    0,    0,    0,  325,    0,    0,  325,
    0,    0,    0,    0,  554,  325,    0,    0,    0,  554,
    0,  554,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  554,    0,  554,    0,  554,    0,  554,
  554,  554,    0,    0,    0,    0,  556,    0,    0,  554,
  554,    0,    0,    0,  554,  554,    0,    0,    0,    0,
    0,    0,    0,  554,  554,  554,  554,    0,    0,    0,
    0,    0,  555,    0,    0,    0,    0,  555,  554,  555,
  555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
    0,    0,    0,    0,  554,    0,    0,    0,    0,    0,
    0,  555,    0,  555,    0,  555,    0,  555,  555,  555,
    0,    0,    0,    0,  557,    0,    0,  555,  555,    0,
    0,    0,  555,  555,    0,    0,    0,    0,    0,    0,
    0,  555,  555,  555,  555,    0,    0,    0,    0,    0,
  556,    0,    0,    0,    0,  556,  555,  556,  556,  556,
  556,  556,  556,  556,  556,  556,  556,  556,    0,    0,
    0,    0,  555,    0,    0,    0,    0,    0,    0,  556,
    0,  556,    0,  556,    0,  556,  556,  556,    0,    0,
    0,    0,  558,    0,    0,  556,  556,    0,    0,    0,
  556,  556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  556,  556,    0,    0,    0,    0,    0,  557,    0,
    0,    0,    0,  557,  556,  557,  557,  557,  557,  557,
  557,  557,  557,  557,  557,  557,    0,    0,    0,    0,
  556,    0,    0,    0,    0,    0,    0,  557,    0,  557,
    0,  557,    0,  557,  557,  557,    0,    0,    0,    0,
  559,    0,    0,  557,  557,    0,    0,    0,  557,  557,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  557,
  557,    0,    0,    0,    0,    0,  558,    0,    0,    0,
    0,  558,  557,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,    0,    0,    0,    0,  557,    0,
    0,    0,    0,    0,    0,  558,    0,  558,    0,  558,
    0,  558,  558,  558,    0,    0,    0,    0,  560,    0,
    0,    0,  558,    0,    0,    0,  558,  558,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  558,  558,    0,
    0,    0,    0,    0,  559,    0,    0,    0,    0,  559,
  558,  559,  559,  559,  559,  559,  559,  559,  559,  559,
  559,  559,    0,    0,    0,    0,  558,    0,    0,    0,
    0,    0,    0,  559,    0,  559,    0,  559,    0,  559,
  559,  559,    0,    0,    0,    0,  561,    0,    0,    0,
  559,    0,    0,    0,  559,  559,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  559,  559,    0,    0,    0,
    0,    0,  560,    0,    0,    0,    0,  560,  559,  560,
  560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
    0,    0,    0,    0,  559,    0,    0,    0,    0,    0,
    0,  560,    0,  560,    0,  560,    0,  560,  560,  560,
    0,    0,    0,    0,  562,    0,    0,    0,  560,    0,
    0,    0,    0,  560,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  560,  560,    0,    0,    0,    0,    0,
  561,    0,    0,    0,    0,  561,  560,  561,  561,  561,
  561,  561,  561,  561,  561,  561,  561,  561,    0,    0,
    0,    0,  560,    0,    0,    0,    0,    0,    0,  561,
    0,  561,    0,  561,    0,  561,  561,  561,    0,    0,
    0,    0,  563,    0,    0,    0,  561,    0,    0,    0,
    0,  561,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  561,  561,    0,    0,    0,    0,    0,  562,    0,
    0,    0,    0,  562,  561,  562,  562,  562,  562,  562,
  562,  562,  562,  562,  562,  562,    0,    0,    0,    0,
  561,    0,    0,    0,    0,    0,    0,  562,    0,  562,
    0,  562,    0,  562,  562,  562,    0,    0,    0,    0,
  565,    0,    0,    0,    0,    0,    0,    0,    0,  562,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  562,
  562,    0,    0,    0,    0,    0,  563,    0,    0,    0,
    0,  563,  562,  563,  563,  563,  563,  563,  563,  563,
  563,  563,  563,  563,    0,    0,    0,    0,  562,    0,
    0,    0,    0,    0,    0,  563,  918,  563,    0,  563,
    0,  563,  563,  563,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  563,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  563,  563,    0,
    0,    0,    0,    0,  565,    0,    0,    0,    0,  565,
  563,  565,  565,  565,  565,  565,  565,  565,  565,  565,
  565,  565,    0,    0,    0,    0,  563,    0,    0,    0,
    0,    0,    0,  565,    0,  565,    0,  565,    0,  565,
  565,  565,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  565,    0,    0,    0,    0,
  918,    0,    0,    0,    0,  918,  565,  918,  918,  918,
  918,  918,  918,  918,  918,  918,  918,    0,  565,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  918,
   55,  918,    0,  918,  565,  918,  918,  918,   56,   24,
   57,   25,    0,    0,   26,   58,    0,   59,   60,   27,
   61,    0,   62,   28,    0,    0,    0,    0,    0,    0,
   63,    0,   64,   30,   65,   66,   67,    0,    0,   68,
   69,    0,    0,    0,    0,    0,   32,    0,    0,    0,
   70,   33,    0,    0,   71,   72,   34,    0,    0,    0,
  918,    0,    0,    0,    0,    0,    0,    0,   73,    0,
   36,    0,   37,   74,    0,    0,   38,    0,   75,   76,
   77,   78,   79,   80,   39,   40,   81,   82,   41,   83,
   84,    0,    0,    0,    0,   85,   86,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,   93,    0,
    0,    0,   94,    0,    0,    0,   95,    0,    0,    0,
    0,   96,   97,   98,   99,  100,    0,    0,    0,  101,
    0,    0,    0,    0,    0,    0,    0,  102,  103,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  259,  104,  105,  106,  107,    0,    0,  108,   56,
   24,   57,   25,    0,    0,   26,   58,    0,   59,   60,
   27,   61,    0,   62,   28,    0,    0,    0,    0,    0,
    0,   63,    0,   64,   30,   65,   66,   67,    0,    0,
   68,   69,    0,    0,    0,    0,    0,   32,    0,    0,
    0,   70,   33,    0,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
    0,   36,    0,   37,   74,    0,    0,   38,    0,   75,
   76,   77,   78,   79,   80,   39,   40,   81,   82,   41,
   83,   84,    0,    0,    0,    0,   85,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,   93,
    0,    0,    0,   94,    0,    0,    0,   95,    0,    0,
    0,    0,   96,   97,   98,   99,  100,    0,    0,    0,
  101,    0,    0,    0,    0,    0,    0,    0,  102,  103,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  541,  104,  105,  106,  107,    0,    0,  108,
   56,   24,   57,   25,    0,    0,   26,   58,    0,   59,
   60,   27,   61,    0,   62,   28,    0,    0,    0,    0,
    0,    0,   63,    0,   64,   30,   65,   66,   67,    0,
    0,   68,   69,    0,    0,    0,    0,    0,   32,    0,
    0,    0,   70,   33,    0,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,   36,    0,   37,   74,    0,    0,   38,    0,
   75,   76,   77,   78,   79,   80,   39,   40,   81,   82,
   41,   83,   84,    0,    0,    0,    0,   85,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
   93,    0,    0,    0,   94,    0,    0,    0,   95,    0,
    0,    0,    0,   96,   97,   98,   99,  100,    0,    0,
    0,  101,    0,    0,    0,    0,    0,    0,    0,  102,
  103,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  923,  104,  105,  106,  107,    0,    0,
  108,  923,  923,  923,  923,    0,    0,  923,  923,    0,
  923,  923,  923,  923,    0,  923,  923,    0,    0,    0,
    0,    0,    0,  923,    0,  923,  923,  923,  923,  923,
    0,    0,  923,  923,    0,    0,    0,    0,    0,  923,
    0,    0,    0,  923,  923,    0,    0,  923,  923,  923,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  923,    0,  923,    0,  923,  923,    0,    0,  923,
    0,  923,  923,  923,  923,  923,  923,  923,  923,  923,
  923,  923,  923,  923,    0,    0,    0,    0,  923,  923,
    0,    0,  923,  923,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  923,  923,  923,
  923,  923,    0,    0,    0,  923,    0,    0,    0,  923,
    0,    0,    0,    0,  923,  923,  923,  923,  923,    0,
    0,    0,  923,    0,    0,    0,    0,    0,    0,    0,
  923,  923,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  770,  923,  923,  923,  923,    0,
    0,  923,  770,  770,  770,  770,    0,    0,  770,  770,
    0,  770,  770,  770,  770,    0,  770,  770,    0,    0,
    0,    0,    0,    0,  770,    0,  770,  770,  770,  770,
  770,    0,    0,  770,  770,    0,    0,    0,    0,    0,
  770,    0,    0,    0,  770,  770,    0,    0,  770,  770,
  770,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  770,    0,  770,    0,  770,  770,    0,    0,
  770,    0,  770,  770,  770,  770,  770,  770,  770,  770,
  770,  770,  770,  770,  770,    0,    0,    0,    0,  770,
  770,    0,    0,  770,  770,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  770,  770,
  770,  770,  770,    0,    0,    0,  770,    0,    0,    0,
  770,    0,    0,    0,    0,  770,  770,  770,  770,  770,
    0,    0,    0,  770,    0,    0,    0,    0,    0,    0,
  835,  770,  770,    0,    0,    0,    0,    0,   56,   24,
    0,   25,    0,    0,   26,  294,    0,    0,    0,   27,
   61,    0,    0,   28,    0,    0,  770,  770,  770,  770,
   63,    0,  770,   30,    0,    0,   67,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,    0,   71,   72,   34,    0,  458,    0,
    0,    0,    0,    0,    0,    0,    0,  459,    0,    0,
   36,    0,   37,   74,    0,    0,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  295,    0,   41,    0,
    0,    0,    0,    0,    0,    0,  460,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,   93,    0,
    0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,    0,    0,    0,    0,    0,  348,  102,  103,    0,
    0,    0,    0,    0,   56,   24,    0,   25,    0,    0,
   26,  294,    0,    0,    0,   27,   61,    0,    0,   28,
    0,    0,  104,  105,  106,  107,   63,    0,  108,   30,
    0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  295,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  296,    0,    0,    0,    0,    0,
    0,  349,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,    0,    0,    0,
    0,    0,  689,  102,  103,    0,    0,    0,    0,    0,
   56,   24,    0,   25,    0,    0,   26,  294,    0,    0,
    0,   27,   61,    0,    0,   28,    0,    0,  104,  297,
  106,  107,   63,    0,  108,   30,    0,    0,   67,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  295,    0,
   41,    0,    0,    0,  477,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
  296,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,    0,    0,    0,    0,    0,  293,  102,
  103,    0,    0,    0,    0,    0,   56,   24,    0,   25,
    0,    0,   26,  294,    0,    0,    0,   27,   61,    0,
    0,   28,    0,    0,  104,  297,  106,  107,   63,    0,
  108,   30,    0,    0,   67,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,    0,   71,   72,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   74,    0,    0,   38,    0,    0,   76,    0,   78,
    0,   80,   39,   40,  295,    0,   41,    0,    0,    0,
    0,    0,    0,    0,   86,    0,    0,   87,   88,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   89,   90,   91,   92,  296,    0,    0,    0,
    0,    0,    0,    0,   95,    0,    0,    0,    0,    0,
   97,   98,   99,  100,    0,    0,    0,  101,    0,    0,
    0,    0,    0,    0,  576,  102,  103,    0,    0,    0,
    0,    0,   56,   24,    0,   25,    0,    0,   26,  294,
    0,    0,    0,   27,   61,    0,    0,   28,    0,    0,
  104,  297,  106,  107,   63,    0,  108,   30,    0,    0,
   67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  295,    0,   41,    0,    0,    0,    0,    0,    0,    0,
   86,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,   93,    0,    0,    0,    0,    0,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,    0,    0,    0,    0,    0,
  348,  102,  103,    0,    0,    0,    0,    0,   56,   24,
    0,   25,    0,    0,   26,  294,    0,    0,    0,   27,
   61,    0,    0,   28,    0,    0,  104,  105,  106,  107,
   63,    0,  108,   30,    0,    0,   67,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,    0,   71,   72,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   74,    0,    0,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  295,    0,   41,    0,
    0,    0,    0,    0,    0,    0,   86,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,  296,    0,
    0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,    0,    0,    0,    0,    0,  790,  102,  103,    0,
    0,    0,    0,    0,   56,   24,    0,   25,    0,    0,
   26,  294,    0,    0,    0,   27,   61,    0,    0,   28,
    0,    0,  104,  297,  106,  107,   63,    0,  108,   30,
    0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  295,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  296,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,    0,    0,    0,
    0,    0,  591,  102,  103,    0,    0,    0,    0,    0,
  591,  591,    0,  591,    0,    0,  591,  591,    0,    0,
    0,  591,  591,    0,    0,  591,    0,    0,  104,  297,
  106,  107,  591,    0,  108,  591,    0,    0,  591,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  591,    0,
    0,    0,    0,  591,    0,  318,  591,  591,  591,    0,
    0,  379,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  591,    0,  591,  591,    0,    0,  591,    0,
    0,  591,    0,  591,    0,  591,  591,  591,  591,    0,
  591,    0,    0,    0,    0,    0,    0,    0,  591,    0,
    0,  591,  591,    0,  379,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  591,  591,  591,  591,
  591,    0,    0,    0,    0,    0,    0,    0,  591,    0,
    0,    0,    0,    0,  591,  591,  591,  591,    0,    0,
    0,  591,    0,    0,    0,    0,    0,    0,    0,  591,
  591,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  318,  591,  591,  591,  591,    0,  318,
  591,  379,  379,  379,  318,    0,  318,    0,  379,  379,
    0,  318,  379,  379,  379,  379,  379,  379,  379,  379,
  379,   49,  379,  379,  379,  379,  379,  379,  379,  379,
  379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
  379,  379,    0,  379,    0,    0,    0,    0,  318,    0,
  379,   56,   24,  379,   25,    0,    0,   26,  294,    0,
    0,    0,   27,   61,   49,    0,   28,    0,    0,   49,
   49,    0,    0,   63,    0,   49,   30,    0,   49,   67,
   49,   49,   49,    0,    0,    0,    0,   49,    0,   32,
    0,   49,    0,    0,   33,    0,    0,   71,   72,   34,
    0,    0,    0,   49,    0,    0,    0,   49,    0,   49,
    0,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  295,
    0,   41,    0,   49,    0,   49,   49,    0,    0,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,  296,    0,    0,    0,  717,  948,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,    0,    0,   56,   24,    0,   25,
  102,  103,   26,  294,    0,    0,    0,   27,   61,    0,
    0,   28,    0,    0,    0,    0,    0,    0,   63,    0,
    0,   30,    0,    0,   67,  104,  718,  106,  107,    0,
    0,  108,    0,    0,   32,    0,  719,    0,    0,   33,
    0,    0,   71,   72,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   74,    0,    0,   38,    0,    0,   76,    0,   78,
    0,   80,   39,   40,  295,    0,   41,    0,    0,    0,
    0,    0,    0,    0,   86,    0,    0,   87,   88,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   89,   90,   91,   92,  296,    0,    0,    0,
  717,    0,    0,    0,   95,    0,    0,    0,    0,    0,
   97,   98,   99,  100,    0,    0,    0,  101,    0,    0,
    0,    0,    0,    0,  495,  102,  103,    0,    0,    0,
    0,    0,   56,   24,    0,   25,    0,    0,   26,  294,
    0,    0,    0,   27,   61,    0,    0,   28,    0,    0,
  104,  718,  106,  107,   63,    0,  108,   30,    0,    0,
   67,  719,    0,    0,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,  188,   76,    0,   78,    0,   80,   39,   40,
  295,   24,   41,   25,    0,    0,   26,    0,    0,    0,
    0,   27,    0,    0,    0,   28,    0,    0,    0,    0,
    0,    0,    0,  737,    0,   30,    0,    0,   89,   90,
   91,  327,   24,    0,   25,    0,    0,   26,   32,    0,
   95,    0,   27,   33,    0,    0,   28,    0,   34,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
    0,    0,   36,    0,   37,    0,    0,    0,   38,   32,
    0,    0,    0,    0,   33,    0,   39,   40,    0,   34,
   41,    0,    0, 1381,  189,    0,  104,  496,    0,    0,
    0,    0,   24,   36,   25,   37,    0,   26,    0,   38,
    0,    0,   27,    0,    0,    0,   28,   39,   40,    0,
  190,   41,    0,    0,    0,  189,   30,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,  191,   33,    0,    0,    0,    0,   34,
    0,  190,    0,  551,    0,    0,    0,    0,    0,    0,
    0,    0,   24,   36,   25,   37,    0,   26,    0,   38,
    0,    0,   27,    0,  191,  192,   28,   39,   40,    0,
    0,   41,    0,    0,    0,  312,   30,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,  313, 1046,    0,   34,
    0,    0,    0,    0,    0,    0,   24,  239,   25,    0,
    0,   26,    0,   36,    0,   37,   27,    0,    0,   38,
   28,    0,    0,    0,  191,    0,    0,   39,   40,    0,
   30,   41,    0,    0,    0,  312,    0,    0,    0,    0,
    0, 1167,    0,   32,    0,    0,    0,    0,   33,    0,
   24,    0,   25,   34,    0,   26,  346,    0,    0,    0,
   27,    0,    0,    0,   28,    0,    0,   36,    0,   37,
    0,    0,    0,   38,   30,    0,    0,    0,    0,    0,
    0,   39,   40,    0,  191,   41,    0,   32,  325,  557,
    0,    0,   33, 1110,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,    0,    0,  346,   38,    0,    0,
    0,    0,    0,    0,    0,   39,   40,    0,    0,   41,
    0,  325,    0,  312,    0,    0, 1111,    0,  191,    0,
    0, 1112, 1113,    0,    0,    0,    0, 1114,    0,    0,
 1115,    0, 1116, 1117, 1118,    0,    0,    0,    0, 1119,
    0,    0,    0, 1120,    0,    0,    0,    0,    0,    0,
  346,    0,    0,    0,    0, 1121,    0,    0,    0, 1122,
    0, 1123,  191,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1124,    0,    0,  325,  325,
  325,  325,  722,    0,  346,  325,  325,    0,    0,  325,
  325,  325,  325,  325,  325,  325,  325,  325,    0,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  325,    0,
  325,    0,   56,   24,    0,   25,    0,  325,   26,  294,
  325, 1304,    0,   27,   61,    0,    0,   28,    0,    0,
    0,    0,    0,    0,   63,    0,    0,   30,    0,    0,
   67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,    0,   71,   72,
   34,    0,  458,    0,    0,    0,    0,    0,    0,    0,
    0,  459,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  295,    0,   41,    0,    0,    0,    0,    0,    0,    0,
  460,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,   93,    0,    0,    0,    0,    0,    0,    0,
   95,  833,    0,  461,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,    0,    0,   56,   24,    0,
   25,  102,  103,   26,  294,    0,    0,    0,   27,   61,
    0,    0,   28,    0,    0,    0,    0,    0,    0,   63,
    0,    0,   30,    0,    0,   67,  104,  105,  106,  107,
    0,    0,  108,    0,    0,   32,    0,    0,    0,    0,
   33,    0,    0,   71,   72,   34,    0,  458,    0,    0,
    0,    0,    0,    0,    0,    0,  459,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  295,    0,   41,    0,    0,
    0,    0,    0,    0,    0,  460,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,   93,    0,    0,
    0,    0,    0,    0,    0,   95,    0,    0,  461,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
    0,    0,   56,   24,    0,   25,  102,  103,   26,  294,
    0,    0,    0,   27,   61,    0,    0,   28,    0,    0,
    0,    0,    0,    0,   63,    0,    0,   30,    0,    0,
   67,  104,  105,  106,  107,    0,    0,  108,    0,    0,
   32,    0,    0,    0,    0,   33,    0,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  295,    0,   41,    0,    0,    0,  477,    0,    0,    0,
   86,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,  296,    0,    0,    0,    0,    0,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,    0,    0,   56,   24,    0,
   25,  102,  103,   26,  294,    0,    0,    0,   27,   61,
    0,    0,   28,    0,    0,    0,    0,    0,    0,   63,
    0,    0,   30,    0,    0,   67,  104,  297,  106,  107,
    0,    0,  108,    0,    0,   32,    0,    0,    0,    0,
   33,    0,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  295,    0,   41,    0,    0,
    0,    0,    0,    0,    0,   86,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,  296,    0,    0,
    0,    0,  857,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
    0,    0,   56,   24,    0,   25,  102,  103,   26,  294,
    0,    0,    0,   27,   61,    0,    0,   28,    0,    0,
    0,    0,    0,    0,   63,    0,    0,   30,    0,    0,
   67,  104,  297,  106,  107,    0,    0,  108,    0,    0,
   32,    0,    0,    0,    0,   33,    0,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  295,    0,   41,    0,    0,    0,    0,    0,    0,    0,
   86,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,  296,    0,    0,    0,  503,    0,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,    0,    0,   56,   24,    0,
   25,  102,  103,   26,  294,    0,    0,    0,   27,   61,
    0,    0,   28,    0,    0,    0,    0,    0,    0,   63,
    0,    0,   30,    0,    0,   67,  104,  297,  106,  107,
    0,    0,  108,    0,    0,   32,    0,    0,    0,    0,
   33,    0,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  295,    0,   41,    0,    0,
    0,    0,    0,    0,    0,   86,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,  296,    0,    0,
    0,    0,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
    0,    0,   56,   24,    0,   25,  102,  103,   26,  294,
    0,    0,    0,   27,   61,    0,    0,   28,    0,    0,
    0,    0,    0,    0,   63,    0,    0,   30,    0,    0,
   67,  104,  297,  106,  107,    0,    0,  108,    0,    0,
   32,    0,    0,    0,    0,   33,    0,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  295,    0,   41,    0,    0,    0,    0,    0,    0,    0,
   86,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,   93,    0,    0,    0,    0,    0,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,    0,    0,   56,   24,    0,
   25,  102,  103,   26,  294,    0,    0,    0,   27,   61,
    0,    0,   28,    0,    0,    0,    0,    0,    0,   63,
    0,    0,   30,    0,    0,   67,  104,  105,  106,  107,
    0,    0,  108,    0,    0,   32,    0,    0,    0,    0,
   33,    0,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  295,    0,   41,    0,    0,
    0,    0,    0,    0,    0,   86,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,   93,    0,    0,
    0,    0,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
    0,    0,   79,   79,    0,   79,  102,  103,   79,   79,
    0,    0,    0,   79,   79,    0,    0,   79,    0,    0,
    0,    0,    0,    0,   79,    0,    0,   79,    0,    0,
   79,  104,  979,  106,  107,    0,    0,  108,    0,    0,
   79,    0,    0,    0,    0,   79,    0,    0,   79,   79,
   79,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   79,    0,   79,   79,    0,    0,
   79,    0,    0,   79,    0,   79,    0,   79,   79,   79,
   79,    0,   79,    0,    0,    0,    0,    0,    0,    0,
   79,    0,    0,   79,   79,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   79,   79,
   79,   79,   79,    0,    0,    0,    0,    0,    0,    0,
   79,    0,    0,    0,    0,    0,   79,   79,   79,   79,
    0,    0,    0,   79,    0,    0,    0,  135,  135,    0,
  135,   79,   79,  135,  135,    0,    0,    0,  135,  135,
    0,    0,  135,    0,    0,    0,    0,    0,    0,  135,
    0,    0,  135,    0,    0,  135,   79,   79,   79,   79,
    0,    0,   79,    0,    0,  135,    0,    0,    0,    0,
  135,    0,    0,  135,  135,  135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  135,
    0,  135,  135,    0,    0,  135,    0,    0,  135,    0,
  135,    0,  135,  135,  135,  135,    0,  135,    0,    0,
    0,    0,    0,    0,    0,  135,   30,    0,  135,  135,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  135,  135,  135,  135,  135,    0,    0,
    0,    0,    0,    0,    0,  135,    0,    0,    0,    0,
    0,  135,  135,  135,  135,    0,    0,    0,  135,   30,
    0,    0,    0,    0,   30,   30,  135,  135,    0,    0,
   30,    0,    0,   30,    0,   30,   30,   30,    0,    0,
   30,    0,   30,    0,   50,    0,   30,    0,    0,    0,
    0,  135,  135,  135,  135,   50,   50,  135,   30,    0,
   50,    0,   30,    0,   30,   50,   50,   50,    0,    0,
    0,   50,    0,    0,    0,   50,   50,   50,    0,    0,
   50,    0,    0,    0,   50,    0,   50,   50,   30,    0,
    0,    0,   50,   50,   30,   30,   50,    0,   50,    0,
    0,   50,   50,   50,   50,   50,    0,    0,    0,    0,
   50,    0,   56,   24,   50,   25,   50,    0,   26,  294,
    0,    0,    0,   27,   61,    0,   50,   28,    0,   50,
   50,    0,   50,    0,   63,    0,   50,   30,    0,    0,
   67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,   50,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  295,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   50,    0,    0,    0,    0,    0,   89,   90,
   91,  327,  296,    0,    0,    0,    0,    0,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,    0,    0,   56,   24,    0,
   25,  102,  103,   26,  294,    0,    0,    0,   27,   61,
    0,    0,   28,    0,    0,    0,    0,    0,    0,   63,
    0,    0,   30,    0,    0,   67,  104,  328,    0,  107,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  295,    0,   41,    0,    0,
    0,  477,    0,    0,   24,    0,   25,    0,    0,   26,
    0,    0,    0,    0,   27,    0,    0,    0,   28,    0,
    0,    0,    0,   89,   90,   91,  327,    0,   30,    0,
    0,    0,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,    0,    0,
    0,   34,    0,  554,   24,    0,   25,    0,    0,   26,
    0, 1234,  555,    0,   27,   36,    0,   37,   28,    0,
    0,   38,    0,    0,  556,    0,    0,    0,   30,   39,
   40,  104,  328,   41,    0,    0,    0,  557,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,    0, 1235,
    0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,    0,    0,
    0,   38, 1236,    0,    0,    0,    0,    0,    0,   39,
   40,    0,    0,   41,    0,    0,  191,  312,    0,    0,
   24,    0,   25,    0,    0,   26,    0,   24,    0,   25,
   27,    0,   26,    0,   28,    0,    0,   27,    0,   29,
    0,   28,    0,    0,   30,    0,    0,    0,  558,    0,
    0,   30,   31,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   32,    0,  191,   34,   35,   33,
    0,    0,    0,    0,   34,    0,    0,    0,    0,    0,
    0,   36,    0,   37,    0,    0,    0,   38,   36,    0,
   37,    0,    0,    0,   38,   39,   40,    0,  346,   41,
    0,    0,   39,   40,    0,    0,   41,   24,    0,   25,
  312,    0,   26,    0,    0,    0,    0,   27,  178,    0,
  178,   28,    0,  178,    0,    0,    0,    0,  178,    0,
    0,   30,  178,    0,    0,    0,  190,    0,    0,    0,
    0,    0,  178,    0,   32,    0,    0,    0,    0,   33,
    0,    0,    0,    0,   34,  178,    0,    0,    0,  191,
  178,    0,    0,    0,    0,  178,    0,    0,   36,    0,
   37,    0,    0,    0,   38,    0,    0,    0,    0,  178,
    0,  178,   39,   40,   42,  178,   41,    0,  484,    0,
  312,  313,    0,  178,  178,    0,    0,  178,  178,    0,
  178,  178,    0,  178,    0,    0,    0,    0,  178,   24,
    0,   25,  178,    0,   26,    0,    0,    0,    0,   27,
    0,    0,  178,   28,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   30,    0,  178,  947,    0,    0,  191,
  178,    0,    0,    0,    0,  178,   32,    0,    0,    0,
  178,   33,    0,    0,    0,    0,   34,    0,    0,  178,
    0,  178,    0,    0,    0,  178,    0,    0,    0,    0,
   36,  346,   37,  178,  178,    0,   38,  178,    0,    0,
    0,  178,  178,    0,   39,   40,    0,    0,   41,   24,
    0,   25,  312,    0,   26,    0,    0,    0,    0,   27,
    0,    0,    0,   28,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   30,  947,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
  178,   33,    0,   24,    0,   25,   34,    0,   26,    0,
    0,  191,    0,   27,    0,    0,    0,   28,    0,    0,
   36,    0,   37,    0,    0,    0,   38,   30,    0,    0,
    0,    0,  178,    0,   39,   40,    0,    0,   41,    0,
   32,    0,  508,  346,    0,   33,    0,    0,    0,    0,
   34,   24,    0,   25,    0,    0,   26,    0,    0,    0,
    0,   27,    0,    0,   36,   28,   37,    0,    0,    0,
   38,    0,    0,    0,    0,   30,    0,    0,   39,   40,
    0,    0,   41,    0,    0,    0,  557,    0,   32,    0,
    0,  191,    0,   33,    0,   24,    0,   25,   34,    0,
   26,    0,    0,    0,    0,   27,    0,    0,    0,   28,
    0,    0,   36,    0,   37,    0,    0,    0,   38,   30,
    0,    0,    0,  346,    0,    0,   39,   40,    0,    0,
   41,    0,   32,    0,  189,  191,    0,   33,    0,    0,
    0,    0,   34,    0,    0,  475,    0,  475,    0,    0,
  475,    0,    0,    0,    0,  475,   36,    0,   37,  475,
    0,    0,   38,    0,    0,    0,    0,  346,    0,  475,
   39,   40,    0,    0,   41,    0,    0,    0, 1484,    0,
    0,    0,  475,  191,    0,    0,    0,  475,    0,  179,
    0,  179,  475,    0,  179,    0,    0,    0,    0,  179,
    0,    0,    0,  179,    0,    0,  475,    0,  475,    0,
    0,    0,  475,  179,    0,  346,    0,    0,    0,    0,
  475,  475,    0,    0,  475,    0,  179,  191,  475,    0,
    0,  179,    0,    0,    0,    0,  179,  178,    0,  178,
    0,    0,  178,    0,    0,    0,    0,  178,    0,    0,
  179,  178,  179,    0,    0,    0,  179,    0,    0,  346,
    0,  178,    0,    0,  179,  179,    0,    0,  179,    0,
    0,    0,  179,    0,  178,    0,    0,  475,    0,  178,
    0,  188,    0,  188,  178,    0,  188,    0,    0,    0,
    0,  188,    0,    0,    0,  188,    0,    0,  178,    0,
  178,    0,    0,    0,  178,  188,    0,    0,    0,  475,
    0,    0,  178,  178,    0,    0,  178,    0,  188,    0,
  178,  179,    0,  188,    0,    0,    0,    0,  188,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  188,    0,  188,   30,    0,    0,  188,    0,
   30,    0,    0,  179,    0,    0,  188,  188,    0,    0,
  188,   30,   30,    0,  188,    0,   30,    0,    0,  178,
    0,   30,   30,   30,    0,    0,    0,   30,    0,    0,
    0,   30,   30,   30,    0,    0,   30,    0,    0,    0,
   30,    0,   30,   30,    0,    0,    0,    0,   30,   30,
    0,  178,   30,    0,   30,    0,    0,   30,   30,   30,
   30,   30,    0,  188,    0,    0,   30,    0,   36,    0,
   30,    0,   30,    0,    0,    0,    0,    0,    0,   36,
    0,    0,   30,    0,   36,   30,   30,    0,   30,   36,
    0,    0,   30,    0,    0,  188,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,    0,    0,
   36,   36,   30,    0,    0,    0,   36,   36,   30,   30,
    0,    0,   36,    0,    0,   36,    0,   36,   36,   36,
    0,    0,    0,    0,   36,    0,   34,    0,   36,    0,
   36,    0,    0,    0,    0,    0,    0,   34,    0,    0,
   36,    0,   34,    0,   36,    0,   36,   34,    0,    0,
   36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1110,   34,   34,
   36,    0,    0,    0,   34,   34,   36,   36,    0,    0,
   34,    0,   30,   34,   30,   34,   34,   34,    0,    0,
    0,    0,   34,    0,    0,    0,   34,    0,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
 1111,    0,   34,    0,   34, 1112, 1113,    0,   34,    0,
    0, 1114,    0,    0, 1115,   30, 1116, 1117, 1118,    0,
   30,   30,    0, 1119,    0,    0,   30, 1120,   34,   30,
    0,   30,   30,   30,   34,   34,    0,    0,   30, 1121,
   49,    0,   30, 1122,    0, 1123,    0,    0,    0,    0,
    0,   49,   49,    0,   30,    0,   49,    0,   30,    0,
   30,   49,   49,   49,    0,    0,    0,   49,    0, 1124,
    0,   49,   49,   49,    0,    0,   49,    0,    0,    0,
   49,    0,   49,   49,   30,    0,    0,    0,   49,   49,
   30,   30,   49,    0,   49,    0,    0,   49,   49,   49,
   49,   49,    0,    0,    0,    0,   49,    0,   49,    0,
   49,    0,   49,    0,    0,    0,    0,    0,    0,   49,
   49,    0,   49,    0,   49,   49,   49,    0,   49,   49,
   49,   49,   49,    0,    0,   49,    0,    0,    0,   49,
   49,   49,    0,    0,   49,    0,    0,    0,   49,    0,
   49,   49,   49,    0,    0,    0,   49,   49,   82,    0,
   49,    0,   49,    0,    0,   49,   49,   49,   49,   49,
    0,    0,    0,    0,   49,    0,   49,    0,   49,    0,
   49,    0,    0,    0,    0,    0,    0,   49,   49,    0,
   49,    0,   49,   49,   49,    0,   49,   49,   49,   49,
   49,    0,    0,   49,    0,    0,    0,   49,   49,   49,
    0,    0,   49,    0,    0,    0,   49,    0,   49,   49,
   49,    0,    0,    0,   49,   49,  218,    0,   49,    0,
   49,    0,    0,   49,   49,   49,   49,   49,    0,    0,
    0,    0,   49,    0,   49,    0,   49,    0,   49,    0,
    0,    0,    0,    0,    0,   49,   49,    0,   49,    0,
   49,   49,   49,    0,   49,   49,   49,   49,   49,    0,
    0,   49,    0,    0,    0,   49,   49,   49,    0,    0,
   49,    0,    0,    0,   49,    0,   49,   49,   49,    0,
    0,    0,   49,   49,   83,    0,   49,    0,   49,    0,
    0,   49,   49,   49,   49,   49,   49,    0,    0,    0,
   49,    0,    0,    0,   49,    0,   49,   49,    0,    0,
    0,    0,   49,    0,    0,    0,   49,   49,    0,   49,
   49,    0,   49,    0,    0,    0,   49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   49,   49,
    0,    0,    0,   49,   49,   49,   49,    0,    0,    0,
   49,    0,  219,   49,   49,   49,   49,   49,    0,   49,
    0,    0,   49,    0,   49,    0,   49,    0,   49,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   49,    0,
    0,    0,   49,    0,   49,   49,   49,    0,   49,    0,
   49,   49,   49,    0,    0,    0,    0,   49,    0,    0,
   49,    0,   49,   49,   49,   49,    0,    0,   49,   49,
    0,    0,    0,   49,   38,   49,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   49,    0,    0,    0,   49,
    0,   49,    0,   49,    0,   49,    0,    0,   49,   49,
   49,    0,   49,    0,   49,    0,    0,   49,   49,   49,
   49,   49,    0,   49,   49,   49,   49,    0,    0,   49,
   49,   39,   49,    0,   49,   49,   49,    0,    0,   49,
    0,   49,   49,    0,    0,   49,   49,    0,   49,    0,
    0,    0,    0,   49,    0,    0,    0,   49,   49,   49,
    0,   49,    0,   49,   49,    0,    0,   49,    0,   49,
   49,   49,   49,    0,   49,   49,   49,    0,  202,    0,
   49,  625,    0,    0,    0,    0,    0,   49,    0,    0,
  625,  625,   49,  288,    0,  625,   49,    0,   49,    0,
  625,  625,  625,    0,    0,    0,  625,    0,    0,    0,
  625,  625,  625,   50,    0,  625,    0,    0,    0,  625,
    0,  625,   49,    0,   50,    0,    0,    0,  289,   50,
    0,  625,    0,    0,   50,    0,    0,  625,    0,    0,
    0,    0,    0,  625,    0,    0,    0,    0,    0,    0,
    0,  625,    0,    0,    0,   50,   50,    0,    0,    0,
    0,   50,   50,   49,  625,   49,    0,   50,    0,    0,
   50,  625,   50,   50,   50,    0,    0,    0,    0,   50,
    0,    0,    0,   50,    0,   50,    0,    0,    0,    0,
    0,    0,    0,  625,  625,   50,    0,    0,    0,   50,
    0,   50,    0,    0,    0,   50,   49,    0,    0,    0,
    0,   49,   49,    0,    0,    0,    0,   49,    0,    0,
   49,    0,   49,   49,   49,   50,    0,   49,    0,   49,
    0,    0,    0,   49,    0,    0,  624,  624,    0,    0,
    0,  624,    0,    0,    0,   49,  624,  624,  624,   49,
    0,   49,  624,    0,    0,    0,  624,  624,  624,    0,
    0,  624,    0,    0,    0,  624,    0,  624,    0,    0,
    0,    0,    0,    0,    0,   49,    0,  624,    0,    0,
 1281,    0,    0,  624, 1138,    0,    0,    0,    0, 1139,
 1282, 1283,    0,    0,    0, 1284,    0,  624,    0, 1285,
 1286, 1287,    0, 1281, 1288,    0,    0, 1138, 1289,    0,
  624,    0, 1139, 1282, 1283,    0,    0,  624, 1284,    0,
 1290,    0, 1300, 1286, 1287,    0, 1291, 1288,    0,    0,
    0, 1289,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1290,    0,    0,    0,    0,    0, 1291,
    0,    0,    0, 1292,    0,    0,    0,    0,    0,    0,
 1293,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1292,    0,    0,    0,
    0,    0,    0, 1293,
  };
  protected static readonly short [] yyCheck = {            17,
  292,   17,   51,   20,   17,  108,   18,   17,    6,    4,
  285,  249,  242,  331,  186,  311,  157,  279,  321,  560,
  483,  290,  435,   51,   20,  345,  661,  543,  290,    0,
    0, 1071,   47,  309,    0, 1195, 1196, 1197,   20,  760,
   58,  202,   93,  432,    0, 1126,   97,   98,   99,  100,
  101,  102,  103,  362,  570,  256,  192, 1241, 1070,  268,
   73,   79,  279,   81,  268,    0,    0,  268,  256,  482,
  299,  256, 1256,  256,    0,  256,  256, 1089,  362,  335,
  256,   17,   95,  256,   87,   88,  256,  256,  256,  335,
  256,  379,  309,   17,  256,  108,  256,  379,  350,  256,
  383,  374,   17,  962,  107,  646,  256,  263,  335,  383,
  283,  379,  378,  619,  620,  382,  382, 1230,    0,   17,
  374,  385,  350,  361,  397,   17,  378, 1179,   17,  368,
  711,   17,  713,   17,   17,  387,  387,  996,  187,  157,
   17,  157,   17,  384,  157,  384,  387,  157,  256, 1201,
  378,  324,  440, 1266,  256,  256,  429,  440,  440,   20,
  256,  742,  256,  427,  431,  431,  440,  257,  749,  325,
  379,  256,  440,  429,  350,  429,    6,  313,  256,  355,
  256,  357,  300,  429,  360,  361,  352,  363,  364,  440,
   20,  240,  422,  256,  470,  378,  314,  380,  386,  382,
  503,  351,  429,  256,  207,  208,  387,  483,  470,  385,
  346,  440,  392,  383,  380,  385,  231,  379, 1230,  539,
  356,  157,  506,  385,  433,  543,   87,   88,  279,  433,
  514,  292,  433,  157, 1315,  392,  249,  250,  236,  290,
  253, 1425,  157,  632,  429,  296,  107,  968,  431,  525,
  639,  434,  570,  470, 1266,  258,  429,   87,   88,  157,
  429,  429,  768,  525,  440,  157,  483,  369,  157,  429,
  440,  157,  285,  157,  157,  288,  289,  107,  281, 1463,
  157, 1465,  157,  789,  392,  386,  257,  257,  301,  385,
  308,  257,  386,  378,  307,  431,  309,  300,  311,  262,
 1021,  257,  387,  381, 1488,  256,  382,  385,  525,  322,
  323,  429,  363,  374,  256,  331,  452,  478, 1478,  480,
  383,  331,  257,  257,  375,  376,  377,  647,  299,  380,
  381,  257,  385,  435,  436,  437,  438,  256,  256,  342,
  880,  354,  305,  978,  256,  316,  207,  208,  361,  362,
  316,  364,  365,  366,  367,  368,  369,  370,  371,  372,
  373,  374,  943,  345,  369,    0,  675,  266,  429,  430,
  384,  385,  299, 1533,  256,  378,  379,  207,  208, 1419,
  843,  316,  316,  396,  256,  885,  928,  256,  684,  929,
  316,  379,  441,  256,  900,  531,  902,  258,  298,  905,
  403,  404,  256,  285,  268,  298,  423,  256,  256,  380,
  277,  256,  276,  427,  380,  282,  298,  998,  960,  470,
  281, 1173,  558,  438,  439,  324,  389,  390,  258,  444,
  447,  292,  256,  671,  385,  256,  572,  379,  574,  300,
  256, 1230,  680,  385,  256,  458,  459,  716, 1213,  279,
  350,  281,  440,  773,  716,  868,  257,  350,  486,  402,
 1001,  380,  292,  566,  970,  383,  972,  973,  350,  487,
  300,  701,  256,  385,  525,  387, 1057, 1266,  378,  309,
  392,  342,  425,  263,  345,  378,  353,  386,  266,  379,
  256, 1072,  505,  506,  994,  631,  378,  387,  516,  517,
  382,  514,  384,  520,  386, 1193,  379,  429,  269,  381,
  374,  380,  342,  385,  565,  345,  529,  378,  379,  532,
  383,  657, 1103,  256,  520,  845,  287,  543, 1216,  383,
  385, 1296,  550,  543,  383,  383, 1301,  382,  520,  384,
  383,  386,  403,  404,  256,  325,  324,  313,  378,  379,
  440,  409,  410,  566,  570, 1061,  380,  539,  374,  380,
  570,  864,  423, 1079,  380,  429, 1331,  440,  380,  385,
  379,  387,  427,  403,  404,  352,  392, 1083,  560,  383,
  313,  313,  723,   93,  256,  354,  447,   97,   98,   99,
  100,  101,  102,  103,  379,  374,  272,  440,  382,  374,
  384,  614,  386,  380,   21,  313,  619,  620,  386,  622,
 1073,  714, 1364,  429,  750, 1367, 1368, 1369, 1370, 1371,
  314, 1373,  257,  317,  383,  384,  261,  303,  387,  323,
 1136,  440,  272,  402,  930,   52,  440,  272,  350, 1145,
  470,  335,  277,  355,  429,  357,  380,  282,  360,  361,
  429,  363,  364,  483,  429,  256,  425,  333,  671,  520,
  272, 1413,  675,  303,  646,  716, 1418,  680,  303,  304,
  439,  684, 1346,  385,  309,  310, 1350, 1351,  539,  917,
  315,  316,  379,  318,  368,  320,  321,  322,  350,  383,
  520,  303,  327,  333,  412,  525,  331,  387,  333,  560,
  384,  714,  374,  382,  717,  384,  424,  368,  343,  539,
 1230, 1285,  347,  385,  349,  387,  378,  735,  353,  272,
  392,  333,  314,  384,  277,  317, 1300,  256,  440,  282,
  560,  323,  429,  746, 1009,  429, 1054,  909,  373,  752,
  758,  754,  760,  335,  379,  380, 1266,  350,  392,  350,
  303,  382,  755,  384,  355,  768,  357,  429,  402,  360,
  361, 1079,  363,  364, 1490, 1491,  769,  816, 1442,   56,
 1444, 1445, 1446, 1048,   61,  378,  789,   64,   65,   66,
  333,  425,   69,   70,  387,  646,  296,   74,   75,  381,
  368,  773, 1518,  387,   81, 1033,   83,  380,   85,  382,
  353,  384,  380,   90,   91,  383,  384,  824,  380,  387,
  314,  321,  859,  402,  368,  387,  646, 1135,  831,  323,
  354,  350,  850,  870,  927,  256,  355,  114,  357, 1104,
  384,  360,  361, 1230,  363,  364,  425,  429,  378,  440,
  314,  844,  380,  368,  847,  383,  859,  387,  431,  323,
  439,  434, 1230,  363,  432,  380,  869, 1087,  392,  384,
  381,  335,  387, 1230,  385,  375,  376,  377,  402, 1266,
  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,  395,  378,  900, 1266,  902,
  256,  425,  905,  382,  755,  387,  300,  914,  363, 1266,
  314,  378, 1230,  317,  917,  439,  256,  432,  769,  323,
  923,  440,  773,  425,  927,  380,  381,  930,  378,  350,
  382,  335,  384,  256,  355,  755,  357,  439,  314,  360,
  361,  317,  363,  364,  392,  429,  269,  323, 1266,  769,
  379,  403,  404,  773,  402,  439,  385,  425, 1223,  335,
  968,  393,  394,  392,  287,  958, 1186,  970,  382,  972,
  973,  439,  975,  824,  368,  407,  408,  425,  300,  431,
  374,  300,  434,  256,  429,  383,  380,  385,  429,  383,
  384,  439,  314,  844,  350,  314,  847, 1000,  439,  355,
  985,  357,  384,  503,  360,  361, 1009,  363,  364,  405,
  406,  378,  314, 1021,  291,  317,  390, 1020,  295,  440,
  387,  323,  379,  380,  844,  429,  303,  847,  305, 1001,
 1033, 1070, 1034,  335,  378,  429,  395,  378,  432,  385,
  256,  387,  385,  387,  387, 1048,  387,  379, 1054,  392,
 1089,  383, 1070,  429, 1054,  387, 1338,  383, 1061,  385,
  396,  354,  379,  914, 1067,  565,  383,  381, 1071,  383,
  387, 1089,  381, 1079,  381,  382,  385,  350,  385, 1079,
 1083, 1084,  355,  411,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,  392, 1285, 1286, 1287,  392,
  383, 1104,  385,  381,  387,  383,  379,  958,  381,  402,
  383, 1300,  385,  386,  387,  400,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422, 1315,  381,  401, 1135,
  401,  385,  425, 1136,  350, 1135,  387,  368,  958,  355,
 1179,  357, 1145,  374,  360,  361,  439,  363,  364,  380,
 1001, 1139,  383,  384,  385, 1173,  379,  381, 1146,  383,
  383, 1179, 1201, 1352, 1157,  383, 1138,  440,  381,  387,
  383, 1159,  385, 1161,  381, 1163,  383,  385, 1304,  387,
  381, 1001,  383, 1201,  385,  256,  432,  383,  261,  385,
 1229, 1230,  383,   20,  385, 1321,  473,  256,  429,  397,
  398,  399,  479,  381,  382, 1244,  384,  385,  386, 1335,
 1336, 1229,  381,  379,  379,  368,  385,  383,  383,  381,
 1223,  383, 1348,  381,  440,  383, 1244, 1266,  385, 1268,
  387,  304,   59,  365,  366, 1228,  309,  310,  385,  516,
  387,   68,  315,  380,  385,  318,  387,  320,  321,  322,
 1268,  385,  382,  387,  327,  365,  366,   84,  331,  384,
   87,   88,  379,  380,  425,   92, 1274,  375,  376,  429,
  343,  316,  375,  376,  347,  256,  349, 1270,  429,  350,
  384,  385,  386,  387,  355,  386,  357, 1138,  387,  360,
  361,  350,  363,  364,  382,  383,  355,  387,  357,  386,
  373,  360,  361,  387,  363,  364, 1157, 1176, 1177,  388,
  389,  379, 1182, 1183,  382,  388,  384,  385, 1138,  354,
 1328,  300, 1361,  429,  300,  292,  383,  385,  425, 1180,
  367,    0,  387,  429,  380,  403,  404, 1157,  386, 1332,
  382, 1334, 1193,  256,  261,  385, 1364,  383,  256, 1367,
 1368, 1369, 1370, 1371,  383, 1373,  429,  387, 1451,  379,
 1180, 1400,  385,  431,  864, 1216,  434,  381, 1361,  440,
  383,  198,  383, 1193, 1346, 1468,  429, 1228, 1350, 1351,
  300,  440,  300,  385,  383,  383,  383,  304, 1427, 1428,
  385,  381,  309,  310,  387, 1413, 1216,  300,  315, 1407,
 1418,  318,  300,  320,  321,  322,  392,  387, 1228,  383,
  327, 1450,  385,  384,  331,  385, 1419,  386,  384, 1270,
  385,  383,  249,  250,  387,  386,  343,  385,  385, 1522,
  347, 1282,  349, 1436, 1285, 1286, 1287,  385, 1289,  440,
 1291, 1434,  434,  383,  256,  378,  383,  383, 1451, 1300,
 1270, 1490, 1491,  385, 1447,  383,  373,  354,  375,  376,
  300,  300,  379,  385, 1315, 1468,  381,  378,  382,  429,
 1442,  392, 1444, 1445, 1446,  429,  392, 1449,  429, 1518,
  256, 1332,  256, 1334,  281,  256,    0, 1338,  378,  316,
  354,  387,  386,  320,  387, 1346,  383,  362,  381, 1350,
 1351, 1352,  387,  385,  300,  386,  385, 1515, 1516,  385,
 1361,  381, 1332,  358, 1334,  383,  387,  392, 1338, 1522,
  383,  256, 1530, 1531,  256,  392, 1346,  379,  383,  387,
 1350, 1351,  358,  381,  361,  362,  385,  383,  350,  392,
  378, 1361,  392,  355,  359,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  379,  359,  379,  367,
  429,  386,  256,  256,  382,  378,  285,  379,  298,  381,
  429,  383,  383,  385,  386,  387,  403,  404,  385,  256,
  407,  379,  350, 1434,  382,  379,  384,  385,  257,  401,
  378, 1442,  261, 1444, 1445, 1446, 1447,  429, 1449,  426,
  412,  392,  387,  272,  387,  403,  404,  382,  277,  378,
  437,  378,  424,  282, 1434,  385,  379,  379,  383,  379,
  429,  292, 1442,  429, 1444, 1445, 1446, 1447,  440, 1449,
  299,  386,  386,  431,  303,  304,  434,  429,  382,  429,
  309,  310,  429,  429,  386,  382,  315,  316,  382,  318,
  386,  320,  321,  322,  481,  382,  382,  484,  327,  425,
  384,  386,  331,  386,  333,  429,  382,  378,  256,  384,
  384,  380,  382,    0,  343,  382,  380,  378,  347,  506,
  349,  383,  387,  383,  353,  383,  392,  514,  383,  392,
  386,  383,  383,  520,  383,  383,  256,  524,  385,  385,
  385,  429,  386,  386,  373,  386,  386,  386,  386,  385,
  379,  380,  387,  387,  387,  381,  429,  429,  387,  387,
  383,  429,  379,  381,  378,  392,  386,  392,  325,  263,
  379,  348,  559,  379,    0,    0,  378,  387,  379,  383,
    0,  381,  256,  257,  378,  383,  379,  383,  387,  381,
  264,  265,  266,  267,  268,  378,  270,  271,  387,  273,
  274,  275,  276,  379,  278,  279,  387,  281,  429,  387,
  429,  440,  286,  387,  288,  289,  290,  291,  292,  383,
  379,  295,  296,  383,  387,  379,  379,  378,  302,  616,
  379,  618,  306,  307,  429,  378,  310,  311,  312,  429,
  627,  387,  384,  380,  325,  263,  387,  387,  387,  387,
  324,  387,  326,  387,  328,  329,  387,  387,  332,   50,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,    0,  187,   12,    5,  351,  352, 1089,
  914,  355,  356, 1033,  671, 1033,  824, 1244,  675, 1268,
  520, 1458, 1422,  680, 1474, 1338,  370,  371,  372,  373,
  374, 1439, 1454,  690,  378,  379, 1407,  850,  382,  700,
  845, 1291, 1531,  387,  388,  389,  390,  391,  850, 1266,
 1290,  395,  850, 1432, 1517, 1516, 1428, 1427, 1201,  403,
  404,  816, 1336,  717, 1289,  459,  578,  361,  680,  671,
  864,   77,  716,  324,  390,  392,  391,  395,  539,  393,
 1270,  394,  773, 1207,  428,  429,  430,  431, 1135,  433,
  434, 1054,  157,  990, 1073, 1020,  440,  960, 1014,  256,
  257, 1012,  354,  518,  879,  412,  412,  264,  265,  266,
  267,  268, 1084,  270,  271,  772,  273,  274,  275,  276,
 1155,  278,  279,  625,   -1,   -1,  822,   -1,   -1,  286,
   -1,  288,  289,  290,  291,  292,   -1,  821,  295,  296,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,  306,
  307,   -1,   -1,  310,  311,  312,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,    0,   -1,  332,   -1,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
   -1,   -1,   -1,   -1,  351,  352,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  370,  371,  372,  373,  374,   -1,  876,
   -1,  378,  379,   -1,   -1,  382,  883,   -1,   -1,   -1,
  387,  388,  389,  390,  391,   -1,   -1,   -1,  395,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  917,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,  428,  429,  430,  431,   -1,  433,  434,   -1,   -1,
   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,   -1,  300,  350,   -1,   -1,   -1,  305,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  988,   -1,  379,   -1,  381,   -1,  383,   -1,  385,
  386,  387,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,   -1,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,   -1,   -1,   -1,   -1, 1033,  374,   -1,   -1,
   -1,  378,  379,   -1,  381,  382,  383,  384,  385,  386,
  387,   -1,  389,  390,  440,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,   -1,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,   -1,  424,   -1,  256,
  427,   -1,  429,   -1,  431,  262,   -1,  434,   -1,  350,
   -1,   -1,   -1,  440,  355,    0,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  381,  298,  383,  300,  385,  386,  387,   -1,  305,   -1,
   -1,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,
  401,   -1,   -1,   -1,   -1,   -1, 1153,   -1,  409,  410,
  411,  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  440,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,  368,   -1,   -1,  256,   -1,   -1,  374,   -1,   -1,
  262,  378,  379,  380,  381,  382,  383,  384,  385,  386,
  387,   -1,  389,  390,   -1,  392,  393,  394,  395,  396,
   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,  405,  406,
  407,  408,  409,  410,  411,  412,  298,   -1,  300,   -1,
   -1,   -1,   -1,  305,   -1,   -1,   -1,  424,   -1,   -1,
  427,   -1,  429,   -1,  431,    0,   -1,  434,   -1,   -1,
   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,  350,   -1,
   -1,   -1,   -1,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,  374,   -1,   -1,   -1,  378,  379,  380,  381,
  382,  383,   -1,  385,  386,  387,   -1,  389,  390,  305,
  392,  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,    0,  405,  406,  407,  408,  409,  410,  411,
  412,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,  424,   -1,   -1,  427,   -1,  429,   -1,  431,
   -1,   -1,  434,   -1,  350,   -1,   -1,   -1,  440,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  298,   -1,  300,   -1,   -1,   -1,   -1,
  305,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,
  386,  387,   -1,  389,  390,   -1,   -1,  393,  394,  395,
  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,  405,
  406,  407,  408,  409,  410,  411,  412,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,  424,   -1,
  355,   -1,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  440,   -1,   -1,   -1,   -1,  374,
   -1,   -1,   -1,  378,  379,   -1,  381,  382,  383,   -1,
  385,  386,  387,   -1,  389,  390,   -1,  392,  393,  394,
  395,  396,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,
  405,  406,  407,  408,  409,  410,  411,  412,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,  263,  424,
   -1,   -1,  427,   -1,  429,   -1,   -1,  272,  273,   -1,
   -1,   -1,  277,   -1,   -1,  440,   -1,  282,  283,  284,
   -1,   -1,   -1,  288,   -1,   -1,   -1,  292,  293,  294,
   -1,   -1,  297,   -1,   -1,  300,  301,   -1,  303,  304,
   -1,   -1,   -1,   -1,  309,  310,   -1,   -1,  313,  314,
  315,  316,   -1,  318,  319,  320,  321,  322,   -1,   -1,
  325,   -1,  327,   -1,   -1,   -1,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,  257,
   -1,  346,  347,  261,  349,   -1,   -1,   -1,  353,   -1,
   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,  277,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,  373,   -1,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  299,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,
   -1,  309,  310,   -1,   -1,   -1,   -1,  315,  316,   -1,
  318,   -1,  320,  321,  322,   -1,   -1,   -1,   -1,  327,
   -1,   -1,   -1,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  429,  343,   -1,   -1,   -1,  347,
   -1,  349,   -1,   -1,  256,  353,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  373,  278,  279,   -1,   -1,
   -1,  379,  380,   -1,  286,   -1,  288,  289,  290,  291,
  292,   -1,   -1,  295,  296,   -1,   -1,   -1,   -1,   -1,
  302,  286,   -1,   -1,  306,  307,   -1,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  256,   -1,   -1,   -1,  351,
  352,  262,  337,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,  387,  388,  389,  390,  391,
   -1,   -1,   -1,  395,  305,   -1,   -1,   -1,   -1,   -1,
   -1,  403,  404,  388,  389,  390,  391,   -1,  393,  394,
  395,  396,  397,  398,  399,  400,   -1,   -1,  403,  404,
  405,  406,  407,  408,  409,  410,  428,  429,  430,  431,
   -1,  256,  434,   -1,   -1,   -1,   -1,  262,  440,  350,
   -1,   -1,   -1,   -1,  355,   -1,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,  368,   -1,   -1,
   -1,   -1,   -1,  374,   -1,   -1,   -1,   -1,  379,  380,
  381,  382,  383,  384,  385,  386,  387,   -1,  389,  390,
  305,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,   -1,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,   -1,  424,   -1,   -1,   -1,   -1,  429,   -1,
  431,   -1,   -1,  434,   -1,  350,   -1,   -1,   -1,  440,
  355,   -1,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,  379,  262,  381,  382,  383,  384,
  385,  386,  387,   -1,  389,  390,   -1,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  305,  424,
   -1,   -1,   -1,   -1,   -1,   -1,  431,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,  350,   -1,   -1,   -1,   -1,  355,   -1,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  379,   -1,  381,  382,  383,  384,  385,  386,
  387,   -1,  389,  390,  305,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,   -1,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,   -1,  424,   -1,   -1,
   -1,   -1,   -1,   -1,  431,   -1,   -1,  434,   -1,  350,
   -1,   -1,   -1,  440,  355,   -1,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,  379,  262,
  381,  382,  383,  384,  385,  386,  387,   -1,  389,   -1,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,   -1,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  305,  424,   -1,   -1,   -1,   -1,   -1,   -1,
  431,   -1,   -1,  434,   -1,   -1,   -1,  256,   -1,  440,
   -1,   -1,   -1,  262,   -1,   -1,   -1,  266,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,
   -1,   -1,  355,   -1,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,
  383,   -1,  385,  386,  387,  324,  389,  390,   -1,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,   -1,
   -1,   -1,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  440,   -1,   -1,
  379,  262,  381,  382,  383,  384,  385,  386,  387,   -1,
  389,  390,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,   -1,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  305,  424,   -1,   -1,   -1,   -1,
   -1,   -1,  431,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,  440,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,   -1,   -1,  355,   -1,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,   -1,  305,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  381,   -1,  383,   -1,  385,  386,  387,   -1,  389,  390,
   -1,  256,  393,  394,  395,  396,   -1,  262,   -1,  400,
  401,   -1,   -1,   -1,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,
   -1,   -1,  355,  424,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,  440,
  305,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,
  383,   -1,  385,  386,  387,   -1,  389,  390,   -1,  256,
  393,  394,  395,  396,   -1,  262,   -1,  400,  401,   -1,
   -1,   -1,  405,  406,  407,  408,  409,  410,  411,  412,
   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,
  355,  424,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,   -1,   -1,   -1,  440,  305,   -1,
   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,
  385,  386,  387,   -1,  389,  390,   -1,  256,  393,  394,
  395,  396,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,
  405,  406,  407,  408,  409,  410,  411,  412,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  424,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,
   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,  386,
  387,   -1,  389,  390,   -1,  256,  393,  394,  395,  396,
   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,  405,  406,
  407,  408,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,   -1,   -1,  355,  424,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,
  379,   -1,  381,   -1,  383,   -1,  385,  386,  387,   -1,
   -1,   -1,   -1,  256,  393,  394,  395,  396,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,  405,  406,  407,  408,
  409,  410,  411,  412,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,   -1,   -1,  355,  424,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  381,   -1,  383,   -1,  385,  386,  387,   -1,   -1,   -1,
   -1,  256,  393,  394,  395,  396,   -1,   -1,   -1,  400,
  401,   -1,   -1,   -1,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,
   -1,   -1,  355,  424,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,  440,
   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,
  383,   -1,  385,  386,  387,   -1,   -1,   -1,   -1,  256,
  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,   -1,
   -1,   -1,  405,  406,  407,  408,  409,  410,  411,  412,
   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,
  355,  424,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,
   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,
  385,  386,  387,   -1,   -1,   -1,   -1,  256,  393,  394,
  395,  396,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,
   -1,   -1,  407,  408,  409,  410,  411,  412,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  424,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,
   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,  386,
  387,   -1,   -1,   -1,   -1,  256,  393,  394,  395,  396,
   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,
  407,  408,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,   -1,   -1,  355,  424,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,
  379,   -1,  381,   -1,  383,   -1,  385,  386,  387,   -1,
   -1,   -1,   -1,  256,  393,  394,  395,  396,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,  407,  408,
  409,  410,  411,  412,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,   -1,   -1,  355,  424,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  381,   -1,  383,   -1,  385,  386,  387,   -1,   -1,   -1,
   -1,  256,  393,  394,  395,  396,   -1,  262,   -1,  400,
  401,   -1,   -1,   -1,   -1,   -1,  407,  408,  409,  410,
  411,  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,
   -1,   -1,  355,  424,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,  440,
  305,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,
  383,   -1,  385,  386,  387,   -1,   -1,   -1,   -1,   -1,
  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,   -1,
   -1,   -1,   -1,   -1,  407,  408,  409,  410,  411,  412,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  440,   -1,   -1,
   -1,   -1,   -1,   -1,  379,   -1,   -1,  382,   -1,  384,
  385,   -1,   -1,   -1,  389,  390,   -1,   -1,  393,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  424,
   -1,   -1,   -1,   -1,   -1,   -1,  431,   -1,   -1,  434,
   -1,   -1,   -1,   -1,  350,  440,   -1,   -1,   -1,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,
  386,  387,   -1,   -1,   -1,   -1,  256,   -1,   -1,  395,
  396,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  409,  410,  411,  412,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  424,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,  381,   -1,  383,   -1,  385,  386,  387,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  395,  396,   -1,
   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  409,  410,  411,  412,   -1,   -1,   -1,   -1,   -1,
  350,   -1,   -1,   -1,   -1,  355,  424,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,   -1,
   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,  379,
   -1,  381,   -1,  383,   -1,  385,  386,  387,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  395,  396,   -1,   -1,   -1,
  400,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,
   -1,   -1,   -1,  355,  424,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
  440,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,
   -1,  383,   -1,  385,  386,  387,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,
   -1,  355,  424,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,   -1,   -1,   -1,  440,   -1,
   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,  383,
   -1,  385,  386,  387,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  396,   -1,   -1,   -1,  400,  401,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,   -1,
   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,
  424,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,
   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,
  386,  387,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  396,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,  412,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  424,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,  381,   -1,  383,   -1,  385,  386,  387,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  396,   -1,
   -1,   -1,   -1,  401,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,  412,   -1,   -1,   -1,   -1,   -1,
  350,   -1,   -1,   -1,   -1,  355,  424,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,   -1,
   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,  379,
   -1,  381,   -1,  383,   -1,  385,  386,  387,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  396,   -1,   -1,   -1,
   -1,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,
   -1,   -1,   -1,  355,  424,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
  440,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,
   -1,  383,   -1,  385,  386,  387,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  401,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,
   -1,  355,  424,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,   -1,   -1,   -1,  440,   -1,
   -1,   -1,   -1,   -1,   -1,  379,  256,  381,   -1,  383,
   -1,  385,  386,  387,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  401,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,   -1,
   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,
  424,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,
   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,
  386,  387,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  401,   -1,   -1,   -1,   -1,
  350,   -1,   -1,   -1,   -1,  355,  412,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,   -1,  424,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,
  256,  381,   -1,  383,  440,  385,  386,  387,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  276,   -1,  278,  279,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,  288,  289,  290,  291,  292,   -1,   -1,  295,
  296,   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,
  306,  307,   -1,   -1,  310,  311,  312,   -1,   -1,   -1,
  440,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,   -1,   -1,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,   -1,   -1,   -1,   -1,  351,  352,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,
   -1,   -1,  378,   -1,   -1,   -1,  382,   -1,   -1,   -1,
   -1,  387,  388,  389,  390,  391,   -1,   -1,   -1,  395,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  428,  429,  430,  431,   -1,   -1,  434,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,   -1,  278,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,  288,  289,  290,  291,  292,   -1,   -1,
  295,  296,   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,
   -1,  306,  307,   -1,   -1,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,   -1,   -1,   -1,   -1,  351,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,  378,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,  387,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  428,  429,  430,  431,   -1,   -1,  434,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,   -1,  278,  279,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,  288,  289,  290,  291,  292,   -1,
   -1,  295,  296,   -1,   -1,   -1,   -1,   -1,  302,   -1,
   -1,   -1,  306,  307,   -1,   -1,  310,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,   -1,   -1,   -1,   -1,  351,  352,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,  378,   -1,   -1,   -1,  382,   -1,
   -1,   -1,   -1,  387,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  403,
  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  428,  429,  430,  431,   -1,   -1,
  434,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,   -1,  278,  279,   -1,   -1,   -1,
   -1,   -1,   -1,  286,   -1,  288,  289,  290,  291,  292,
   -1,   -1,  295,  296,   -1,   -1,   -1,   -1,   -1,  302,
   -1,   -1,   -1,  306,  307,   -1,   -1,  310,  311,  312,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,   -1,   -1,  332,
   -1,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,   -1,   -1,   -1,   -1,  351,  352,
   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,
  373,  374,   -1,   -1,   -1,  378,   -1,   -1,   -1,  382,
   -1,   -1,   -1,   -1,  387,  388,  389,  390,  391,   -1,
   -1,   -1,  395,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  403,  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  428,  429,  430,  431,   -1,
   -1,  434,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,   -1,  278,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,  288,  289,  290,  291,
  292,   -1,   -1,  295,  296,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,  306,  307,   -1,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,   -1,   -1,   -1,   -1,  351,
  352,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,  387,  388,  389,  390,  391,
   -1,   -1,   -1,  395,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  403,  404,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,   -1,  279,   -1,   -1,  428,  429,  430,  431,
  286,   -1,  434,  289,   -1,   -1,  292,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,
   -1,  307,   -1,   -1,  310,  311,  312,   -1,  314,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,   -1,
  326,   -1,  328,  329,   -1,   -1,  332,   -1,   -1,  335,
   -1,  337,   -1,  339,  340,  341,  342,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  403,  404,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,   -1,  279,
   -1,   -1,  428,  429,  430,  431,  286,   -1,  434,  289,
   -1,   -1,  292,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,  339,
  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  403,  404,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,   -1,  279,   -1,   -1,  428,  429,
  430,  431,  286,   -1,  434,  289,   -1,   -1,  292,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,   -1,  310,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
   -1,  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,
  344,   -1,   -1,   -1,  348,   -1,   -1,   -1,  352,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,   -1,   -1,   -1,   -1,   -1,  256,  403,
  404,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
   -1,  279,   -1,   -1,  428,  429,  430,  431,  286,   -1,
  434,  289,   -1,   -1,  292,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,
   -1,   -1,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,
  328,  329,   -1,   -1,  332,   -1,   -1,  335,   -1,  337,
   -1,  339,  340,  341,  342,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,  390,  391,   -1,   -1,   -1,  395,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  403,  404,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,   -1,  279,   -1,   -1,
  428,  429,  430,  431,  286,   -1,  434,  289,   -1,   -1,
  292,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,   -1,  335,   -1,  337,   -1,  339,  340,  341,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  352,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  403,  404,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,   -1,  279,   -1,   -1,  428,  429,  430,  431,
  286,   -1,  434,  289,   -1,   -1,  292,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,
   -1,  307,   -1,   -1,  310,  311,  312,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  326,   -1,  328,  329,   -1,   -1,  332,   -1,   -1,  335,
   -1,  337,   -1,  339,  340,  341,  342,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  403,  404,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,   -1,  279,
   -1,   -1,  428,  429,  430,  431,  286,   -1,  434,  289,
   -1,   -1,  292,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,  339,
  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  403,  404,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,   -1,  279,   -1,   -1,  428,  429,
  430,  431,  286,   -1,  434,  289,   -1,   -1,  292,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,  256,  310,  311,  312,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
   -1,  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,
   -1,  355,  356,   -1,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  403,
  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  428,  429,  430,  431,   -1,  380,
  434,  382,  383,  384,  385,   -1,  387,   -1,  389,  390,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  261,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,   -1,  424,   -1,   -1,   -1,   -1,  429,   -1,
  431,  264,  265,  434,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  304,   -1,  279,   -1,   -1,  309,
  310,   -1,   -1,  286,   -1,  315,  289,   -1,  318,  292,
  320,  321,  322,   -1,   -1,   -1,   -1,  327,   -1,  302,
   -1,  331,   -1,   -1,  307,   -1,   -1,  310,  311,  312,
   -1,   -1,   -1,  343,   -1,   -1,   -1,  347,   -1,  349,
   -1,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,
   -1,   -1,  335,   -1,  337,   -1,  339,  340,  341,  342,
   -1,  344,   -1,  373,   -1,  375,  376,   -1,   -1,  352,
   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,
  373,  374,   -1,   -1,   -1,  378,  379,   -1,   -1,  382,
   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,
   -1,   -1,  395,   -1,   -1,   -1,  264,  265,   -1,  267,
  403,  404,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,  292,  428,  429,  430,  431,   -1,
   -1,  434,   -1,   -1,  302,   -1,  439,   -1,   -1,  307,
   -1,   -1,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,
  328,  329,   -1,   -1,  332,   -1,   -1,  335,   -1,  337,
   -1,  339,  340,  341,  342,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,
  378,   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,  390,  391,   -1,   -1,   -1,  395,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  403,  404,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,   -1,  279,   -1,   -1,
  428,  429,  430,  431,  286,   -1,  434,  289,   -1,   -1,
  292,  439,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,  256,  335,   -1,  337,   -1,  339,  340,  341,
  342,  265,  344,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  289,   -1,   -1,  370,  371,
  372,  373,  265,   -1,  267,   -1,   -1,  270,  302,   -1,
  382,   -1,  275,  307,   -1,   -1,  279,   -1,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,   -1,   -1,   -1,  332,  302,
   -1,   -1,   -1,   -1,  307,   -1,  340,  341,   -1,  312,
  344,   -1,   -1,  256,  348,   -1,  428,  429,   -1,   -1,
   -1,   -1,  265,  326,  267,  328,   -1,  270,   -1,  332,
   -1,   -1,  275,   -1,   -1,   -1,  279,  340,  341,   -1,
  374,  344,   -1,   -1,   -1,  348,  289,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,   -1,   -1,  397,  307,   -1,   -1,   -1,   -1,  312,
   -1,  374,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  265,  326,  267,  328,   -1,  270,   -1,  332,
   -1,   -1,  275,   -1,  397,  429,  279,  340,  341,   -1,
   -1,  344,   -1,   -1,   -1,  348,  289,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,   -1,   -1,   -1,  307,   -1,  429,  256,   -1,  312,
   -1,   -1,   -1,   -1,   -1,   -1,  265,  380,  267,   -1,
   -1,  270,   -1,  326,   -1,  328,  275,   -1,   -1,  332,
  279,   -1,   -1,   -1,  397,   -1,   -1,  340,  341,   -1,
  289,  344,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
   -1,  256,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,
  265,   -1,  267,  312,   -1,  270,  429,   -1,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  326,   -1,  328,
   -1,   -1,   -1,  332,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  340,  341,   -1,  397,  344,   -1,  302,  262,  348,
   -1,   -1,  307,  261,   -1,   -1,   -1,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  326,   -1,  328,   -1,   -1,  429,  332,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,  344,
   -1,  305,   -1,  348,   -1,   -1,  304,   -1,  397,   -1,
   -1,  309,  310,   -1,   -1,   -1,   -1,  315,   -1,   -1,
  318,   -1,  320,  321,  322,   -1,   -1,   -1,   -1,  327,
   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,  343,   -1,   -1,   -1,  347,
   -1,  349,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  373,   -1,   -1,  382,  383,
  384,  385,  386,   -1,  429,  389,  390,   -1,   -1,  393,
  394,  395,  396,  397,  398,  399,  400,  401,   -1,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,   -1,
  424,   -1,  264,  265,   -1,  267,   -1,  431,  270,  271,
  434,  429,   -1,  275,  276,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
  292,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,  311,
  312,   -1,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,   -1,  335,   -1,  337,   -1,  339,  340,  341,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  352,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,  385,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,   -1,   -1,   -1,  264,  265,   -1,
  267,  403,  404,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,  292,  428,  429,  430,  431,
   -1,   -1,  434,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,   -1,  310,  311,  312,   -1,  314,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,   -1,  326,
   -1,  328,  329,   -1,   -1,  332,   -1,   -1,  335,   -1,
  337,   -1,  339,  340,  341,  342,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,  385,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,   -1,
   -1,   -1,  264,  265,   -1,  267,  403,  404,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
  292,  428,  429,  430,  431,   -1,   -1,  434,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,   -1,  335,   -1,  337,   -1,  339,  340,  341,
  342,   -1,  344,   -1,   -1,   -1,  348,   -1,   -1,   -1,
  352,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,   -1,   -1,   -1,  264,  265,   -1,
  267,  403,  404,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,  292,  428,  429,  430,  431,
   -1,   -1,  434,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,   -1,  310,  311,  312,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,
   -1,  328,  329,   -1,   -1,  332,   -1,   -1,  335,   -1,
  337,   -1,  339,  340,  341,  342,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,
   -1,   -1,  379,   -1,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,   -1,
   -1,   -1,  264,  265,   -1,  267,  403,  404,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
  292,  428,  429,  430,  431,   -1,   -1,  434,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,   -1,  335,   -1,  337,   -1,  339,  340,  341,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  352,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,   -1,   -1,   -1,  264,  265,   -1,
  267,  403,  404,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,  292,  428,  429,  430,  431,
   -1,   -1,  434,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,   -1,  310,  311,  312,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,
   -1,  328,  329,   -1,   -1,  332,   -1,   -1,  335,   -1,
  337,   -1,  339,  340,  341,  342,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,   -1,
   -1,   -1,  264,  265,   -1,  267,  403,  404,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
  292,  428,  429,  430,  431,   -1,   -1,  434,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,   -1,  335,   -1,  337,   -1,  339,  340,  341,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  352,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,   -1,   -1,   -1,  264,  265,   -1,
  267,  403,  404,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,  292,  428,  429,  430,  431,
   -1,   -1,  434,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,   -1,  310,  311,  312,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,
   -1,  328,  329,   -1,   -1,  332,   -1,   -1,  335,   -1,
  337,   -1,  339,  340,  341,  342,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,   -1,
   -1,   -1,  264,  265,   -1,  267,  403,  404,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
  292,  428,  429,  430,  431,   -1,   -1,  434,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,   -1,  335,   -1,  337,   -1,  339,  340,  341,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  352,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,   -1,   -1,   -1,  264,  265,   -1,
  267,  403,  404,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,  292,  428,  429,  430,  431,
   -1,   -1,  434,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,   -1,  310,  311,  312,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,
   -1,  328,  329,   -1,   -1,  332,   -1,   -1,  335,   -1,
  337,   -1,  339,  340,  341,  342,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  352,  261,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,  304,
   -1,   -1,   -1,   -1,  309,  310,  403,  404,   -1,   -1,
  315,   -1,   -1,  318,   -1,  320,  321,  322,   -1,   -1,
  325,   -1,  327,   -1,  261,   -1,  331,   -1,   -1,   -1,
   -1,  428,  429,  430,  431,  272,  273,  434,  343,   -1,
  277,   -1,  347,   -1,  349,  282,  283,  284,   -1,   -1,
   -1,  288,   -1,   -1,   -1,  292,  293,  294,   -1,   -1,
  297,   -1,   -1,   -1,  301,   -1,  303,  304,  373,   -1,
   -1,   -1,  309,  310,  379,  380,  313,   -1,  315,   -1,
   -1,  318,  319,  320,  321,  322,   -1,   -1,   -1,   -1,
  327,   -1,  264,  265,  331,  267,  333,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  343,  279,   -1,  346,
  347,   -1,  349,   -1,  286,   -1,  353,  289,   -1,   -1,
  292,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,  373,   -1,  310,  311,
  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
  332,   -1,   -1,  335,   -1,  337,   -1,  339,  340,  341,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,  370,  371,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,   -1,   -1,   -1,  264,  265,   -1,
  267,  403,  404,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,  292,  428,  429,   -1,  431,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,   -1,  310,  311,  312,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,
   -1,  328,  329,   -1,   -1,  332,   -1,   -1,  335,   -1,
  337,   -1,  339,  340,  341,  342,   -1,  344,   -1,   -1,
   -1,  348,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,  370,  371,  372,  373,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,   -1,
   -1,  312,   -1,  314,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  323,   -1,  275,  326,   -1,  328,  279,   -1,
   -1,  332,   -1,   -1,  335,   -1,   -1,   -1,  289,  340,
  341,  428,  429,  344,   -1,   -1,   -1,  348,   -1,   -1,
   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,
   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,   -1,   -1,
   -1,  332,  333,   -1,   -1,   -1,   -1,   -1,   -1,  340,
  341,   -1,   -1,  344,   -1,   -1,  397,  348,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  265,   -1,  267,
  275,   -1,  270,   -1,  279,   -1,   -1,  275,   -1,  284,
   -1,  279,   -1,   -1,  289,   -1,   -1,   -1,  429,   -1,
   -1,  289,  297,   -1,   -1,   -1,   -1,  302,   -1,   -1,
   -1,   -1,  307,   -1,  302,   -1,  397,  312,  313,  307,
   -1,   -1,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,  326,   -1,  328,   -1,   -1,   -1,  332,  326,   -1,
  328,   -1,   -1,   -1,  332,  340,  341,   -1,  429,  344,
   -1,   -1,  340,  341,   -1,   -1,  344,  265,   -1,  267,
  348,   -1,  270,   -1,   -1,   -1,   -1,  275,  265,   -1,
  267,  279,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,  289,  279,   -1,   -1,   -1,  374,   -1,   -1,   -1,
   -1,   -1,  289,   -1,  302,   -1,   -1,   -1,   -1,  307,
   -1,   -1,   -1,   -1,  312,  302,   -1,   -1,   -1,  397,
  307,   -1,   -1,   -1,   -1,  312,   -1,   -1,  326,   -1,
  328,   -1,   -1,   -1,  332,   -1,   -1,   -1,   -1,  326,
   -1,  328,  340,  341,  429,  332,  344,   -1,  346,   -1,
  348,  429,   -1,  340,  341,   -1,   -1,  344,  265,   -1,
  267,  348,   -1,  270,   -1,   -1,   -1,   -1,  275,  265,
   -1,  267,  279,   -1,  270,   -1,   -1,   -1,   -1,  275,
   -1,   -1,  289,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  289,   -1,  302,  383,   -1,   -1,  397,
  307,   -1,   -1,   -1,   -1,  312,  302,   -1,   -1,   -1,
  397,  307,   -1,   -1,   -1,   -1,  312,   -1,   -1,  326,
   -1,  328,   -1,   -1,   -1,  332,   -1,   -1,   -1,   -1,
  326,  429,  328,  340,  341,   -1,  332,  344,   -1,   -1,
   -1,  348,  429,   -1,  340,  341,   -1,   -1,  344,  265,
   -1,  267,  348,   -1,  270,   -1,   -1,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  289,  381,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,
  397,  307,   -1,  265,   -1,  267,  312,   -1,  270,   -1,
   -1,  397,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  326,   -1,  328,   -1,   -1,   -1,  332,  289,   -1,   -1,
   -1,   -1,  429,   -1,  340,  341,   -1,   -1,  344,   -1,
  302,   -1,  348,  429,   -1,  307,   -1,   -1,   -1,   -1,
  312,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,  326,  279,  328,   -1,   -1,   -1,
  332,   -1,   -1,   -1,   -1,  289,   -1,   -1,  340,  341,
   -1,   -1,  344,   -1,   -1,   -1,  348,   -1,  302,   -1,
   -1,  397,   -1,  307,   -1,  265,   -1,  267,  312,   -1,
  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  326,   -1,  328,   -1,   -1,   -1,  332,  289,
   -1,   -1,   -1,  429,   -1,   -1,  340,  341,   -1,   -1,
  344,   -1,  302,   -1,  348,  397,   -1,  307,   -1,   -1,
   -1,   -1,  312,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,   -1,   -1,   -1,  275,  326,   -1,  328,  279,
   -1,   -1,  332,   -1,   -1,   -1,   -1,  429,   -1,  289,
  340,  341,   -1,   -1,  344,   -1,   -1,   -1,  348,   -1,
   -1,   -1,  302,  397,   -1,   -1,   -1,  307,   -1,  265,
   -1,  267,  312,   -1,  270,   -1,   -1,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  326,   -1,  328,   -1,
   -1,   -1,  332,  289,   -1,  429,   -1,   -1,   -1,   -1,
  340,  341,   -1,   -1,  344,   -1,  302,  397,  348,   -1,
   -1,  307,   -1,   -1,   -1,   -1,  312,  265,   -1,  267,
   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,
  326,  279,  328,   -1,   -1,   -1,  332,   -1,   -1,  429,
   -1,  289,   -1,   -1,  340,  341,   -1,   -1,  344,   -1,
   -1,   -1,  348,   -1,  302,   -1,   -1,  397,   -1,  307,
   -1,  265,   -1,  267,  312,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  326,   -1,
  328,   -1,   -1,   -1,  332,  289,   -1,   -1,   -1,  429,
   -1,   -1,  340,  341,   -1,   -1,  344,   -1,  302,   -1,
  348,  397,   -1,  307,   -1,   -1,   -1,   -1,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,  256,   -1,   -1,  332,   -1,
  261,   -1,   -1,  429,   -1,   -1,  340,  341,   -1,   -1,
  344,  272,  273,   -1,  348,   -1,  277,   -1,   -1,  397,
   -1,  282,  283,  284,   -1,   -1,   -1,  288,   -1,   -1,
   -1,  292,  293,  294,   -1,   -1,  297,   -1,   -1,   -1,
  301,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,  310,
   -1,  429,  313,   -1,  315,   -1,   -1,  318,  319,  320,
  321,  322,   -1,  397,   -1,   -1,  327,   -1,  261,   -1,
  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,  272,
   -1,   -1,  343,   -1,  277,  346,  347,   -1,  349,  282,
   -1,   -1,  353,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,
  303,  304,  373,   -1,   -1,   -1,  309,  310,  379,  380,
   -1,   -1,  315,   -1,   -1,  318,   -1,  320,  321,  322,
   -1,   -1,   -1,   -1,  327,   -1,  261,   -1,  331,   -1,
  333,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,
  343,   -1,  277,   -1,  347,   -1,  349,  282,   -1,   -1,
  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,  303,  304,
  373,   -1,   -1,   -1,  309,  310,  379,  380,   -1,   -1,
  315,   -1,  261,  318,  263,  320,  321,  322,   -1,   -1,
   -1,   -1,  327,   -1,   -1,   -1,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,
  304,   -1,  347,   -1,  349,  309,  310,   -1,  353,   -1,
   -1,  315,   -1,   -1,  318,  304,  320,  321,  322,   -1,
  309,  310,   -1,  327,   -1,   -1,  315,  331,  373,  318,
   -1,  320,  321,  322,  379,  380,   -1,   -1,  327,  343,
  261,   -1,  331,  347,   -1,  349,   -1,   -1,   -1,   -1,
   -1,  272,  273,   -1,  343,   -1,  277,   -1,  347,   -1,
  349,  282,  283,  284,   -1,   -1,   -1,  288,   -1,  373,
   -1,  292,  293,  294,   -1,   -1,  297,   -1,   -1,   -1,
  301,   -1,  303,  304,  373,   -1,   -1,   -1,  309,  310,
  379,  380,  313,   -1,  315,   -1,   -1,  318,  319,  320,
  321,  322,   -1,   -1,   -1,   -1,  327,   -1,  261,   -1,
  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,  343,   -1,  277,  346,  347,   -1,  349,  282,
  283,  284,  353,   -1,   -1,  288,   -1,   -1,   -1,  292,
  293,  294,   -1,   -1,  297,   -1,   -1,   -1,  301,   -1,
  303,  304,  373,   -1,   -1,   -1,  309,  310,  379,   -1,
  313,   -1,  315,   -1,   -1,  318,  319,  320,  321,  322,
   -1,   -1,   -1,   -1,  327,   -1,  261,   -1,  331,   -1,
  333,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,
  343,   -1,  277,  346,  347,   -1,  349,  282,  283,  284,
  353,   -1,   -1,  288,   -1,   -1,   -1,  292,  293,  294,
   -1,   -1,  297,   -1,   -1,   -1,  301,   -1,  303,  304,
  373,   -1,   -1,   -1,  309,  310,  379,   -1,  313,   -1,
  315,   -1,   -1,  318,  319,  320,  321,  322,   -1,   -1,
   -1,   -1,  327,   -1,  261,   -1,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,  343,   -1,
  277,  346,  347,   -1,  349,  282,  283,  284,  353,   -1,
   -1,  288,   -1,   -1,   -1,  292,  293,  294,   -1,   -1,
  297,   -1,   -1,   -1,  301,   -1,  303,  304,  373,   -1,
   -1,   -1,  309,  310,  379,   -1,  313,   -1,  315,   -1,
   -1,  318,  319,  320,  321,  322,  261,   -1,   -1,   -1,
  327,   -1,   -1,   -1,  331,   -1,  333,  272,   -1,   -1,
   -1,   -1,  277,   -1,   -1,   -1,  343,  282,   -1,  346,
  347,   -1,  349,   -1,   -1,   -1,  353,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,  304,
   -1,   -1,   -1,  261,  309,  310,  373,   -1,   -1,   -1,
  315,   -1,  379,  318,  272,  320,  321,  322,   -1,  277,
   -1,   -1,  327,   -1,  282,   -1,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,
   -1,   -1,  347,   -1,  349,  303,  304,   -1,  353,   -1,
  261,  309,  310,   -1,   -1,   -1,   -1,  315,   -1,   -1,
  318,   -1,  320,  321,  322,  261,   -1,   -1,  373,  327,
   -1,   -1,   -1,  331,  379,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  343,   -1,   -1,   -1,  347,
   -1,  349,   -1,  304,   -1,  353,   -1,   -1,  309,  310,
  261,   -1,  263,   -1,  315,   -1,   -1,  318,  304,  320,
  321,  322,   -1,  309,  310,  373,  327,   -1,   -1,  315,
  331,  379,  318,   -1,  320,  321,  322,   -1,   -1,  325,
   -1,  327,  343,   -1,   -1,  331,  347,   -1,  349,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,  343,  309,  310,
   -1,  347,   -1,  349,  315,   -1,   -1,  318,   -1,  320,
  321,  322,  373,   -1,  375,  376,  327,   -1,  379,   -1,
  331,  263,   -1,   -1,   -1,   -1,   -1,  373,   -1,   -1,
  272,  273,  343,  379,   -1,  277,  347,   -1,  349,   -1,
  282,  283,  284,   -1,   -1,   -1,  288,   -1,   -1,   -1,
  292,  293,  294,  261,   -1,  297,   -1,   -1,   -1,  301,
   -1,  303,  373,   -1,  272,   -1,   -1,   -1,  379,  277,
   -1,  313,   -1,   -1,  282,   -1,   -1,  319,   -1,   -1,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,
   -1,  309,  310,  261,  346,  263,   -1,  315,   -1,   -1,
  318,  353,  320,  321,  322,   -1,   -1,   -1,   -1,  327,
   -1,   -1,   -1,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,  376,  343,   -1,   -1,   -1,  347,
   -1,  349,   -1,   -1,   -1,  353,  304,   -1,   -1,   -1,
   -1,  309,  310,   -1,   -1,   -1,   -1,  315,   -1,   -1,
  318,   -1,  320,  321,  322,  373,   -1,  325,   -1,  327,
   -1,   -1,   -1,  331,   -1,   -1,  272,  273,   -1,   -1,
   -1,  277,   -1,   -1,   -1,  343,  282,  283,  284,  347,
   -1,  349,  288,   -1,   -1,   -1,  292,  293,  294,   -1,
   -1,  297,   -1,   -1,   -1,  301,   -1,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  373,   -1,  313,   -1,   -1,
  273,   -1,   -1,  319,  277,   -1,   -1,   -1,   -1,  282,
  283,  284,   -1,   -1,   -1,  288,   -1,  333,   -1,  292,
  293,  294,   -1,  273,  297,   -1,   -1,  277,  301,   -1,
  346,   -1,  282,  283,  284,   -1,   -1,  353,  288,   -1,
  313,   -1,  292,  293,  294,   -1,  319,  297,   -1,   -1,
   -1,  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,   -1,  319,
   -1,   -1,   -1,  346,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  346,   -1,   -1,   -1,
   -1,   -1,   -1,  353,
  };

//#line 6693 "as-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static ActionScriptParser ()
{
	oob_stack = new Stack<object> ();
}

public ActionScriptParser (SeekableStreamReader reader, CompilationSourceFile file)
	: this (reader, file, file.Compiler.Report)
{
}

public ActionScriptParser (SeekableStreamReader reader, CompilationSourceFile file, Report report)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file);

#if FULL_AST
	lbag = new LocationsBag ();
#else
	lbag = null;
#endif
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

object ConvertAsType(SimpleName sn, object e)
{
	if (sn.Name == "Object") 
		return new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (e));
	else if (sn.Name == "Boolean") 
		return new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (e));
	else if (sn.Name == "Number")
		return new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (e));
	else if (sn.Name == "String")
		return new TypeExpression (compiler.BuiltinTypes.String, GetLocation (e));
	else if (sn.Name == "void")
		return new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (e));
	else if (sn.Name == "Function")
		return new TypeExpression (compiler.BuiltinTypes.Delegate, GetLocation (e));
	else
		return e;
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.SUPER:
		return "super";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.EACH:
		return "each";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTENDS:
		return "extends";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOR_EACH:
		return "for each";
	case Token.FUNCTION:
		return "function";
	case Token.FUNCTION_GET:
		return "function get";
	case Token.FUNCTION_SET:
		return "function set";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLEMENTS:
		return "implements";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INDEXER:
		return "indexer";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NATIVE:
		return "native";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROPERTY:
		return "property";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VAR:
		return "var";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
		return "[norm";
	case Token.OPEN_BRACKET_EXPR:
		return "[expr";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return ".<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
//#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int EACH = 280;
  public const int ELSE = 281;
  public const int ENUM = 282;
  public const int EVENT = 283;
  public const int EXPLICIT = 284;
  public const int EXTENDS = 285;
  public const int FALSE = 286;
  public const int FINALLY = 287;
  public const int FIXED = 288;
  public const int FLOAT = 289;
  public const int FOR = 290;
  public const int FOR_EACH = 291;
  public const int FUNCTION = 292;
  public const int FUNCTION_GET = 293;
  public const int FUNCTION_SET = 294;
  public const int GOTO = 295;
  public const int IF = 296;
  public const int IMPLICIT = 297;
  public const int IMPLEMENTS = 298;
  public const int IMPORT = 299;
  public const int IN = 300;
  public const int INDEXER = 301;
  public const int INT = 302;
  public const int INTERFACE = 303;
  public const int INTERNAL = 304;
  public const int IS = 305;
  public const int LOCK = 306;
  public const int LONG = 307;
  public const int NAMESPACE = 308;
  public const int NATIVE = 309;
  public const int NEW = 310;
  public const int NULL = 311;
  public const int OBJECT = 312;
  public const int OPERATOR = 313;
  public const int OUT = 314;
  public const int OVERRIDE = 315;
  public const int PACKAGE = 316;
  public const int PARAMS = 317;
  public const int PRIVATE = 318;
  public const int PROPERTY = 319;
  public const int PROTECTED = 320;
  public const int PUBLIC = 321;
  public const int READONLY = 322;
  public const int REF = 323;
  public const int RETURN = 324;
  public const int REMOVE = 325;
  public const int SBYTE = 326;
  public const int SEALED = 327;
  public const int SHORT = 328;
  public const int SIZEOF = 329;
  public const int STACKALLOC = 330;
  public const int STATIC = 331;
  public const int STRING = 332;
  public const int STRUCT = 333;
  public const int SWITCH = 334;
  public const int THIS = 335;
  public const int THROW = 336;
  public const int TRUE = 337;
  public const int TRY = 338;
  public const int TYPEOF = 339;
  public const int UINT = 340;
  public const int ULONG = 341;
  public const int UNCHECKED = 342;
  public const int UNSAFE = 343;
  public const int USHORT = 344;
  public const int USING = 345;
  public const int VAR = 346;
  public const int VIRTUAL = 347;
  public const int VOID = 348;
  public const int VOLATILE = 349;
  public const int WHERE = 350;
  public const int WHILE = 351;
  public const int ARGLIST = 352;
  public const int PARTIAL = 353;
  public const int ARROW = 354;
  public const int FROM = 355;
  public const int FROM_FIRST = 356;
  public const int JOIN = 357;
  public const int ON = 358;
  public const int EQUALS = 359;
  public const int SELECT = 360;
  public const int GROUP = 361;
  public const int BY = 362;
  public const int LET = 363;
  public const int ORDERBY = 364;
  public const int ASCENDING = 365;
  public const int DESCENDING = 366;
  public const int INTO = 367;
  public const int INTERR_NULLABLE = 368;
  public const int EXTERN = 369;
  public const int REFVALUE = 370;
  public const int REFTYPE = 371;
  public const int MAKEREF = 372;
  public const int ASYNC = 373;
  public const int AWAIT = 374;
  public const int GET = 375;
  public const int SET = 376;
  public const int LAST_KEYWORD = 377;
  public const int OPEN_BRACE = 378;
  public const int CLOSE_BRACE = 379;
  public const int OPEN_BRACKET = 380;
  public const int CLOSE_BRACKET = 381;
  public const int OPEN_PARENS = 382;
  public const int CLOSE_PARENS = 383;
  public const int DOT = 384;
  public const int COMMA = 385;
  public const int COLON = 386;
  public const int SEMICOLON = 387;
  public const int TILDE = 388;
  public const int PLUS = 389;
  public const int MINUS = 390;
  public const int BANG = 391;
  public const int ASSIGN = 392;
  public const int OP_LT = 393;
  public const int OP_GT = 394;
  public const int BITWISE_AND = 395;
  public const int BITWISE_OR = 396;
  public const int STAR = 397;
  public const int PERCENT = 398;
  public const int DIV = 399;
  public const int CARRET = 400;
  public const int INTERR = 401;
  public const int DOUBLE_COLON = 402;
  public const int OP_INC = 403;
  public const int OP_DEC = 404;
  public const int OP_SHIFT_LEFT = 405;
  public const int OP_SHIFT_RIGHT = 406;
  public const int OP_LE = 407;
  public const int OP_GE = 408;
  public const int OP_EQ = 409;
  public const int OP_NE = 410;
  public const int OP_AND = 411;
  public const int OP_OR = 412;
  public const int OP_MULT_ASSIGN = 413;
  public const int OP_DIV_ASSIGN = 414;
  public const int OP_MOD_ASSIGN = 415;
  public const int OP_ADD_ASSIGN = 416;
  public const int OP_SUB_ASSIGN = 417;
  public const int OP_SHIFT_LEFT_ASSIGN = 418;
  public const int OP_SHIFT_RIGHT_ASSIGN = 419;
  public const int OP_AND_ASSIGN = 420;
  public const int OP_XOR_ASSIGN = 421;
  public const int OP_OR_ASSIGN = 422;
  public const int OP_PTR = 423;
  public const int OP_COALESCING = 424;
  public const int OP_GENERICS_LT = 425;
  public const int OP_GENERICS_LT_DECL = 426;
  public const int OP_GENERICS_GT = 427;
  public const int LITERAL = 428;
  public const int IDENTIFIER = 429;
  public const int OPEN_PARENS_LAMBDA = 430;
  public const int OPEN_PARENS_CAST = 431;
  public const int GENERIC_DIMENSION = 432;
  public const int DEFAULT_COLON = 433;
  public const int OPEN_BRACKET_EXPR = 434;
  public const int EVAL_STATEMENT_PARSER = 435;
  public const int EVAL_COMPILATION_UNIT_PARSER = 436;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 437;
  public const int DOC_SEE = 438;
  public const int GENERATE_COMPLETION = 439;
  public const int COMPLETE_COMPLETION = 440;
  public const int UMINUS = 441;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
