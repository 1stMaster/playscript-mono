// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "as-parser.jay"
//
// as-parser.jay: The Parser for the ActionScript compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//			Ben Cooley		(bcooley@zynga.com) - ActionScript
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using Mono.CSharp;
using Linq = Mono.CSharp.Linq;
using Enum = Mono.CSharp.Enum;
using Attribute = Mono.CSharp.Attribute;
using Delegate = Mono.CSharp.Delegate;
using Nullable = Mono.CSharp.Nullable;

namespace Mono.ActionScript
{
	/// <summary>
	///    The ActionScript Parser
	/// </summary>
	public class ActionScriptParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		const string RootNs = "_root";
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives package_declaration opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "import_directives : import_directive",
//t    "import_directives : import_directives import_directive",
//t    "import_directive : import_package",
//t    "import_package : IMPORT namespace_or_type_expr DOT STAR SEMICOLON",
//t    "import_package : IMPORT typeof_type_expression SEMICOLON",
//t    "import_package : IMPORT IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "import_package : IMPORT error",
//t    "$$2 :",
//t    "$$3 :",
//t    "package_declaration : opt_attributes PACKAGE opt_package_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_package_type_declarations CLOSE_BRACE",
//t    "opt_package_name :",
//t    "opt_package_name : package_name",
//t    "package_name : IDENTIFIER",
//t    "package_name : package_name DOT IDENTIFIER",
//t    "package_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_using_directives :",
//t    "opt_using_directives : import_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_package_type_declarations :",
//t    "opt_package_type_declarations : package_type_declarations",
//t    "package_type_declarations : package_type_declaration",
//t    "package_type_declarations : package_type_declaration package_type_declaration",
//t    "package_type_declaration : type_declaration",
//t    "package_type_declaration : attribute_sections CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "$$12 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST IDENTIFIER COLON type $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers VAR IDENTIFIER COLON member_type $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$22 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers FUNCTION GET method_declaration_name OPEN_PARENS CLOSE_PARENS COLON member_type",
//t    "$$23 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION SET method_declaration_name OPEN_PARENS $$23 opt_formal_parameter_list CLOSE_PARENS COLON member_type",
//t    "$$24 :",
//t    "$$25 :",
//t    "$$26 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL FUNCTION $$24 method_declaration_name OPEN_PARENS $$25 opt_formal_parameter_list CLOSE_PARENS COLON VOID $$26 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers FUNCTION modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS COLON member_type",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name error",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON error",
//t    "$$27 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type ASSIGN $$27 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$28 :",
//t    "$$29 :",
//t    "$$30 :",
//t    "property_declaration : opt_attributes opt_modifiers PROPERTY member_declaration_name COLON member_type $$28 OPEN_BRACE $$29 accessor_declarations $$30 CLOSE_BRACE",
//t    "$$31 :",
//t    "$$32 :",
//t    "$$33 :",
//t    "indexer_declaration : opt_attributes opt_modifiers INDEXER indexer_declaration_name COLON member_type OPEN_BRACKET $$31 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$32 accessor_declarations $$33 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$34 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$34 accessor_body",
//t    "$$35 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$35 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$36 :",
//t    "$$37 :",
//t    "$$38 :",
//t    "$$39 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$36 type_declaration_name $$37 opt_class_base opt_type_parameter_constraints_clauses $$38 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$39 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$40 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$40 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$41 :",
//t    "operator_declarator : OPERATOR overloadable_operator OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS COLON operator_type",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$42 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS COLON type",
//t    "$$43 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR OPEN_PARENS $$43 opt_formal_parameter_list CLOSE_PARENS COLON type",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "$$44 :",
//t    "destructor_declaration : opt_attributes opt_modifiers FUNCTION TILDE $$44 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$45 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type $$45 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$46 :",
//t    "$$47 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type OPEN_BRACE $$46 event_accessor_declarations $$47 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$48 :",
//t    "opt_event_initializer : ASSIGN $$48 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$49 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$49 event_variable_initializer",
//t    "$$50 :",
//t    "event_variable_initializer : $$50 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$51 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$51 event_accessor_block",
//t    "$$52 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$52 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "$$53 :",
//t    "$$54 :",
//t    "$$55 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$53 OPEN_BRACE $$54 opt_enum_member_declarations $$55 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$56 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$56 ASSIGN constant_expression",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$57 :",
//t    "$$58 :",
//t    "$$59 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$57 opt_formal_parameter_list CLOSE_PARENS $$58 opt_type_parameter_constraints_clauses $$59 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$60 :",
//t    "type_declaration_name : IDENTIFIER $$60 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : namespace_or_type_expr pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : SUPER DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : SUPER OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$61 :",
//t    "new_expr_type : $$61 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$62 :",
//t    "typeof_expression : TYPEOF $$62 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : identifier_inside_body generic_dimension",
//t    "unbound_type_name : qualified_alias_member identifier_inside_body generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
//t    "unbound_type_name : namespace_or_type_expr DOT identifier_inside_body generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
//t    "$$63 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$63 block",
//t    "$$64 :",
//t    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$64 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$65 :",
//t    "anonymous_method_signature : OPEN_PARENS $$65 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression_or_error",
//t    "conditional_expression : null_coalescing_expression INTERR expression error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$66 :",
//t    "lambda_expression_body_simple : $$66 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$67 :",
//t    "lambda_expression : IDENTIFIER ARROW $$67 lambda_expression_body",
//t    "$$68 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$68 lambda_expression_body",
//t    "$$69 :",
//t    "$$70 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$69 opt_lambda_parameter_list CLOSE_PARENS ARROW $$70 lambda_expression_body",
//t    "$$71 :",
//t    "$$72 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$71 opt_lambda_parameter_list CLOSE_PARENS ARROW $$72 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$73 :",
//t    "$$74 :",
//t    "$$75 :",
//t    "$$76 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$73 type_declaration_name $$74 opt_class_base opt_type_parameter_constraints_clauses $$75 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$76 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : EXTENDS type_list",
//t    "opt_class_base : EXTENDS type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$77 :",
//t    "block : OPEN_BRACE $$77 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$78 :",
//t    "block_prepared : OPEN_BRACE $$78 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$79 :",
//t    "labeled_statement : identifier_inside_body COLON $$79 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "$$80 :",
//t    "block_variable_declaration : VAR identifier_inside_body COLON variable_type $$80 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$81 :",
//t    "block_variable_declaration : VAR identifier_inside_body $$81 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$82 :",
//t    "block_variable_declaration : CONST identifier_inside_body COLON variable_type $$82 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$83 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$83 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$84 :",
//t    "switch_section : switch_labels $$84 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "do_statement : DO embedded_statement error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$85 :",
//t    "for_statement : FOR open_parens_any $$85 for_statement_cont",
//t    "$$86 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$86 for_condition_and_iterator_part embedded_statement",
//t    "for_statement_cont : error",
//t    "$$87 :",
//t    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$87 for_iterator_part",
//t    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
//t    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
//t    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
//t    "close_parens_close_brace : CLOSE_PARENS",
//t    "close_parens_close_brace : CLOSE_BRACE",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$88 :",
//t    "for_initializer : variable_type identifier_inside_body $$88 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type error",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
//t    "$$89 :",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$89 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH block",
//t    "$$90 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$90 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$91 :",
//t    "unsafe_statement : UNSAFE $$91 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$92 :",
//t    "$$93 :",
//t    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$92 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$93 embedded_statement",
//t    "$$94 :",
//t    "$$95 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$94 using_initialization CLOSE_PARENS $$95 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$96 :",
//t    "from_clause : FROM identifier_inside_body IN $$96 expression_or_error",
//t    "$$97 :",
//t    "from_clause : FROM type identifier_inside_body IN $$97 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$98 :",
//t    "select_or_group_clause : SELECT $$98 expression_or_error",
//t    "$$99 :",
//t    "$$100 :",
//t    "select_or_group_clause : GROUP $$99 expression_or_error $$100 BY expression_or_error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$101 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$101 expression_or_error",
//t    "$$102 :",
//t    "where_clause : WHERE $$102 expression_or_error",
//t    "$$103 :",
//t    "$$104 :",
//t    "$$105 :",
//t    "join_clause : JOIN identifier_inside_body IN $$103 expression_or_error ON $$104 expression_or_error EQUALS $$105 expression_or_error opt_join_into",
//t    "$$106 :",
//t    "$$107 :",
//t    "$$108 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$106 expression_or_error ON $$107 expression_or_error EQUALS $$108 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$109 :",
//t    "orderby_clause : ORDERBY $$109 orderings",
//t    "orderings : order_by",
//t    "$$110 :",
//t    "orderings : order_by COMMA $$110 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$111 :",
//t    "orderings_then_by : orderings_then_by COMMA $$111 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$112 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$112 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER import_directives opt_COMPLETE_COMPLETION",
//t    "$$113 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$113 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives package_declaration",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$114 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$114 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$115 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$115 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTENDS","EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH",
    "FUNCTION","GOTO","IF","IMPLICIT","IMPLEMENTS","IMPORT","IN",
    "INDEXER","INT","INTERFACE","INTERNAL","IS","LOCK","LONG","NAMESPACE",
    "NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE","PACKAGE","PARAMS",
    "PRIVATE","PROPERTY","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VAR","VIRTUAL",
    "VOID","VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","GET",
    "SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 393 "as-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 394 "as-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 413 "as-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 458 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 29:
  case_29();
  break;
case 42:
  case_42();
  break;
case 43:
  case_43();
  break;
case 51:
  case_51();
  break;
case 52:
  case_52();
  break;
case 53:
#line 687 "as-parser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
#line 717 "as-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 58:
  case_58();
  break;
case 59:
#line 726 "as-parser.jay"
  { yyVal = "event"; }
  break;
case 60:
#line 727 "as-parser.jay"
  { yyVal = "return"; }
  break;
case 61:
  case_61();
  break;
case 62:
#line 744 "as-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 63:
  case_63();
  break;
case 64:
#line 758 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 65:
  case_65();
  break;
case 67:
#line 777 "as-parser.jay"
  { yyVal = null; }
  break;
case 68:
#line 781 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 69:
#line 786 "as-parser.jay"
  { yyVal = null; }
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
  case_72();
  break;
case 73:
  case_73();
  break;
case 74:
#line 828 "as-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 76:
#line 836 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 77:
  case_77();
  break;
case 78:
  case_78();
  break;
case 79:
#line 862 "as-parser.jay"
  { yyVal = null; }
  break;
case 80:
#line 866 "as-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 81:
#line 870 "as-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 84:
#line 882 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 85:
#line 886 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 96:
  case_96();
  break;
case 97:
#line 917 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 98:
#line 921 "as-parser.jay"
  { 
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 99:
  case_99();
  break;
case 100:
  case_100();
  break;
case 101:
  case_101();
  break;
case 102:
  case_102();
  break;
case 103:
#line 956 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 108:
#line 997 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 109:
#line 1001 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 110:
  case_110();
  break;
case 111:
#line 1017 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 112:
  case_112();
  break;
case 113:
  case_113();
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
  case_119();
  break;
case 120:
#line 1095 "as-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[0+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 122:
  case_122();
  break;
case 123:
  case_123();
  break;
case 126:
#line 1124 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 127:
#line 1128 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 128:
  case_128();
  break;
case 129:
#line 1141 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 130:
  case_130();
  break;
case 133:
#line 1160 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 134:
#line 1164 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 135:
  case_135();
  break;
case 136:
#line 1180 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 137:
  case_137();
  break;
case 138:
  case_138();
  break;
case 141:
  case_141();
  break;
case 142:
  case_142();
  break;
case 143:
  case_143();
  break;
case 144:
#line 1267 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 145:
#line 1271 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 146:
  case_146();
  break;
case 147:
  case_147();
  break;
case 148:
#line 1331 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 149:
  case_149();
  break;
case 150:
#line 1369 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 151:
  case_151();
  break;
case 152:
#line 1379 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 153:
  case_153();
  break;
case 154:
  case_154();
  break;
case 155:
  case_155();
  break;
case 157:
#line 1444 "as-parser.jay"
  { yyVal = null; }
  break;
case 158:
#line 1448 "as-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 160:
  case_160();
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 164:
  case_164();
  break;
case 165:
  case_165();
  break;
case 166:
  case_166();
  break;
case 167:
#line 1506 "as-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 168:
#line 1510 "as-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 169:
  case_169();
  break;
case 170:
  case_170();
  break;
case 171:
  case_171();
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 174:
  case_174();
  break;
case 175:
#line 1583 "as-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 176:
  case_176();
  break;
case 177:
#line 1624 "as-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 179:
#line 1632 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
#line 1721 "as-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 190:
  case_190();
  break;
case 191:
  case_191();
  break;
case 192:
  case_192();
  break;
case 193:
  case_193();
  break;
case 194:
  case_194();
  break;
case 195:
#line 1773 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 196:
  case_196();
  break;
case 197:
#line 1802 "as-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 198:
  case_198();
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 209:
  case_209();
  break;
case 210:
  case_210();
  break;
case 211:
#line 1947 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 212:
  case_212();
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
#line 1982 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 219:
#line 1994 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 220:
#line 1998 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 221:
#line 2005 "as-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 222:
#line 2009 "as-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 227:
#line 2017 "as-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 228:
#line 2025 "as-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 229:
#line 2031 "as-parser.jay"
  {
	  }
  break;
case 230:
  case_230();
  break;
case 232:
#line 2061 "as-parser.jay"
  { yyVal = null; }
  break;
case 234:
  case_234();
  break;
case 235:
#line 2077 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 236:
  case_236();
  break;
case 238:
#line 2123 "as-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 239:
#line 2124 "as-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 240:
#line 2125 "as-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 241:
#line 2126 "as-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 242:
#line 2127 "as-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 243:
#line 2128 "as-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 244:
#line 2130 "as-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 245:
#line 2131 "as-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 246:
#line 2133 "as-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 247:
#line 2134 "as-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 248:
#line 2135 "as-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 249:
#line 2136 "as-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 250:
#line 2137 "as-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 251:
#line 2138 "as-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 252:
#line 2139 "as-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 253:
#line 2140 "as-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 254:
#line 2141 "as-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 255:
#line 2142 "as-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 256:
#line 2143 "as-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 257:
#line 2144 "as-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 258:
#line 2145 "as-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 259:
#line 2146 "as-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 260:
#line 2153 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 261:
  case_261();
  break;
case 262:
#line 2172 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 263:
  case_263();
  break;
case 264:
  case_264();
  break;
case 265:
  case_265();
  break;
case 266:
  case_266();
  break;
case 267:
  case_267();
  break;
case 268:
  case_268();
  break;
case 269:
  case_269();
  break;
case 270:
  case_270();
  break;
case 271:
  case_271();
  break;
case 272:
  case_272();
  break;
case 274:
#line 2427 "as-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 275:
  case_275();
  break;
case 278:
#line 2444 "as-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 279:
#line 2448 "as-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 280:
  case_280();
  break;
case 281:
#line 2461 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 282:
  case_282();
  break;
case 283:
  case_283();
  break;
case 284:
#line 2486 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 287:
  case_287();
  break;
case 288:
  case_288();
  break;
case 289:
  case_289();
  break;
case 290:
  case_290();
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 306:
#line 2648 "as-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 310:
  case_310();
  break;
case 311:
  case_311();
  break;
case 313:
#line 2707 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 314:
  case_314();
  break;
case 315:
#line 2726 "as-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 316:
  case_316();
  break;
case 318:
  case_318();
  break;
case 320:
  case_320();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 328:
  case_328();
  break;
case 329:
#line 2826 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 333:
  case_333();
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 340:
  case_340();
  break;
case 341:
  case_341();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 346:
#line 2944 "as-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 347:
#line 2951 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 349:
  case_349();
  break;
case 351:
  case_351();
  break;
case 353:
  case_353();
  break;
case 355:
#line 2989 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 356:
  case_356();
  break;
case 357:
#line 3008 "as-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 358:
  case_358();
  break;
case 359:
#line 3017 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 360:
#line 3021 "as-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
#line 3054 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 365:
#line 3055 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 366:
#line 3056 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 367:
#line 3057 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 368:
#line 3058 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 369:
#line 3059 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 371:
#line 3064 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 372:
#line 3065 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 373:
#line 3066 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 374:
#line 3067 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 375:
#line 3068 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 376:
#line 3069 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 377:
#line 3070 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 378:
#line 3071 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 379:
#line 3072 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 400:
  case_400();
  break;
case 401:
  case_401();
  break;
case 405:
#line 3119 "as-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
#line 3123 "as-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
#line 3124 "as-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 412:
  case_412();
  break;
case 413:
#line 3157 "as-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 414:
  case_414();
  break;
case 415:
  case_415();
  break;
case 416:
  case_416();
  break;
case 417:
  case_417();
  break;
case 418:
#line 3189 "as-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 419:
  case_419();
  break;
case 420:
#line 3197 "as-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 421:
  case_421();
  break;
case 422:
  case_422();
  break;
case 423:
  case_423();
  break;
case 424:
#line 3221 "as-parser.jay"
  { yyVal = null; }
  break;
case 426:
  case_426();
  break;
case 427:
  case_427();
  break;
case 428:
#line 3244 "as-parser.jay"
  { yyVal = null; }
  break;
case 429:
#line 3248 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 430:
  case_430();
  break;
case 431:
  case_431();
  break;
case 432:
  case_432();
  break;
case 433:
  case_433();
  break;
case 434:
#line 3280 "as-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 435:
  case_435();
  break;
case 436:
  case_436();
  break;
case 437:
  case_437();
  break;
case 440:
#line 3308 "as-parser.jay"
  { yyVal = null; }
  break;
case 442:
  case_442();
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
  case_446();
  break;
case 447:
#line 3359 "as-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
  case_454();
  break;
case 456:
  case_456();
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
  case_463();
  break;
case 464:
#line 3454 "as-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 466:
#line 3462 "as-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 467:
  case_467();
  break;
case 468:
  case_468();
  break;
case 469:
#line 3482 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 470:
#line 3489 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 476:
  case_476();
  break;
case 477:
  case_477();
  break;
case 478:
#line 3556 "as-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 479:
  case_479();
  break;
case 480:
  case_480();
  break;
case 483:
#line 3583 "as-parser.jay"
  { yyVal = null; }
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
  case_487();
  break;
case 488:
  case_488();
  break;
case 489:
  case_489();
  break;
case 490:
  case_490();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
#line 3659 "as-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 498:
#line 3663 "as-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 499:
#line 3670 "as-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 500:
#line 3674 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 503:
  case_503();
  break;
case 504:
  case_504();
  break;
case 505:
#line 3717 "as-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 506:
  case_506();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 513:
  case_513();
  break;
case 514:
  case_514();
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
  case_517();
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
  case_520();
  break;
case 521:
#line 3831 "as-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 522:
#line 3835 "as-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 523:
#line 3839 "as-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 524:
#line 3843 "as-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 525:
#line 3850 "as-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 527:
#line 3858 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 528:
  case_528();
  break;
case 529:
  case_529();
  break;
case 531:
#line 3882 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 532:
#line 3886 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 536:
#line 3922 "as-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 537:
#line 3926 "as-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 538:
#line 3930 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 539:
#line 3934 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 540:
#line 3938 "as-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 541:
#line 3942 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 543:
  case_543();
  break;
case 544:
  case_544();
  break;
case 545:
  case_545();
  break;
case 547:
  case_547();
  break;
case 548:
#line 3974 "as-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 549:
  case_549();
  break;
case 550:
#line 3983 "as-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 551:
#line 3987 "as-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 553:
  case_553();
  break;
case 554:
  case_554();
  break;
case 556:
  case_556();
  break;
case 557:
  case_557();
  break;
case 558:
  case_558();
  break;
case 559:
  case_559();
  break;
case 561:
  case_561();
  break;
case 562:
  case_562();
  break;
case 564:
  case_564();
  break;
case 566:
  case_566();
  break;
case 568:
  case_568();
  break;
case 570:
  case_570();
  break;
case 572:
  case_572();
  break;
case 574:
  case_574();
  break;
case 576:
  case_576();
  break;
case 577:
  case_577();
  break;
case 578:
#line 4116 "as-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 582:
  case_582();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 585:
  case_585();
  break;
case 586:
  case_586();
  break;
case 587:
  case_587();
  break;
case 588:
  case_588();
  break;
case 589:
  case_589();
  break;
case 590:
  case_590();
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
  case_593();
  break;
case 594:
#line 4211 "as-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 595:
  case_595();
  break;
case 598:
#line 4226 "as-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 599:
  case_599();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
#line 4271 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
#line 4285 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 617:
#line 4310 "as-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 620:
  case_620();
  break;
case 622:
#line 4339 "as-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 623:
#line 4352 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
  case_627();
  break;
case 628:
#line 4393 "as-parser.jay"
  { yyVal = null; }
  break;
case 629:
#line 4395 "as-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 630:
  case_630();
  break;
case 631:
#line 4408 "as-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 633:
  case_633();
  break;
case 634:
  case_634();
  break;
case 635:
  case_635();
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 650:
#line 4519 "as-parser.jay"
  {
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 651:
  case_651();
  break;
case 653:
#line 4533 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
#line 4625 "as-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 663:
#line 4629 "as-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 664:
#line 4636 "as-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 665:
  case_665();
  break;
case 666:
#line 4650 "as-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 667:
#line 4654 "as-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 668:
  case_668();
  break;
case 669:
#line 4679 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 678:
#line 4723 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 679:
#line 4727 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 681:
  case_681();
  break;
case 684:
#line 4751 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 685:
#line 4755 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 714:
  case_714();
  break;
case 715:
  case_715();
  break;
case 716:
  case_716();
  break;
case 717:
  case_717();
  break;
case 718:
  case_718();
  break;
case 721:
  case_721();
  break;
case 722:
  case_722();
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 725:
#line 4899 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 726:
#line 4903 "as-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 727:
  case_727();
  break;
case 729:
  case_729();
  break;
case 730:
#line 4924 "as-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 732:
  case_732();
  break;
case 733:
  case_733();
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
  case_737();
  break;
case 738:
  case_738();
  break;
case 740:
  case_740();
  break;
case 741:
  case_741();
  break;
case 745:
  case_745();
  break;
case 748:
  case_748();
  break;
case 749:
  case_749();
  break;
case 750:
#line 5044 "as-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 751:
#line 5048 "as-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 756:
  case_756();
  break;
case 758:
  case_758();
  break;
case 759:
  case_759();
  break;
case 760:
  case_760();
  break;
case 761:
#line 5093 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 762:
  case_762();
  break;
case 763:
#line 5103 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 764:
#line 5104 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 765:
  case_765();
  break;
case 766:
  case_766();
  break;
case 767:
  case_767();
  break;
case 770:
  case_770();
  break;
case 771:
  case_771();
  break;
case 772:
  case_772();
  break;
case 773:
#line 5179 "as-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 774:
  case_774();
  break;
case 775:
  case_775();
  break;
case 776:
  case_776();
  break;
case 778:
  case_778();
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 781:
#line 5230 "as-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 782:
#line 5234 "as-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 783:
  case_783();
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
#line 5268 "as-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 792:
  case_792();
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 798:
#line 5328 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 799:
  case_799();
  break;
case 800:
  case_800();
  break;
case 801:
  case_801();
  break;
case 802:
  case_802();
  break;
case 803:
#line 5369 "as-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 808:
#line 5397 "as-parser.jay"
  { lexer.putback ('}'); }
  break;
case 809:
#line 5401 "as-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 811:
  case_811();
  break;
case 812:
  case_812();
  break;
case 814:
#line 5422 "as-parser.jay"
  { yyVal = null; }
  break;
case 816:
#line 5427 "as-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 831:
  case_831();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 835:
  case_835();
  break;
case 836:
  case_836();
  break;
case 837:
  case_837();
  break;
case 838:
  case_838();
  break;
case 839:
  case_839();
  break;
case 840:
  case_840();
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 845:
#line 5623 "as-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 853:
#line 5672 "as-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 854:
  case_854();
  break;
case 855:
#line 5691 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 856:
  case_856();
  break;
case 857:
#line 5709 "as-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 858:
#line 5716 "as-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 859:
  case_859();
  break;
case 860:
#line 5726 "as-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 863:
  case_863();
  break;
case 864:
  case_864();
  break;
case 865:
  case_865();
  break;
case 866:
  case_866();
  break;
case 867:
  case_867();
  break;
case 868:
  case_868();
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 872:
  case_872();
  break;
case 873:
#line 5829 "as-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 874:
  case_874();
  break;
case 875:
  case_875();
  break;
case 876:
  case_876();
  break;
case 877:
  case_877();
  break;
case 878:
  case_878();
  break;
case 879:
  case_879();
  break;
case 880:
  case_880();
  break;
case 881:
  case_881();
  break;
case 882:
  case_882();
  break;
case 883:
#line 5929 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 884:
  case_884();
  break;
case 885:
#line 5944 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 886:
  case_886();
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 890:
  case_890();
  break;
case 891:
  case_891();
  break;
case 892:
#line 6006 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 893:
  case_893();
  break;
case 894:
  case_894();
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 898:
  case_898();
  break;
case 904:
#line 6060 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 905:
  case_905();
  break;
case 906:
#line 6079 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 907:
  case_907();
  break;
case 908:
  case_908();
  break;
case 909:
  case_909();
  break;
case 910:
  case_910();
  break;
case 911:
  case_911();
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 914:
  case_914();
  break;
case 915:
  case_915();
  break;
case 917:
#line 6223 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 918:
#line 6230 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 919:
  case_919();
  break;
case 921:
  case_921();
  break;
case 922:
  case_922();
  break;
case 924:
  case_924();
  break;
case 925:
  case_925();
  break;
case 926:
#line 6276 "as-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 927:
  case_927();
  break;
case 928:
  case_928();
  break;
case 929:
#line 6293 "as-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 930:
  case_930();
  break;
case 931:
  case_931();
  break;
case 933:
  case_933();
  break;
case 934:
  case_934();
  break;
case 937:
  case_937();
  break;
case 938:
  case_938();
  break;
case 946:
#line 6415 "as-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 947:
#line 6422 "as-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 948:
  case_948();
  break;
case 949:
  case_949();
  break;
case 950:
#line 6439 "as-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 951:
#line 6443 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 952:
  case_952();
  break;
case 953:
  case_953();
  break;
case 954:
  case_954();
  break;
case 955:
  case_955();
  break;
case 957:
#line 6479 "as-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 959:
#line 6487 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 960:
#line 6491 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 961:
#line 6498 "as-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 963:
  case_963();
  break;
case 964:
  case_964();
  break;
case 965:
  case_965();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 401 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
#line 415 "as-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 435 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 468 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 476 "as-parser.jay"
{
		var un = new UsingNamespace ((ATypeNameExpression) yyVals[-3+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]));
	  }

void case_19()
#line 483 "as-parser.jay"
{
		var ut = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing (ut);
		
		lbag.AddLocation (ut, GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
#line 490 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_21()
#line 503 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_22()
#line 516 "as-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = yyVals[0+yyTop] as MemberName;
		if (name == null) {
			name = new MemberName(RootNs);
		}
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
		var un = new UsingNamespace (new SimpleName (RootNs, GetLocation (yyVals[-2+yyTop])), GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing(un);
	  }

void case_23()
#line 549 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_24()
#line 554 "as-parser.jay"
{
	  	lbag.AddLocation (current_container, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[0+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_27()
#line 568 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_28()
#line 573 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_29()
#line 578 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_42()
#line 616 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_43()
#line 634 "as-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_51()
#line 667 "as-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }

void case_52()
#line 672 "as-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_54()
#line 689 "as-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_55()
#line 697 "as-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_56()
#line 704 "as-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }

void case_58()
#line 722 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_61()
#line 729 "as-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_63()
#line 746 "as-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_65()
#line 760 "as-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_70()
#line 788 "as-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_71()
#line 794 "as-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_72()
#line 800 "as-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_73()
#line 814 "as-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_77()
#line 838 "as-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_78()
#line 848 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_96()
#line 902 "as-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_99()
#line 924 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }

void case_100()
#line 938 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_101()
#line 943 "as-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_102()
#line 949 "as-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_104()
#line 963 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var mod = (Modifiers) yyVals[-4+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[0+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_105()
#line 976 "as-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-3+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
		current_field = null;
	  }

void case_110()
#line 1006 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_112()
#line 1019 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_113()
#line 1024 "as-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_116()
#line 1039 "as-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[0+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[0+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-4+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_117()
#line 1054 "as-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_118()
#line 1067 "as-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_119()
#line 1078 "as-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_122()
#line 1101 "as-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_123()
#line 1107 "as-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_128()
#line 1133 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_130()
#line 1143 "as-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_135()
#line 1169 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_137()
#line 1182 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_138()
#line 1188 "as-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_141()
#line 1198 "as-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_142()
#line 1207 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = yyVals[0+yyTop] as Method;
		if (m != null) {
			async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
			current_type.AddMember (m);
		}
	  }

void case_143()
#line 1219 "as-parser.jay"
{
	 	async_block = false;

		Method method = yyVals[-2+yyTop] as Method;
		if (method != null) {
			if (yyVals[0+yyTop] == null) {
				method.ParameterInfo.CheckParameters (method);
	
				if ((method.ModFlags & Modifiers.ASYNC) != 0) {
					report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
						method.GetSignatureForError ());
				}
			} else {
				method.Block = (ToplevelBlock) yyVals[0+yyTop];
				
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
						method.GetSignatureForError ());
				}
			}
		} else {
			Property.PropertyMethod propMethod = yyVals[-2+yyTop] as Property.PropertyMethod;
			
			if (yyVals[0+yyTop] != null) {
		  		propMethod.Block = (ToplevelBlock) yyVals[0+yyTop];			
		  	
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, propMethod.Block.StartLocation,
						"`{0}': interface members cannot have a definition", propMethod.GetSignatureForError ());
				}
			}
		}

		current_local_parameters = null;
		current_property = null;
	
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_146()
#line 1273 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-10+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-11+yyTop], yyVals[0+yyTop] != null);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
				     
		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_147()
#line 1295 "as-parser.jay"
{
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-4+yyTop];
		
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		} else {
			current_property = null;
		}
		
		if (current_property == null) {
			current_property = new Property (current_type, type, (Modifiers) yyVals[-7+yyTop], name, (Attributes) yyVals[-8+yyTop]);
			current_type.AddMember (current_property);
		}
		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-1+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[-6+yyTop]), "Property accessor already defined");
		}
		
		current_property.Get = new Property.GetMethod (current_property,
			(Modifiers) yyVals[-7+yyTop], (Attributes) yyVals[-8+yyTop], GetLocation (yyVals[-6+yyTop]));
	  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-1+yyTop]));
		current_local_parameters = current_property.Get.ParameterInfo;
		yyVal = current_property.Get;
	  }

void case_149()
#line 1333 "as-parser.jay"
{
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-6+yyTop];
		
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		} else {
			current_property = null;
		}
		
		if (current_property == null) {
			current_property = new Property (current_type, type, (Modifiers) yyVals[-9+yyTop], name, (Attributes) yyVals[-10+yyTop]);
			current_type.AddMember (current_property);
		}
		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[0+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[-8+yyTop]), "Property accessor already defined");
		}
		
		current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-9+yyTop],
			(ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-10+yyTop], GetLocation (yyVals[-8+yyTop]));
	  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];
		yyVal = current_property.Set;
	  }

void case_151()
#line 1372 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_153()
#line 1381 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var modifiers = (Modifiers) yyVals[-12+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-2+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-13+yyTop], yyVals[0+yyTop] != null);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-11+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_154()
#line 1408 "as-parser.jay"
{
		MemberName name = (MemberName) yyVals[-5+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-6+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-9+yyTop],
					    0, name, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop], false);

		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_155()
#line 1427 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop], false);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_160()
#line 1454 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_161()
#line 1459 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_162()
#line 1466 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_163()
#line 1472 "as-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_164()
#line 1479 "as-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_165()
#line 1489 "as-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_166()
#line 1495 "as-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_169()
#line 1512 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_170()
#line 1520 "as-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_171()
#line 1529 "as-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_172()
#line 1554 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[0+yyTop], lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], lt.Location);
	  }

void case_173()
#line 1559 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_174()
#line 1569 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])), lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], l);
	  }

void case_176()
#line 1585 "as-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-6+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, mod, (Attributes) yyVals[-7+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_180()
#line 1634 "as-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_181()
#line 1658 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_182()
#line 1665 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_183()
#line 1672 "as-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_184()
#line 1685 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_185()
#line 1690 "as-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_186()
#line 1697 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_187()
#line 1705 "as-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_188()
#line 1710 "as-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_190()
#line 1726 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_191()
#line 1736 "as-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_192()
#line 1741 "as-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-2+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-6+yyTop],
			(MemberName) yyVals[-4+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-5+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_193()
#line 1755 "as-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_194()
#line 1762 "as-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_196()
#line 1775 "as-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-7+yyTop], (Modifiers) yyVals[-9+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-10+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-8+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-6+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_198()
#line 1804 "as-parser.jay"
{
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]));
		current_property = null;		
	  }

void case_203()
#line 1823 "as-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_204()
#line 1837 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_205()
#line 1859 "as-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_206()
#line 1880 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_207()
#line 1907 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_209()
#line 1929 "as-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_210()
#line 1934 "as-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_212()
#line 1949 "as-parser.jay"
{
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_213()
#line 1955 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_214()
#line 1969 "as-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_215()
#line 1975 "as-parser.jay"
{
	    lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_230()
#line 2033 "as-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_234()
#line 2067 "as-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_236()
#line 2079 "as-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-7+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[0+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_261()
#line 2155 "as-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-6+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_263()
#line 2174 "as-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-6+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_264()
#line 2189 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_265()
#line 2195 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_266()
#line 2334 "as-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_267()
#line 2343 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-7+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-8+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_268()
#line 2368 "as-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_269()
#line 2382 "as-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_270()
#line 2395 "as-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-5+yyTop], (MemberName) yyVals[-3+yyTop], (Attributes) yyVals[-6+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_271()
#line 2403 "as-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_272()
#line 2410 "as-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_275()
#line 2429 "as-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_280()
#line 2453 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_282()
#line 2463 "as-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_283()
#line 2472 "as-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_287()
#line 2493 "as-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_288()
#line 2498 "as-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_289()
#line 2503 "as-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_290()
#line 2511 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_291()
#line 2523 "as-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_292()
#line 2539 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_293()
#line 2551 "as-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_294()
#line 2567 "as-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_296()
#line 2576 "as-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_297()
#line 2588 "as-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_298()
#line 2593 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_299()
#line 2605 "as-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_300()
#line 2611 "as-parser.jay"
{
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_302()
#line 2628 "as-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
		}
		yyVal = yyVals[0+yyTop];
	 }

void case_303()
#line 2636 "as-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_308()
#line 2654 "as-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_309()
#line 2662 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_310()
#line 2675 "as-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_311()
#line 2683 "as-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_314()
#line 2709 "as-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_316()
#line 2728 "as-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_318()
#line 2747 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_320()
#line 2758 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_322()
#line 2770 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_323()
#line 2779 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_325()
#line 2791 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_326()
#line 2798 "as-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_327()
#line 2806 "as-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_328()
#line 2812 "as-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_330()
#line 2828 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_331()
#line 2837 "as-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_333()
#line 2848 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_334()
#line 2857 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_335()
#line 2862 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_336()
#line 2870 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_337()
#line 2876 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_338()
#line 2884 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_340()
#line 2894 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_341()
#line 2905 "as-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_342()
#line 2911 "as-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_343()
#line 2921 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop]);
  	  }

void case_344()
#line 2926 "as-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, Variance.None);
  	  }

void case_349()
#line 2960 "as-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_351()
#line 2969 "as-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_353()
#line 2978 "as-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_356()
#line 2994 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_358()
#line 3010 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_361()
#line 3026 "as-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_362()
#line 3032 "as-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_363()
#line 3041 "as-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_400()
#line 3105 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_401()
#line 3109 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_412()
#line 3150 "as-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_414()
#line 3162 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_415()
#line 3168 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_416()
#line 3174 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_417()
#line 3180 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_419()
#line 3190 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_421()
#line 3198 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_422()
#line 3206 "as-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_423()
#line 3211 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_426()
#line 3227 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_427()
#line 3237 "as-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_430()
#line 3253 "as-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_431()
#line 3259 "as-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_432()
#line 3264 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_433()
#line 3272 "as-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_435()
#line 3281 "as-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_436()
#line 3289 "as-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_437()
#line 3296 "as-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_442()
#line 3314 "as-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_443()
#line 3320 "as-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_444()
#line 3329 "as-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_445()
#line 3343 "as-parser.jay"
{
	  	lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_446()
#line 3349 "as-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_451()
#line 3370 "as-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_452()
#line 3375 "as-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_453()
#line 3380 "as-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_454()
#line 3385 "as-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_456()
#line 3397 "as-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_457()
#line 3402 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_458()
#line 3407 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_459()
#line 3415 "as-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_460()
#line 3421 "as-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_461()
#line 3426 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_462()
#line 3434 "as-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_463()
#line 3440 "as-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_467()
#line 3467 "as-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_468()
#line 3472 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_471()
#line 3494 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_472()
#line 3507 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_473()
#line 3519 "as-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_474()
#line 3527 "as-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_475()
#line 3534 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_476()
#line 3541 "as-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_477()
#line 3546 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_479()
#line 3558 "as-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_480()
#line 3566 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_485()
#line 3589 "as-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_486()
#line 3595 "as-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_487()
#line 3604 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_488()
#line 3610 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_489()
#line 3616 "as-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_490()
#line 3621 "as-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_494()
#line 3636 "as-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_495()
#line 3644 "as-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_496()
#line 3649 "as-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_501()
#line 3679 "as-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_502()
#line 3686 "as-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_503()
#line 3700 "as-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_504()
#line 3706 "as-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_506()
#line 3719 "as-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_509()
#line 3730 "as-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_510()
#line 3738 "as-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_511()
#line 3744 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_512()
#line 3752 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_513()
#line 3758 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_514()
#line 3764 "as-parser.jay"
{
		var tne = (ATypeNameExpression) yyVals[-3+yyTop];
		if (tne.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (tne, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_515()
#line 3776 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_516()
#line 3786 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_517()
#line 3797 "as-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_518()
#line 3805 "as-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_519()
#line 3813 "as-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_520()
#line 3821 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_528()
#line 3860 "as-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_529()
#line 3868 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_533()
#line 3888 "as-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_534()
#line 3893 "as-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method is AnonymousMethodExpression) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_543()
#line 3948 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_544()
#line 3953 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_545()
#line 3958 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_547()
#line 3967 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_549()
#line 3976 "as-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_553()
#line 3993 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_554()
#line 3998 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_556()
#line 4007 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_557()
#line 4012 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_558()
#line 4017 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_559()
#line 4022 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_561()
#line 4031 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_562()
#line 4036 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_564()
#line 4045 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
#line 4054 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_568()
#line 4063 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_570()
#line 4072 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_572()
#line 4081 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_574()
#line 4090 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 4101 "as-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
#line 4106 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_579()
#line 4118 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 4123 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 4128 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
#line 4133 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 4138 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 4143 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_585()
#line 4148 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 4153 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
#line 4158 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 4163 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_589()
#line 4171 "as-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_590()
#line 4178 "as-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_591()
#line 4192 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_592()
#line 4198 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_593()
#line 4204 "as-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_595()
#line 4212 "as-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_599()
#line 4228 "as-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_601()
#line 4239 "as-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_602()
#line 4247 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_603()
#line 4253 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_604()
#line 4258 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_605()
#line 4264 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_607()
#line 4273 "as-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_608()
#line 4278 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_610()
#line 4287 "as-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_611()
#line 4292 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_618()
#line 4315 "as-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_619()
#line 4320 "as-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_620()
#line 4325 "as-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_624()
#line 4354 "as-parser.jay"
{
		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
	  }

void case_625()
#line 4364 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_626()
#line 4379 "as-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_627()
#line 4385 "as-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_630()
#line 4400 "as-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_633()
#line 4414 "as-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_634()
#line 4433 "as-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_635()
#line 4441 "as-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_636()
#line 4446 "as-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_637()
#line 4451 "as-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_638()
#line 4456 "as-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_639()
#line 4461 "as-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_640()
#line 4466 "as-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_641()
#line 4471 "as-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_642()
#line 4476 "as-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_643()
#line 4481 "as-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_644()
#line 4486 "as-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_645()
#line 4491 "as-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_646()
#line 4496 "as-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_647()
#line 4501 "as-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_648()
#line 4508 "as-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_651()
#line 4521 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_654()
#line 4538 "as-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_655()
#line 4544 "as-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_656()
#line 4563 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_657()
#line 4569 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_658()
#line 4579 "as-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_659()
#line 4585 "as-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_660()
#line 4611 "as-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_661()
#line 4618 "as-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_665()
#line 4638 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_668()
#line 4672 "as-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_670()
#line 4684 "as-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_671()
#line 4689 "as-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_672()
#line 4698 "as-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_673()
#line 4703 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_681()
#line 4730 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_714()
#line 4794 "as-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_715()
#line 4799 "as-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_716()
#line 4804 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_717()
#line 4812 "as-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_718()
#line 4820 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_721()
#line 4833 "as-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_722()
#line 4849 "as-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_723()
#line 4879 "as-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_724()
#line 4890 "as-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_727()
#line 4905 "as-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_729()
#line 4914 "as-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_732()
#line 4930 "as-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = Tokenizer.LocatedToken.Create ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_733()
#line 4940 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_734()
#line 4947 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_735()
#line 4953 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration (new VarExpr (GetLocation(yyVals[-1+yyTop])), li);
	  }

void case_736()
#line 4960 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_737()
#line 4966 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_738()
#line 4973 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_740()
#line 4983 "as-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		/* TODO: lbag*/
	  }

void case_741()
#line 4988 "as-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_745()
#line 5006 "as-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_748()
#line 5021 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_749()
#line 5030 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_756()
#line 5063 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_758()
#line 5076 "as-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_759()
#line 5081 "as-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_760()
#line 5089 "as-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_762()
#line 5095 "as-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_765()
#line 5113 "as-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementErrorExpression (yyVals[0+yyTop] as Expression);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_766()
#line 5126 "as-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_767()
#line 5134 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_770()
#line 5148 "as-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_771()
#line 5157 "as-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_772()
#line 5167 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_774()
#line 5181 "as-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_775()
#line 5187 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_776()
#line 5197 "as-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_778()
#line 5206 "as-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_779()
#line 5213 "as-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_780()
#line 5220 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new List<SwitchSection> ();
	  }

void case_783()
#line 5239 "as-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_784()
#line 5246 "as-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_785()
#line 5256 "as-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_786()
#line 5261 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_792()
#line 5280 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_793()
#line 5288 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_794()
#line 5298 "as-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_795()
#line 5303 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_796()
#line 5308 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_797()
#line 5318 "as-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }

void case_799()
#line 5334 "as-parser.jay"
{
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }

void case_800()
#line 5342 "as-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_801()
#line 5355 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_802()
#line 5363 "as-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_804()
#line 5373 "as-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_805()
#line 5382 "as-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_806()
#line 5387 "as-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_811()
#line 5407 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_812()
#line 5414 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_820()
#line 5438 "as-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_821()
#line 5454 "as-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_822()
#line 5467 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_823()
#line 5484 "as-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_824()
#line 5494 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_831()
#line 5517 "as-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_832()
#line 5525 "as-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_833()
#line 5530 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_834()
#line 5538 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_835()
#line 5544 "as-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_836()
#line 5549 "as-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_837()
#line 5557 "as-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_838()
#line 5562 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_839()
#line 5570 "as-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_840()
#line 5575 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_841()
#line 5583 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_842()
#line 5599 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_846()
#line 5625 "as-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_847()
#line 5630 "as-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_848()
#line 5635 "as-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_849()
#line 5643 "as-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_850()
#line 5650 "as-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [l.Count - 1].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_854()
#line 5674 "as-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_856()
#line 5693 "as-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_859()
#line 5721 "as-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_861()
#line 5731 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_862()
#line 5739 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_863()
#line 5749 "as-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_864()
#line 5759 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_865()
#line 5764 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_866()
#line 5776 "as-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_867()
#line 5786 "as-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_868()
#line 5791 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_869()
#line 5800 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_870()
#line 5808 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_872()
#line 5819 "as-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_874()
#line 5831 "as-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_875()
#line 5842 "as-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_876()
#line 5854 "as-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_877()
#line 5865 "as-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_878()
#line 5872 "as-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_879()
#line 5881 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_880()
#line 5889 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_881()
#line 5904 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_882()
#line 5912 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_884()
#line 5931 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_886()
#line 5946 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_887()
#line 5963 "as-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_888()
#line 5978 "as-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_890()
#line 5991 "as-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_891()
#line 5996 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_893()
#line 6008 "as-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_894()
#line 6015 "as-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_895()
#line 6023 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_896()
#line 6030 "as-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_898()
#line 6042 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_905()
#line 6062 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_907()
#line 6081 "as-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_908()
#line 6091 "as-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_909()
#line 6099 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_910()
#line 6107 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_911()
#line 6115 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_912()
#line 6153 "as-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_913()
#line 6161 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_914()
#line 6169 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_915()
#line 6177 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_919()
#line 6232 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_921()
#line 6243 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_922()
#line 6250 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_924()
#line 6259 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_925()
#line 6266 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_927()
#line 6278 "as-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_928()
#line 6283 "as-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_930()
#line 6295 "as-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_931()
#line 6300 "as-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_933()
#line 6310 "as-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_934()
#line 6326 "as-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_937()
#line 6353 "as-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_type.AddMember (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_938()
#line 6381 "as-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_948()
#line 6424 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_949()
#line 6430 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_952()
#line 6445 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_953()
#line 6450 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_954()
#line 6458 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_955()
#line 6466 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_963()
#line 6504 "as-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_964()
#line 6510 "as-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_965()
#line 6519 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   15,   19,   20,    8,   18,   18,   22,   22,   22,   23,
   23,   24,   24,    7,    7,    6,    6,   21,   21,   25,
   25,   26,   26,   27,   27,   27,   27,   27,    9,    9,
   10,   10,   35,   33,   38,   34,   34,   36,   36,   36,
   36,   37,   37,   42,   39,   40,   41,   41,   43,   43,
   43,   43,   43,   44,   44,   48,   45,   47,   50,   50,
   50,   51,   51,   52,   52,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   66,   68,   70,   71,
   72,   29,   29,   75,   54,   76,   76,   77,   77,   78,
   80,   74,   74,   79,   79,   85,   55,   89,   55,   55,
   84,   92,   84,   86,   86,   93,   93,   94,   95,   94,
   90,   90,   96,   96,   97,   98,   88,   88,   91,   91,
   91,  101,   56,  104,  105,   99,   99,  106,   99,  107,
  108,  109,   99,   99,   99,  100,  100,  103,  103,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  113,
  113,  116,  116,  116,  119,  116,  117,  117,  120,  120,
  121,  121,  121,  114,  114,  114,  122,  122,  122,  115,
  124,  126,  127,   57,  129,  130,  131,   59,  125,  125,
  125,  125,  125,  135,  132,  136,  133,  134,  134,  134,
  137,  138,  139,  141,   30,   30,  140,  140,  142,  142,
  143,  143,  143,  143,  143,  143,  143,  143,  146,   60,
  145,  145,  147,  147,  150,  144,  144,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  152,
  151,  153,  151,  151,  151,  154,   61,  156,   58,  159,
  160,   58,  155,  162,  155,  157,  157,  163,  163,  164,
  165,  164,  166,  161,  158,  158,  158,  158,  158,  170,
  167,  171,  168,  169,  169,   62,  173,  175,  176,   31,
  172,  172,  172,  174,  174,  174,  177,  177,  178,  179,
  178,  178,  180,  181,  182,   32,  183,  183,   16,   16,
  184,  184,  187,  186,  186,  186,  188,  188,  190,   65,
  123,  102,  102,  128,  128,  191,  191,  191,  189,  189,
  192,  192,  193,  193,  195,  195,   83,   73,   73,   87,
   87,  118,  118,  148,  148,  196,  196,  196,  196,  196,
  200,  200,  201,  199,  199,  199,  199,  199,  199,  199,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  204,
  204,  204,  205,  205,  205,  225,  225,  226,  226,  227,
  227,  207,  207,  224,  224,  224,  224,  224,  224,  224,
  224,  209,  209,  230,  230,  231,  231,  232,  232,  234,
  234,  234,  235,  235,  235,  235,  235,  236,  236,  228,
  228,  229,  229,  229,  229,  229,  241,  241,  240,  240,
  242,  242,  242,  242,  243,  210,  210,  210,  239,  239,
  239,  244,  244,  245,  245,  211,  212,  212,  213,  214,
  215,  215,  206,  206,  206,  206,  206,  250,  246,  216,
  251,  251,  252,  252,  253,  253,  254,  254,  254,  254,
  247,  247,  197,  197,  249,  249,  255,  255,  248,  248,
   82,   82,  256,  256,  257,  217,   17,   17,   17,  258,
  258,  258,  258,  258,  259,  185,  218,  219,  220,  221,
  261,  222,  262,  222,  260,  260,  264,  263,  208,  265,
  265,  265,  265,  265,  266,  266,  266,  266,  266,  266,
  266,  267,  267,  267,  267,  268,  268,  268,  268,  268,
  268,  269,  269,  269,  270,  270,  270,  270,  270,  271,
  271,  271,  272,  272,  273,  273,  274,  274,  275,  275,
  276,  276,  277,  277,  278,  278,  278,  280,  280,  280,
  280,  280,  280,  280,  280,  280,  280,  280,  281,  281,
  282,  282,  282,  283,  283,  284,  284,  286,  285,  279,
  279,  288,  287,  289,  287,  290,  291,  287,  292,  293,
  287,   46,   46,  237,  237,  237,  237,  223,  223,  223,
   81,  295,  296,  297,  298,  299,   28,   64,   64,   63,
   63,  110,  110,  300,  300,  300,  300,  300,  300,  300,
  300,  300,  300,  300,  300,  300,  300,  300,   67,   67,
   67,   69,   69,  301,  301,  302,  302,  303,  303,  304,
  304,  304,  304,  194,  194,  305,  305,  307,  111,  308,
  308,  310,  309,  306,  306,  311,  311,  312,  312,  312,
  312,  316,  316,  317,  317,  317,  314,  314,  314,  314,
  314,  314,  314,  314,  314,  314,  314,  314,  314,  318,
  318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
  318,  318,  332,  332,  332,  332,  319,  333,  315,  334,
  334,  335,  335,  335,  335,  335,  335,  198,  198,  336,
   49,   49,  338,  313,  340,  313,  342,  313,  337,  337,
  337,  339,  339,  346,  346,  345,  345,  347,  347,  341,
  341,  343,  343,  348,  348,  349,  344,  344,  344,  320,
  320,  320,  331,  331,  350,  351,  351,  321,  321,  352,
  352,  352,  355,  353,  353,  354,  354,  356,  356,  356,
  359,  357,  358,  358,  360,  360,  360,  322,  322,  322,
  322,  361,  361,  362,  362,  362,  366,  363,  369,  365,
  365,  372,  368,  368,  371,  371,  373,  373,  367,  367,
  376,  375,  375,  370,  370,  374,  374,  378,  377,  377,
  364,  364,  379,  364,  323,  323,  323,  323,  323,  323,
  380,  381,  381,  382,  382,  382,  383,  383,  384,  384,
  385,  385,  386,  386,  324,  324,  324,  324,  387,  387,
  389,  389,  388,  390,  388,  388,  325,  326,  391,  329,
  327,  327,  393,  394,  330,  396,  397,  328,  328,  328,
  395,  395,  392,  392,  294,  294,  294,  294,  398,  398,
  400,  400,  402,  401,  403,  401,  399,  399,  399,  399,
  399,  407,  405,  408,  409,  405,  404,  404,  410,  410,
  410,  410,  410,  415,  411,  416,  412,  417,  418,  419,
  413,  421,  422,  423,  413,  420,  420,  425,  414,  424,
  428,  424,  427,  430,  427,  426,  426,  426,  429,  429,
  429,  406,  431,  406,    3,    3,  432,    3,    3,  433,
  433,  238,  238,  233,  233,    5,  434,  434,  434,  434,
  438,  434,  434,  434,  434,  435,  435,  436,  439,  436,
  437,  437,  440,  440,  441,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    5,    3,    5,
    2,    0,    0,   10,    0,    1,    1,    3,    1,    0,
    1,    0,    1,    0,    1,    0,    1,    0,    1,    1,
    2,    1,    2,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    0,    3,    0,    6,    3,    1,    1,    1,
    1,    1,    3,    0,    3,    1,    0,    3,    0,    1,
    1,    3,    3,    1,    1,    0,    4,    4,    0,    1,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
    0,   16,    5,    0,   10,    0,    1,    1,    2,    3,
    0,    3,    1,    1,    1,    0,   10,    0,   10,    8,
    0,    0,    3,    0,    1,    1,    2,    2,    0,    5,
    0,    1,    1,    2,    3,    0,    4,    2,    1,    1,
    1,    0,    3,    0,    0,   12,    9,    0,   11,    0,
    0,    0,   14,   10,    5,    1,    1,    0,    1,    1,
    3,    3,    3,    5,    3,    5,    1,    1,    1,    1,
    3,    5,    2,    5,    0,    8,    0,    1,    1,    2,
    1,    1,    1,    4,    6,    4,    1,    2,    2,    1,
    0,    0,    0,   12,    0,    0,    0,   15,    1,    2,
    1,    2,    1,    0,    5,    0,    5,    1,    1,    1,
    0,    0,    0,    0,   15,    5,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    5,
    1,    1,    1,    1,    0,    8,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    8,    0,    8,    2,    2,    0,    9,    0,   10,    0,
    0,   11,    0,    0,    3,    0,    1,    1,    2,    2,
    0,    5,    0,    2,    2,    2,    1,    1,    1,    0,
    5,    0,    5,    1,    1,    2,    0,    0,    0,   12,
    0,    2,    2,    0,    1,    2,    1,    3,    2,    0,
    5,    1,    0,    0,    0,   13,    0,    1,    1,    3,
    1,    4,    2,    0,    3,    2,    1,    3,    0,    3,
    1,    1,    3,    1,    2,    3,    4,    4,    0,    3,
    1,    3,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    4,    4,    4,    3,    3,    4,    3,
    4,    4,    4,    0,    1,    3,    4,    0,    1,    1,
    3,    2,    3,    1,    2,    3,    2,    1,    1,    0,
    1,    1,    3,    3,    3,    2,    1,    1,    1,    1,
    2,    2,    4,    3,    1,    4,    4,    3,    1,    3,
    2,    1,    3,    1,    1,    1,    4,    3,    2,    2,
    6,    3,    7,    4,    3,    7,    3,    0,    2,    4,
    1,    2,    0,    1,    1,    3,    3,    1,    1,    1,
    0,    1,    1,    2,    2,    3,    1,    2,    0,    1,
    2,    4,    1,    3,    0,    5,    1,    1,    1,    2,
    3,    3,    4,    4,    1,    2,    4,    4,    4,    4,
    0,    4,    0,    5,    0,    1,    0,    4,    4,    1,
    2,    2,    4,    2,    1,    2,    2,    2,    2,    2,
    2,    1,    3,    3,    3,    1,    3,    3,    3,    3,
    3,    1,    3,    3,    1,    3,    3,    3,    3,    1,
    3,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    5,    4,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    3,    2,    1,    0,    1,    1,    1,    0,    2,    1,
    1,    0,    4,    0,    5,    0,    0,    7,    0,    0,
    8,    1,    1,    1,    1,    1,    1,    6,    4,    4,
    1,    1,    0,    0,    0,    0,   15,    0,    1,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    2,
    3,    0,    1,    1,    2,    4,    3,    1,    3,    1,
    3,    1,    1,    0,    1,    1,    1,    0,    4,    1,
    1,    0,    4,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    4,    1,
    2,    2,    2,    2,    2,    2,    1,    1,    2,    1,
    1,    1,    0,    8,    0,    6,    0,    8,    0,    2,
    1,    0,    1,    0,    1,    1,    2,    2,    4,    0,
    2,    0,    1,    1,    2,    4,    1,    5,    2,    2,
    2,    2,    2,    2,    1,    1,    1,    1,    1,    5,
    7,    4,    0,    8,    4,    0,    1,    1,    2,    1,
    0,    3,    1,    2,    3,    3,    1,    1,    1,    1,
    1,    5,    4,    7,    3,    6,    0,    4,    0,    5,
    1,    0,    4,    2,    2,    2,    1,    1,    0,    1,
    0,    5,    1,    0,    1,    0,    1,    1,    1,    3,
    4,    5,    0,    9,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    3,    4,    3,    3,    2,    3,    2,
    4,    3,    0,    1,    3,    4,    5,    3,    1,    2,
    0,    1,    2,    0,    7,    3,    2,    2,    0,    3,
    5,    4,    0,    0,   10,    0,    0,    9,    5,    4,
    2,    1,    0,    2,    2,    2,    2,    2,    4,    5,
    4,    5,    0,    5,    0,    6,    3,    2,    2,    2,
    1,    0,    3,    0,    0,    6,    1,    2,    1,    1,
    1,    1,    1,    0,    5,    0,    3,    0,    0,    0,
   12,    0,    0,    0,   13,    0,    2,    0,    3,    1,
    0,    4,    1,    0,    4,    1,    2,    2,    1,    2,
    2,    0,    0,    4,    2,    3,    0,    4,    2,    2,
    3,    0,    1,    1,    1,    2,    2,    2,    4,    3,
    0,    7,    4,    4,    3,    1,    3,    0,    0,    4,
    0,    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  935,    0,    0,  939,    0,
    0,   15,   17,  366,  372,  379,  367,  369,    0,  368,
    0,  375,  377,  364,    0,  371,  373,  365,  376,  378,
  374,  329,  956,    0,  370,  946,    0,   10,    1,    0,
    0,    0,   12,    0,  767,    0,    0,    0,    0,    0,
    0,    0,    0,  407,    0,    0,    0,    0,    0,    0,
    0,  405,    0,    0,    0,  466,    0,  406,    0,  505,
    0,  859,    0,    0,    0,  617,    0,    0,    0,    0,
    0,    0,    0,  668,    0,  717,    0,    0,    0,    0,
    0,    0,    0,    0,  404,    0,  606,    0,  766,    0,
  700,    0,    0,    0,  380,  381,  382,    0,  384,  385,
  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  402,  403,  613,  535,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  614,  612,  615,  616,  684,  686,    0,  682,  685,  701,
  703,  704,  705,  706,  707,  708,  709,  710,  711,  712,
  702,    0,  768,  769,  788,  789,  790,  791,  825,  826,
  827,  828,  829,  830,    0,    0,    0,    0,    0,  732,
    0,    0,    0,    0,  345,  319,    0,  321,  507,    0,
    0,    0,  943,   16,  936,    0,    0,  243,  242,  239,
  244,  245,  238,  257,  256,  249,  250,  246,  248,  247,
  251,  240,  241,  252,  253,  259,  258,  254,  255,    0,
    0,  959,    0,  948,    0,  947,    3,   53,    0,    0,
    0,   51,   13,    0,    0,    0,  831,  408,  409,  857,
    0,  731,    0,  833,  832,    0,  527,  521,  526,  716,
  765,  687,  714,  713,  715,  688,  689,  690,  691,  692,
  693,  694,  695,  696,  697,  698,  699,    0,    0,    0,
  797,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  838,    0,    0,    0,    0,  844,    0,    0,
    0,  840,    0,    0,    0,  858,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  348,    0,    0,    0,
    0,    0,    0,    0,  609,    0,    0,    0,  383,  534,
    0,    0,  532,  536,  537,  531,  541,  540,  538,  539,
  602,  516,    0,  401,  400,    0,    0,    0,    0,    0,
  718,    0,    0,    0,  469,  470,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  938,  683,  763,  764,  891,  906,    0,
    0,  892,  894,    0,  918,  877,  875,  899,    0,    0,
  897,  900,  901,  902,  903,  878,  876,  941,    0,  730,
  360,    0,    0,  323,  318,    0,  356,  357,   19,  515,
  510,    0,    0,  355,    0,  358,  359,    0,    0,    0,
  955,    0,  330,    0,    0,    0,  957,    0,    6,    0,
   52,  468,    0,  464,  465,    0,    0,  462,    0,    0,
    0,    0,    0,  795,    0,  762,  760,  761,    0,    0,
    0,    0,    0,    0,    0,    0,  621,    0,  836,  834,
  622,    0,    0,  490,    0,    0,    0,  481,    0,  485,
  495,  497,    0,  477,    0,    0,    0,    0,    0,  472,
    0,  475,    0,  479,  350,  837,    0,    0,  839,  848,
    0,    0,    0,  849,    0,    0,  860,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  542,
    0,    0,  523,    0,  604,  681,    0,    0,  676,  678,
  679,  680,  412,  413,    0,  326,  327,    0,  182,  181,
  183,    0,    0,    0,    0,  352,    0,  589,    0,    0,
  842,    0,    0,  417,    0,  420,    0,  418,    0,  458,
    0,    0,    0,    0,    0,  447,  450,    0,    0,  442,
  449,  448,    0,  578,  579,  580,  581,  582,  583,  584,
  585,  586,  588,  587,  543,  545,  544,  550,  551,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  574,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  890,  889,    0,  898,    0,
  888,  729,    0,    0,    0,    0,  320,  511,  494,    0,
  953,  954,  344,    0,    0,  341,    0,    0,  179,    0,
    0,  963,  949,  951,   61,   59,   60,    0,    0,   54,
    0,    0,   62,   64,   29,   27,   22,    0,  416,    0,
  467,    0,  518,  737,  529,  169,  190,    0,    0,    0,
  159,    0,    0,    0,  170,  522,    0,  726,  724,  725,
  722,  723,  863,  721,  801,    0,  819,  798,    0,  810,
    0,  821,    0,  835,  772,    0,  862,    0,    0,  480,
    0,  496,  498,    0,    0,  434,    0,    0,  430,    0,
    0,  459,    0,  500,  474,    0,    0,  141,  501,  139,
  140,  503,    0,  517,  775,    0,  853,    0,  846,    0,
  850,  509,    0,    0,  519,  870,    0,  866,  733,  741,
    0,    0,  793,    0,    0,  881,    0,  879,    0,    0,
  619,  620,    0,    0,    0,  670,  671,  669,  677,  597,
  603,  596,    0,    0,  325,  592,    0,    0,    0,  533,
  841,  719,  421,  415,  419,  414,  520,  457,  456,  455,
  452,  451,    0,  446,  410,  411,  422,  423,    0,  577,
    0,  601,  600,  907,  883,    0,  908,    0,  893,  895,
  904,    0,  919,    0,  887,  933,   20,   18,  322,  514,
  513,  667,  666,    0,  665,    0,  340,  965,  180,  960,
    0,    0,   55,    0,    0,    0,    0,    0,   81,   80,
    0,  463,    0,    0,    0,    0,  173,  528,    0,    0,
    0,    0,    0,  811,  799,    0,  822,    0,    0,  861,
  487,  486,  437,    0,    0,  944,  945,  426,  432,    0,
  435,    0,  461,    0,    0,    0,    0,    0,  773,  856,
    0,  847,    0,  506,  869,    0,    0,    0,  757,  740,
    0,    0,    0,  746,  792,  882,  880,    0,  524,    0,
  605,  599,  328,  591,  590,  607,  454,    0,  445,  444,
  443,  576,    0,  885,    0,  912,    0,    0,  927,  928,
  921,    0,  343,  342,  964,    0,    0,   63,   57,    0,
   65,   23,   28,   78,    0,    0,  188,  189,    0,    0,
    0,    0,  162,  171,  163,  165,  796,    0,    0,    0,
    0,    0,  820,    0,    0,  436,  438,  439,  433,  427,
  431,    0,  492,    0,  460,  471,  425,  504,  502,    0,
  852,    0,  872,    0,    0,    0,    0,    0,  736,  747,
  618,  610,    0,  453,  884,    0,    0,    0,    0,  905,
    0,  934,  952,    0,    0,    0,   70,   71,   74,   75,
    0,  751,  114,  115,    0,    0,    0,  754,    0,  186,
    0,    0,    0,  794,  874,    0,    0,    0,  815,    0,
    0,  823,  771,  476,  473,  780,    0,  787,    0,    0,
  778,    0,  783,  854,  871,  867,    0,    0,    0,    0,
  608,  886,  909,    0,  896,    0,    0,  923,    0,   76,
   68,    0,    0,    0,  738,  755,  174,    0,    0,  166,
  164,  864,  812,  800,  808,  807,  802,  804,    0,    0,
  774,  779,    0,  784,    0,    0,  734,    0,  749,  611,
    0,  913,  930,  931,  924,   56,    0,   72,   73,    0,
    0,  175,  185,    0,    0,  824,  786,  785,    0,  672,
  855,  868,  758,    0,    0,    0,   77,    0,    0,    0,
   39,    0,   42,   44,   45,   46,   47,   48,  756,    0,
  865,  803,    0,    0,  817,    0,  910,    0,  925,  639,
  645,  637,  634,  644,  638,  636,  635,  642,  640,  641,
  647,  643,  646,  648,    0,    0,  632,   43,   24,   41,
  176,  806,  805,    0,    0,  914,    0,    0,  629,    0,
  633,  673,    0,    0,    0,  347,    0,  623,    0,    0,
    0,  911,    0,    0,    0,  297,    0,  216,    0,  103,
    0,  917,  915,  313,  303,  302,    0,  624,  212,   98,
    0,  298,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  314,    0,    0,  312,  299,    0,  307,  363,    0,
  361,    0,  625,    0,  654,  213,   99,    0,    0,  296,
    0,    0,  651,    0,    0,    0,  655,    0,    0,  315,
    0,    0,  308,  362,  657,    0,    0,    0,  100,    0,
    0,   31,  300,  662,    0,  663,  660,    0,  658,   96,
    0,   94,    0,    0,   84,   86,   87,   88,   89,   90,
   91,   92,   93,   95,  142,    0,  228,  221,  222,  223,
  224,  225,  226,  227,    0,    0,  219,    0,  316,  311,
    0,    0,    0,  626,   85,    0,    0,  214,  220,    0,
  661,  659,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  229,  237,    0,  157,  143,  156,    0,
    0,  101,    0,    0,  332,  331,    0,    0,    0,  265,
    0,    0,    0,    0,  266,    0,    0,  264,    0,  334,
    0,    0,    0,    0,    0,    0,  150,    0,  627,  215,
    0,    0,    0,    0,    0,    0,  262,    0,    0,    0,
    0,  155,  144,    0,  260,    0,  335,    0,  235,    0,
    0,    0,  232,  231,  230,  102,  104,  336,    0,    0,
    0,    0,  333,    0,    0,    0,  148,    0,    0,    0,
    0,    0,    0,  191,  116,    0,    0,  270,    0,  337,
    0,  338,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  195,    0,    0,    0,  151,  113,  111,    0,    0,
  274,    0,    0,  120,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  192,  122,    0,    0,    0,    0,
    0,    0,  108,  289,    0,  271,    0,    0,  283,    0,
    0,    0,  278,    0,  138,    0,    0,    0,    0,  133,
  147,    0,  267,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  126,    0,  112,    0,  105,  109,    0,
    0,    0,  285,    0,  286,  275,    0,    0,  269,  279,
  263,    0,    0,  119,  134,    0,  145,  154,  261,    0,
    0,  236,  233,  203,    0,  193,    0,    0,  123,    0,
  117,  127,    0,  110,  290,  292,  272,    0,    0,  284,
  281,  137,  135,  149,    0,  196,    0,    0,  200,  202,
  129,    0,    0,    0,  283,  146,    0,  204,  206,  194,
    0,  152,  294,  295,  291,  293,  282,  197,    0,    0,
  130,    0,    0,  210,  209,  208,  205,  207,  153,  198,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   49,    9,   50,   10,   11,   51,  239,  678,  419,
   12,   13,   52,   22,   23,  314,  193,  667,  837, 1001,
 1110,  668, 1533,  835, 1111, 1112, 1252, 1114, 1115, 1116,
 1117, 1118,  242,  660,  448,  661,  662,  927,  663,  664,
  931,  836,  996,  997,  998,  261,  455, 1087,  110,  841,
 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
 1263, 1264, 1145, 1160, 1315, 1181, 1199, 1195, 1213, 1229,
 1278, 1341,  547, 1409, 1387, 1431, 1432, 1433, 1002, 1429,
 1003,  731, 1165, 1427, 1405, 1462,  504, 1416, 1395, 1448,
  889, 1460, 1463, 1464, 1531, 1449, 1450, 1446, 1265, 1308,
 1286, 1316,  680, 1379, 1515, 1397, 1362, 1428, 1542, 1146,
  262,  681,  682,  683,  684,  685,  647,  554, 1120,  648,
  649,  846, 1317, 1404, 1496, 1459, 1518, 1332, 1423, 1527,
 1543, 1497, 1498, 1547, 1539, 1540, 1179, 1194, 1228, 1275,
 1311, 1276, 1277, 1304, 1365, 1338, 1492,  317,  230, 1383,
 1305, 1381, 1374, 1351, 1412, 1389, 1441, 1436, 1410, 1471,
 1476, 1439, 1442, 1443, 1525, 1477, 1437, 1438, 1535, 1523,
 1524, 1176, 1187, 1206, 1197, 1221, 1207, 1208, 1231, 1191,
 1218, 1240,  427,  196,  112,  345,  198,  548,  443,  231,
 1319,  645,  646,  824, 1166,  200,  434,  421,  113, 1210,
 1211,   45,  114,  115,  116,  117,  118,  119,  120,  121,
  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
  132,  133,  134,  135,  136,  251,  797,  578,  579,  966,
  500,  717,  868,  718,  719,  959,  137,  205,  723,  580,
  581,  582,  791,  457,  458,  290,  964,  725,  435,  292,
  487,  488,  489,  490,  493,  733,  305,  202,  431,  258,
  463,  763,  259,  462,  138,  139,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  804,  152,
  557,  558,  559,  771,  772,  773,  153,  545,  765,  346,
  983,  534, 1040,  154,  482, 1177, 1193, 1226, 1306, 1147,
 1214, 1215, 1248, 1249,  825,  537,  331,  768, 1101, 1126,
  538,  539,  263,  264,  265,  157,  158,  159,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  171,  278,  563,  473,  474,  422,  752,  887,  892,  521,
  936,  843, 1006,  890,  893, 1017,  894, 1007, 1008,  279,
  172,  173,  174, 1029,  970, 1030, 1031, 1032, 1073, 1033,
  175,  176,  177,  178,  698,  475,  699, 1020,  952, 1021,
 1122, 1095, 1068, 1123,  700,  951,  701, 1125, 1069,  179,
  180,  181,  182,  183,  184,  299,  513,  514,  972, 1075,
  308,  950,  853, 1094,  975,  886, 1076,  185,  407,  186,
  408,  913,  986,  409,  410,  631,  622,  623,  917,  411,
  412,  413,  414,  415,  918,  617,  915, 1081, 1155, 1172,
  988, 1105, 1164,  813,  625,  814, 1047,  991, 1048, 1106,
  922,   17,   19,   46,   47,  234,  650,  832,  444,  651,
  652,
  };
  protected static readonly short [] yySindex = {          244,
    0, -188, -206, -216,   72,10557,    0, -122,    0,    0,
   72, -216,    0,    0, -126,    0, 6007,   72,    0, 8413,
 -239,    0,    0,    0,    0,    0,    0,    0,   65,    0,
  137,    0,    0,    0, 2919,    0,    0,    0,    0,    0,
    0,    0,    0,  429,    0,    0,  770,    0,    0, -122,
  101,   72,    0,  234,    0,  350,  251,  418, -183, -170,
  214,  133, 6150,    0,  214,  214,  214,  -94,  214,  214,
  816,    0, 7701,  214,  214,    0, 7844,    0,  220,    0,
  418,    0,  214, -183,  214,    0,10604,10604,  291,  214,
  214, -101,10291,    0, 9631,    0,10291,10291,10291,10291,
10291,10291,10291,10291,    0,  297,    0,10729,    0,  197,
    0,  249,  318,  756,    0,    0,    0,  475,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1382,  856,
  211,  252,  835,  577,  519,  443,  524,  520,  509,  565,
    0,    0,    0,    0,    0,    0, 2902,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  108,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -174,  292,  101,    0,  597,    0,
  450,  622,  617,  610,    0,    0,   58,    0,    0,  632,
  226,  663,    0,    0,    0,10729,10729,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  675,
  639,    0,  645,    0,  157,    0,    0,    0,  101,  809,
  101,    0,    0,  872,  707, 9763,    0,    0,    0,    0,
 9631,    0,  777,    0,    0,10729,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -144, -247,10423,
    0,10729, 9631,  781,  824, 9631, 9631, 4161,  644, -200,
  836,10798,    0,  214,  214,10291,  297,    0,  832,10729,
 9631,    0,  840,  723,  214,    0, 9631,  220, 9103,  861,
 9631,  597,  401,  637,  985, -183,    0,  862,  993, -183,
 9631, 9631, 9631,  133,    0,  954, 1020,  442,    0,    0,
 6293, -269,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2047,    0,    0, 1274,  401,  931,  939, 9631,
    0,  905,  306,  477,    0,    0,  906, 7987, 8971,10291,
 9631, 9631, 9631, 9631, 9631, 9631, 9631, 9631, 9631, 9631,
 9631,10291,10291,10291,10729,10729,10291,10291,10291,10291,
10291,10291,10291,10291,10291,10291,10291,10291,10291,10291,
10291,10291, 9631,    0,    0,    0,    0,    0,    0,10604,
10604,    0,    0, -183,    0,    0,    0,    0,  357,  986,
    0,    0,    0,    0,    0,    0,    0,    0,  101,    0,
    0,  597,  933,    0,    0,  409,    0,    0,    0,    0,
    0,  905,  610,    0,  632,    0,    0, -183,  675,  675,
    0,  162,    0,  630,  675,  958,    0, -169,    0, -165,
    0,    0,  905,    0,    0,  966,  776,    0,  974,10423,
  981,  128,  220,    0,  214,    0,    0,    0,  597,  671,
  756,  226, -183,  632, 7283, -190,    0,  978,    0,    0,
    0, -168,  -95,    0,  605,    0,  987,    0,  982,    0,
    0,    0,  804,    0, 7415,  810, 9631,  836, 8971,    0,
 6722,    0,  597,    0,    0,    0,  989,  -67,    0,    0,
  418,  220,  578,    0, 8440,  990,    0,  170, -183,10423,
 -184,  196,  940, 9631, 1067,  905, 9631, 1073,  991,    0,
  994,  995,    0, 1274,    0,    0, -286, 6293,    0,    0,
    0,    0,    0,    0,  220,    0,    0,  232,    0,    0,
    0,  597,  401, -183,10841,    0,  996,    0,  997,10291,
    0,  992, 6293,    0,  -60,    0,  453,    0,  905,    0,
   12, 9631, 9631, 1000, 1125,    0,    0,   13,  -45,    0,
    0,    0,  856,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  856,
  856,  211,  211,  252,  252,  252,  252,  835,  835,  577,
  519,  443,  524,  520,    0, -176, 8130, 1084, -183, 1085,
 -183, 8130, 8130,  999, 9631,    0,    0,  986,    0, -183,
    0,    0,  732, 1006,  905,  610,    0,    0,    0,  610,
    0,    0,    0, -142,  240,    0,10841,  630,    0, 1004,
 1009,    0,    0,    0,    0,    0,    0,  401, 1011,    0,
 1010, 1012,    0,    0,    0,    0,    0, 1016,    0,  495,
    0, 9763,    0,    0,    0,    0,    0,  761,  172, 1018,
    0, 1017, 1019, 1023,    0,    0, 9631,    0,    0,    0,
    0,    0,    0,    0,    0, -183,    0,    0, 1022,    0,
 1025,    0, -131,    0,    0, 6150,    0, 6150, 7558,    0,
 4161,    0,    0, 9235,  525,    0, -267,  126,    0,  973,
  977,    0,   87,    0,    0, 1032, 1034,    0,    0,    0,
    0,    0, 1036,    0,    0, 1039,    0, 8524,    0,  220,
    0,    0,  704, 1040,    0,    0, 6150,    0,    0,    0,
 6865, 1037,    0, 6150,  905,    0, 9631,    0, 9631,10729,
    0,    0,  220, 1042,  220,    0,    0,    0,    0,    0,
    0,    0, 8130,10729,    0,    0, -183, 1274, 1072,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8839,    0,    0,    0,    0,    0, 7008,    0,
 8130,    0,    0,    0,    0, 1126,    0, 1127,    0,    0,
    0,  670,    0, 1044,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1001,    0,  162,    0,    0,    0,    0,
  630,  630,    0,  933, 1050, 1051, 1056, 1007,    0,    0,
 9631,    0, 1046,  761, 1013,10729,    0,    0, -211, 1180,
 1181,  219, 1049,    0,    0, 9631,    0, 9631, 1163,    0,
    0,    0,    0,  104, 9367,    0,    0,    0,    0, 7140,
    0, 1188,    0,  632, 9631, 1074, 7558, 1077,    0,    0,
 -183,    0,   96,    0,    0, -180, -184,10798,    0,    0,
 -183, 1064, 1037,    0,    0,    0,    0, 1078,    0, 1106,
    0,    0,    0,    0,    0,    0,    0,  841,    0,    0,
    0,    0, 8130,    0, 8130,    0, 1100, 8130,    0,    0,
    0,  548,    0,    0,    0, 1082,  933,    0,    0, 9895,
    0,    0,    0,    0, 9499, 1079,    0,    0, 1081, -151,
 1080, 1087,    0,    0,    0,    0,    0, 1091, 7558, 1037,
 -184, 9631,    0, 1086, 6150,    0,    0,    0,    0,    0,
    0, 1093,    0,  836,    0,    0,    0,    0,    0, -171,
    0, 1099,    0, 1037, 1101, 1037, 1053, 1097,    0,    0,
    0,    0,  220,    0,    0, 8130, 1134, 8130, 8130,    0,
 9631,    0,    0, 1012,  571,  855,    0,    0,    0,    0,
 -216,    0,    0,    0, -183, 1096, 1079,    0, 8581,    0,
 1102, 1236, 1237,    0,    0, 1037, 1115, 1037,    0, 6150,
  702,    0,    0,    0,    0,    0, 9631,    0, 1121, -203,
    0, -203,    0,    0,    0,    0, 1114, 9631, 6865,  220,
    0,    0,    0, 1144,    0,  727, 1118,    0, 1123,    0,
    0, 9895,   72, 1113,    0,    0,    0, 1119, 9631,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6150, -135,
    0,    0, 6293,    0, 1128, 6150,    0, 1131,    0,    0,
 8130,    0,    0,    0,    0,    0, 9631,    0,    0,  101,
 9499,    0,    0, 6150, 9631,    0,    0,    0, 6293,    0,
    0,    0,    0, 1148, 8130, 9631,    0, 1258,  890, 1139,
    0,  101,    0,    0,    0,    0,    0,    0,    0, 9631,
    0,    0,  758, 1025,    0, 6293,    0, 1160,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -150, 1258,    0,    0,    0,    0,
    0,    0,    0, 1142, 8130,    0,10884, 1094,    0,  400,
    0,    0, 1146, 8130, 1094,    0, 1138,    0, 1271, 1280,
 -183,    0, 1146, 1158, 8608,    0, 1094,    0, 1094,    0,
 1094,    0,    0,    0,    0,    0, 1165,    0,    0,    0,
  128,    0, 1262, 1262, 1262, 1162,  101,10729, 1200, 1200,
 1200,    0, 1122,  900,    0,    0, 1168,    0,    0,  158,
    0, 1130,    0, 1200,    0,    0,    0, 1200,    0,    0,
 1175,  101,    0,10729,  -22, 1177,    0, 1182, 1184,    0,
 1172, 1178,    0,    0,    0,10500,  179,  101,    0, 1183,
 9631,    0,    0,    0, 1185,    0,    0, 1186,    0,    0,
 1258,    0, 1190,  179,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1258,    0,    0,    0,    0,
    0,    0,    0,    0, 1193,  101,    0,  179,    0,    0,
 1191,10500, 1422,    0,    0,  614,10358,    0,    0, 1202,
    0,    0, 1164, 1167,  279, 1169,  627,  349,  241, 2919,
 1167, 1170, 1296,    0,    0, 1178,    0,    0,    0,  946,
 1178,    0, 1218,  401,    0,    0, 1222, 1192, 1194,    0,
 1228, 1225, 1167, 1167,    0,  -93,  608,    0, 1230,    0,
  401, 1227,  243, 1242, 1233, 1239,    0,  631,    0,    0,
 1178,10729, 1243,10729,  905, 1201,    0,10798, 1246, 1247,
 1203,    0,    0, 1252,    0,10884,    0,  905,    0,10884,
10884, 1167,    0,    0,    0,    0,    0,    0, 1260, 1255,
 8497, 1256,    0,  128, 1377, 1259,    0, 1261,  128,  128,
  128, 1264,  128,    0,    0, 1265, -179,    0, 1254,    0,
    0,    0, 1269, 1272, 1281, 1279,  128, 1275, 1283, 1284,
 1285,    0, 1290, 1299, 1282,    0,    0,    0, 1293,  192,
    0, 1294, 1297,    0, 1421, 1300,10884, 1301,  614, 1302,
 1304, 1306,  128, 1307,    0,    0, 1309,  128, 9499, 1267,
 1317, 1293,    0,    0, 1258,    0,  101,  101,    0, 1276,
 1327, 1294,    0,10729,    0, 9631, 1289, 1332, 1300,    0,
    0, 1336,    0,10884,10884,10729, 1342,10927,  202, 7558,
 1305, 1338, 1309,    0, 1345,    0, -179,    0,    0, -137,
 1308, 1258,    0, 1258,    0,    0, 7558, 1344,    0,    0,
    0, 1358, 1281,    0,    0,10884,    0,    0,    0, 1362,
  597,    0,    0,    0, 1258,    0,  202,  202,    0, 1351,
    0,    0, 1359,    0,    0,    0,    0, 1425, 1480,    0,
    0,    0,    0,    0, 1200,    0,  826, 1373,    0,    0,
    0, 1405,  636,  636,    0,    0,  202,    0,    0,    0,
 7558,    0,    0,    0,    0,    0,    0,    0,   61,   61,
    0, 1200, 1378,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {           67,
    0,    0, 6436,   67,    0,    0,    0, 1753,    0,    0,
   45, 2794,    0,    0,    0,    0,    0,   45,    0,    0,
   42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1756,    0,    0, 1756,    0,    0, 1753,
   50, 1411,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1383,    0,    0,    0,    0,    0,    0,    0,    0,
10970,    0, 1375,    0,    0,    0, 1375,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  319,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4223,    0,    0,    0,    0,
    0,    0,    0, 4159,    0,    0,    0, 3992,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4390, 4458,
 3085, 3586, 4974, 5180, 5318, 5456, 5592, 5728, 4323, 1641,
    0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54, 2637,  784,    0,
  363,   95,    0,    0,    0,    0,    0,    0,    0, 2374,
 2154,  700,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1756,
   38,    0,    0,    0,    0,    0,    0,    0,   44,    0,
   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1384,    0,    0,
    0,    0,    0,    0,    0,    0, 2990,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  171,
    0, 2484,  588, 2154,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1383,    0,    0,    0, 2990,    0,    0,
 -244,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1386, 2043,    0,    0, 1375,
    0, 2990,    0,    0,    0,    0,    0,    0,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1838,
    0,    0,    0,    0,    0,    0,    0,    0, 2717,    0,
    0, 2264,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  825,    0,    0, 1876,    0,    0,    0, 1756, 1756,
    0, -162,    0,10635, 1756, 1762,    0,    0,    0, 1388,
    0,    0, 2990,    0,    0,    0,    0,    0,    0,    0,
    0,  373,    0,    0,    0,    0,    0,    0,  235,  406,
    0, 5839,    0,  117, 1380,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1266, 1278,    0,    0, 1391,    0,
    0,    0,    0,    0, -219,    0,    0, 3491, 1389,    0,
    0,    0,  454,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1581,    0,    0,    0,    0,    0,    0,    0,
  898,    0,    0,    0,    0, 2043,    0,    0,    0,    0,
    0,    0,    0, 1386,    0,    0,    0,   -6,    0,    0,
    0,    0,    0,    0, 8273,    0,    0,    0,    0,    0,
    0,  669,  891,    0,    0,    0, 1390,    0,    0,    0,
    0,    0,    0,    0, 2990,    0, 2990,    0, 3658,    0,
    0,    0,    0, -186,    0,    0,    0,    0,  201,    0,
    0,    0, 4544,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4612,
 4682, 3252, 3419, 3753, 3920, 4750, 4820, 5042, 5112, 5250,
 5388, 5524, 5660, 5796,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1838,    0,    0,
    0,    0,    0,    0,  825,    0,    0,    0,    0,  834,
    0,    0,    0, 1348,    0,    0,    0,11013,    0,    0,
  909,    0,    0,    0,    0,    0,    0,  729,  851,    0,
    0, 1399,    0,    0,    0,    0,    0, 1393,    0,10027,
    0,    0,    0,    0,    0,    0,    0, 1352,  559,    0,
    0,  922,  923,  926,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1395,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1404,    0,    0,    0, 4882,    0,    0,   66,    0,  147,
 3157,    0,    0,    0,    0,    0, 1403,    0,    0,    0,
    0,    0, 1409,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  790,    0,    0,    0,    0,    0,    0,    0,
    0, 1402,    0,    0, 2043,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8273,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  210,    0,  415,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -162,    0,    0,    0,    0,
11056,10712,    0, 1412,    0,  822,    0,    0,    0,    0,
    0,    0,  938,11099,    0,    0,    0,    0,  560,    0,
    0,    0,  928,    0,    0,    0,    0,    0, 1782,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3324,    0, 3825, 1413,    0,    0,    0,
 1426,    0,    0,    0,    0,  928,  898,    0,    0,    0,
    0,    0, 1418,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  944,
    0,    0,    0,    0,    0, 1423,    0,    0,    0,    0,
  950,  953,    0,    0,    0,    0,    0,    0,    0, 1444,
  898,  721,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3491,    0,    0,    0,    0,    0, 1449,
    0,    0,    0, 1444,    0, 1402,  743,  763,    0,    0,
    0,    0, 8273,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1399, 8582,    0,    0,    0,    0,    0,
11219,    0,    0,    0,    0,    0, 1443,    0,    0,    0,
  797,    0,    0,    0,    0,  990,    0, 1402,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1452,
    0, 6579,    0,    0,    0,    0,    0,    0,    0, 8273,
    0,    0,    0,    0,    0,  269,  460,    0,    0,    0,
    0,    0,11290,    0,    0,    0,    0,  877,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,11610,
    0,    0,    0,    0,  869,    0,    0,    0, -109,    0,
    0,    0,    0,    0,    0,    0,    0,  411,  802,    0,
    0,11660,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  899,    0, 1453,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  425,11917,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  496,    0,    0,    0, 1455,    0, 1406, 1407,
    0,    0,  496,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  373,    0,  360,  360,  360,    0,   11,    0, 1456, 1456,
 1456,    0,    0, 8743,    0,    0, 1458,    0,    0,  483,
    0,    0,    0,  646,    0,    0,    0, 1451,  567,    0,
    0,  231,    0,    0,    0,    0,    0,    0,    0,    0,
    0,11169,    0,    0,    0,    0,11410,11460,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  407,    0,    0,
 1195,    0,    0,11510,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1195,    0,    0,    0,    0,
    0,    0,    0,    0,    0,11560,    0,11410,    0,    0,
    0,    0,  425,    0,    0,    0,  425,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  448,    0,    0,11169,    0,    0,    0,    0,
11169,    0,    0,  136,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1459,    0,    0,    0,    0,    0,    0,    0,    0,    0,
11169,    0,    0,    0, 1459,  182,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1459,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  606,    0,
  579,    0,    0,  373, 1462,    0,    0,    0,  373,  373,
  373,    0,  373,    0,    0,    0,    0,    0,  952,    0,
   52,    0,    0,    0,    0,    0,  373,    0,    0,    0,
    0,    0,    0,    0,  955,    0,    0,    0, 1457,11956,
    0, 1460,    0,    0,10159, 1469,    0,    0,    0,    0,
    0,    0,  505,    0,    0,    0, 1478,  373,    0,    0,
    0, 1479,    0,    0, -130,    0,11788,11802,    0,    0,
    0, 1481,    0,    0,    0,    0,    0,    0, 1482,    0,
    0,    0,    0,    0,    0,    0,    0,    0,11864,    0,
    0,    0, 1484,    0,    0,    0,    0,    0,    0,    0,
    0, 1514,    0, 1579,    0,    0,    0,  971,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  662,    0,    0,    0,  942,    0,11707,11726,    0,  976,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  682,    0,    0,    0,    0,    0,
    0,    0,11309, 8817,    0,    0,11864,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  682,    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1793,    0,    0,    0,    7,  -10, 1677,  -42,    6,
    0, 1861, 1872,  113,    0,   -8, 1363,    0,    0,    0,
    0,    0, -617, -696,    0,  767, -984,    0,    0,    0,
    0,    0, -228,    0,    0,    0,  957,    0, 1048,    0,
    0,    0,    0,  828,  831,  -14, -344,    0, 1154,    0,
  609,    0,  638, -729, -540, -487, -480, -474, -467, -416,
    0,-1058,-1031,    0,    4,    0,  151,    0,-1126,    0,
    0,    0,  -35,  424,    0,    0,    0,  461,-1055,    0,
 -261, -290, -823,    0,    0,    0, -858,  412,    0,    0,
 -496,    0,    0,  431,    0,    0,  447,    0,    0,  479,
    0, -268,-1157,    0,    0,    0,    0,    0,    0, -403,
  -17,    0,    0, 1052, 1054, 1059, 1221, -528,    0,    0,
 -318, 1061,  599,    0, -631,    0,    0,    0,    0,    0,
    0,    0,    0,  369,    0,    0,    0,    0,    0,    0,
    0,    0,  635,    0,    0,    0,    0,  -13,  625,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  402,    0,    0,  486,    0,    0,  494,  498,  413,    0,
    0,    0,    0,    0,    0,    0,    0,  714,    0,    0,
    0,    0, -141,    0,  290,  -33,    0,    0,  592,    0,
  640,    0, 1116,    0,    9, -288, -273, -166,   -4,    0,
  716,    0, -241, -231,    0,    0,  308,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -257,    0,   33,    0, 1442, -466,    0,
   22,    0,    0,    0, 1075,    0, -296, -133, 1229,    0,
 1145,    0, 1381, 1588, 1286,    0,    0,  998, 1884,    0,
    0,    0,    0, 1248,    0,    0,    0,    0, -387, 1637,
    0,    0,    0,    0,    0, 1431,  580,  720,  912,  956,
 1576, 1582, 1575, 1584, 1580,    0, 1585,    0, -527,    0,
    0, 1198, 1438, -725,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -292,    0,    0,    0,    0,-1085,
    0,  764,    0,  697,    0,  854,    0,    0,    0,    0,
  910, -515,  -11, -313,    3,    0, 1827,    0,   76,    0,
   84,   98,  103,  105,  124,  125,  127,  178,  189,  266,
    0, -637,    0, -230,    0,    0, -798,    0, -255,    0,
    0,    0,    0,  947, -820, 1015, -534,    0,  980, -454,
    0,    0,    0,    0,    0,    0,  960,    0,    0,  962,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  897,    0,    0,    0,
    0,    0,    0,    0,    0,  -34,    0, 1472,    0,    0,
    0, 1124,    0,    0,    0,    0,    0,    0, -172,    0,
    0,    0,    0,    0, 1603, 1385,    0,    0,    0, 1605,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  842,
    0,    0,    0,    0,    0,    0,    0,    0,  914,    0,
    0,    0,    0,    0,    0,  -15, 1196,    0,    0,    0,
 1199,
  };
  protected static readonly short [] yyTable = {           111,
  502,   44,  109,  505,  732,  155,  195,  187,  240,   43,
   18,  192,  451,  417,  577,  201,  498,  541,  522,  156,
  697,  478,  769,  394,  529,  428,  777,  555,  199,  977,
  486,  236,  727, 1196,  437, 1119,  878,  339,  471,  901,
  250,  942,  303,   49,   34,  638,  471,  782,  472,    5,
   16,  316,  320,  940,    7,  494,  241,   20,  298,  436,
 1161,  304,  298,  306, 1027,  702,   36,   14,  859,  617,
  860,  750,  348, 1216, 1217,  973, 1407,  472,  519,  800,
  332,  398,  201,  201, 1026,  254,  655,  705,  976,  766,
  665, 1230,  160,  256,  809,  810, 1027,  280,  281,  282,
  161,  286,  287,  201, 1010, 1113,  300,  301,  866,  885,
  543,  464,  656,  307,  162,  309,  895,  311,  828,  163,
 1097,  164,  322,  323,  857, 1505, 1157, 1113,  466, 1016,
 1158,  674,  630,  204,   48,   49,  467,  941, 1205,  111,
  165,  166,  109,  167,  240,  155,  359,  428,   49,    2,
  767,  657, 1018, 1016,  577,  822,  428,  424,  782,  156,
  707,  639, 1352, 1205,  204,  238,  858,  544,  823,  867,
  439,  440,  399,  283,  495,  324,  496,  400,  248,  401,
  190,  284,  402,  403, 1506,  404,  405,  190,  735,  468,
  451,  630,  674,  617,  168,  617,  449,  203,  720, 1159,
  694,  201,  201,  465,  751,  169,  801,  724,  949, 1408,
  798,  706,  861,  255,  441,  555, 1393,  428,  471, 1283,
  461, 1399, 1400, 1401,  541, 1403, 1028,  249,  472,  674,
  497,  454,  160, 1235, 1287,  252,  459,   15,  447, 1418,
  161, 1161,  252,  472,  696,  902,  476, 1098,  820,  541,
  617,  201,  821, 1267,  162,  632,  658, 1041, 1028,  163,
  666,  164,  406,   49,  507, 1457,  782,  788,  477,  190,
 1465,  481,  483,  912, 1011,  470,  190,  201,  471,  424,
  165,  166,  170,  167,  708, 1353,  508,  201,  472,  749,
  517, 1267,  516,  339,  518,  201,  481, 1049,  942,   54,
   49,   34,  688,  690,  470,  692,    5,  531,  532,  197,
  940,    7,  736,  424, 1080,  562, 1544, 1023,  564,  540,
  782,  339,  499,   36,  252,  325,  908,  307,  689,  829,
  691,  252,  556,  542,  168,  298,  799,  515,  201,  598,
  599,  201,  873,  454,  576,  169,  584,  585,  586,  587,
  588,  589,  590,  591,  592,  593,  594,   34,  980,  873,
 1236,  343,   49,   36,  619,  621,   49,   50,   20,  675,
  201,  201,  720, 1466,  206,  783,  318,  318,  616,   36,
  968,  869, 1064,  676,  339,  985,  304,  987, 1526,  789,
  990,  329,  795,  672,  852,  201,  201,  318,  637,  644,
  329,  953,  942, 1470,  329,  329,  329,  329,  329,  329,
  329,  329,  339, 1223,  633, 1549,  339,  643,  339,  669,
  339,   34,  170,  641,  642,  746,  735,  847,  190,  653,
  675, 1096,  326,  344, 1250,   94,   49,  339, 1102,  659,
 1508,  429, 1509,   36, 1545,  686,  207, 1434,  577,  796,
  451,  753, 1015,  486,  910,  470, 1121, 1494, 1042,  555,
 1044, 1045,  349, 1517,  874,  926,  190,  679,  875,  471,
  470,  317,  375,  440,  947,  344,  677,  238,  317,  956,
 1058,  980,  722,  432,  576,  875,  730,  720,  446, 1375,
  727,  396,  637,  737,  739,  318,  318,  687,  720,    1,
  720,  195,  429,  359,  238,  720,  743,  870, 1268,  756,
  201,  257,  758,  376,  329,  470,  324,  350,  329,  424,
  556,  635,  942,  199,  929,  937,  540,  770,  942,  201,
  440,  784, 1382,  786, 1320,  787, 1384, 1385,  238, 1224,
  542,  556,  720,  738,  397,  318, 1268,  398,  238,  747,
  201,  540,  735, 1104,  735,  238,  926,  790,  790,  735,
  339,  926,  324,  926,  339,  542,  926,  926,  238,  926,
  926,  318, 1330,  720, 1357,  754,  428, 1128,  238,  351,
  441,  318,   42,  769,  732, 1000,  871,  329, 1321,  318,
  425,  926,  248, 1451,   94,  329,  377,  378,  948,  505,
  963,  819,  803,  329, 1328,  727,  306,  803,  803,    2,
  812,  727,  626,  774, 1243,  929,  727,  243,  727,  420,
  929,  826,  929,  727,  424,  929,  929, 1163,  929,  929,
 1487, 1488,  318,  556,  247,  318, 1173,  441,  399,  732,
  697,  249,  201,  400, 1004,  401,  926,  341,  402,  403,
  929,  404,  405,  379,  380,  775,   49,  454, 1329, 1019,
  727,  317, 1514,  827,  318,  318, 1331,  329, 1358,  321,
  920, 1168,  481,  724,  352,    3,    4,    5,    6,  329,
  329,  329,  630,   49,  329,  329,   49,  630, 1339,  318,
  318,  630,   49, 1340,  730,  342,  628, 1269,  353,  722,
 1169,  732,  881,  399,   49,  929,  649, 1000,  400,  351,
  401,  630,  318,  402,  403,  922,  404,  405,  343,  629,
 1037,  819,  882, 1366,  898,  628,  244,  324,  416, 1170,
  245,  565,  344,  201,  649, 1269,  730,  318,  903,  324,
  630,  566,  896,  324,  897,  899,  324,  770,  629,  992,
 1270,  916,  158,  656,  628,  201,  324, 1271,  803,  541,
  630,  920, 1063, 1272,  556, 1070,  920,  329,  920,  201,
 1273,  920,  920,  201,  920,  920,  317,  629,  576,  190,
  246,  656,  317,  644,  576,  541,  803,  317, 1270,  317,
  656,  731,   94,  627,  317, 1271,  248, 1093,   49,  342,
 1004, 1272,  634,  398,  197,  839,  922,  232, 1273,  233,
  940,  922,  541,  922,  840,   49,  922,  922,   49,  922,
  922, 1274,  343,  318,   49,  659,  934,  329,  351,  650,
  351,  317,  351,  351,  635,  351,   49,  351,  423,  388,
  342,  201,  916,  954,  318,  249,  511,  916,  342,  916,
  957,  920,  916,  916,  679,  916,  916,  650, 1151, 1274,
  965,  360,  730,  343,  740, 1519, 1520,  329, 1130,   50,
   49,  343,   50,   49,  343,  341,   49,  344,   50,   49,
  451,  351,  158,  201,  351,  731,  958, 1130,  785,   49,
   50,   49, 1131, 1327,  399, 1538,  922,  967,  803,  400,
  803,  401,  567,  803,  402,  403, 1327,  404,  405, 1132,
  387, 1131,  568,  865, 1133,  999,  389,  391,  659, 1134,
  477,  341, 1135,  342, 1136, 1137, 1138,  390, 1132,  392,
   49, 1139,  916, 1133,  730, 1140,  318,  481, 1134,  583,
  549, 1135,  309, 1136, 1137, 1138,  343, 1141,  309,  550,
 1139, 1142,  324, 1143, 1140,  310,  600,  601,  324, 1050,
  344,  551,  393, 1499,  324,  770, 1141,  324,  324,  342,
 1142,  803, 1143,  803,  803,  451, 1046, 1144,  510, 1280,
 1510,  324,  385,  386,   50,   49,  425,  268,   94,  268,
  420,  511,  343,  709,  268,  556, 1144, 1307, 1323, 1324,
  429,  425,  426,  342,  201,   94,  344, 1053,  289,  512,
   94, 1325,  477,  324, 1363,  420,  731,  523,  329, 1242,
  653,  491,  770, 1078,  730,  492,  343,  318, 1326,  653,
  420,  919,  920, 1314, 1541,  425,  234,  999,  430,  353,
  344, 1326, 1090,  438,  477,  234,  353, 1108,  353,  318,
  353,  353, 1314,  232, 1349, 1350,  652,  353, 1354,  505,
  442,  540,   50,  318,  420,  652,  803,  318,  425, 1108,
  445,  549, 1107,   50,  844,  542,  477, 1065,   50,  508,
  550, 1066,   50,  508,  883, 1067,   50,  540, 1083, 1084,
  803, 1046,  551, 1386,  353, 1109,  814,  420,  602,  603,
  814,  542,   50,   50,  814,  477,  324,  324,   50,  324,
  324,   58,  523,   50,  540,  817,   50, 1109,   50,   50,
   50,  450,  759,  318,  759,   50,  759,  452,  542,   50,
  346,   50,  453, 1152,  248,  318,  354, 1153, 1004, 1186,
  803,   50,  748,  195,  748,   50,  748,   50,  232,  803,
  235,   50,  201,  671, 1203,  355,  356,  672,  346,  460,
  346, 1167, 1209,  346,  479,  346,  317,  346, 1174,  317,
  201,   50,  346,  194,  184,  357,  184,  318,  184, 1203,
 1188,  712, 1189,  249, 1190,  713,  358,  721, 1209,  324,
  288,  492,  289,  201, 1251, 1266,  679, 1528, 1529,   67,
 1247,  324, 1204,   67,  324,  324, 1130,  480,  324,  346,
  501, 1251,  253,  512,  512,  506,  318,  512,  324,  201,
  984,  285,  799,  509,  381,  382,  477, 1204,   66,   66,
 1131,  201,   66, 1266, 1051, 1251, 1052,  310,  383,  384,
  315,  319, 1204,  520,  816,  326, 1247, 1132,  816,  372,
  373,  374, 1133,  731,  172,  324,  172, 1134,  172, 1204,
 1135,  324, 1136, 1137, 1138, 1148,  238,  324, 1309, 1139,
  593,  324,  593, 1140,  818, 1220,  238,  201,  818,  739,
 1343,  739,  524, 1204,  324, 1141,  962,  526,  962, 1142,
  527, 1143,  604,  605,  606,  607,  324, 1343,  318,  160,
  167,  160,  167,  168,  535,  168, 1367,  873, 1369,  873,
  560, 1370, 1372,  630,  630, 1144,  324, 1323, 1324,  750,
 1364,  750,  561,   69, 1372,   69,  343,  190,  644,  190,
  161,  569,  161,  273,  654,  273,  121,  201,  121,  201,
  608,  609,  195,  201, 1200, 1201,  195,  195,  670,  630,
  433,  201,  280,  673,  280,  201,  201,  128,  347,  128,
  675,  704,  710,  711,  757,  755,  201, 1435,  734,  745,
  759, 1314,  760,  761,  762,  781,  779,  778,  793,  679,
  794,  805,  807,  830,  679,  679,  679,  811,  679,  818,
  831,  523,  833,  834, 1472, 1474,  838,  848,  849,  456,
  850, 1309,  679,  195,  851,  855,  856,  872, 1481,  203,
   35,  876,  201,  879,  477,  799, 1495,  877,  891,  884,
 1489,  900,  906,  914,  916,  921,  923,  929,  679,  930,
  932, 1482,  933,  679,  935,  945,  946,  949,  939,  201,
  195,  195,  955,  962, 1493,  730,  318,  979,  495,  201,
  201,  201,  969,  201, 1495, 1495,  982,  981,  989,  993,
 1005, 1012,  730, 1009,  318, 1022,  630,  630, 1013,  525,
 1024,  630,  195,  528, 1014,  630,  630,  630, 1034, 1055,
 1036,  201,  630, 1038, 1495, 1039,  630,  318, 1043,  630,
 1059, 1060, 1061,  630, 1062,  630, 1071, 1077, 1082, 1085,
 1086, 1091, 1100, 1127,  630, 1534, 1534, 1092, 1103, 1171,
  630,  456,  456,  318, 1149, 1156,  730, 1162, 1130,   42,
 1175, 1546, 1546,  330,  630,  318, 1178,  333,  334,  335,
  336,  337,  338,  339,  340, 1180, 1184,  630,   24, 1192,
   25, 1202, 1131,   26,  630, 1198, 1212, 1219,   27, 1222,
 1232, 1237,   28,  618,  620, 1225, 1238,  624, 1239, 1132,
 1241, 1242,   30, 1281, 1133, 1284, 1279, 1282, 1288, 1134,
 1291,  318, 1135,   32, 1136, 1137, 1138, 1312,   33,  636,
  845, 1139,   34, 1318,  549, 1140, 1318, 1337, 1318, 1313,
 1318,  640, 1314,  550, 1322, 1336,   36, 1141,   37, 1318,
 1342, 1142,   38, 1143, 1344,  551, 1347, 1348, 1355, 1356,
   39,   40, 1318, 1318,   41, 1360, 1318, 1345,  552, 1346,
 1359, 1361, 1371, 1368, 1376, 1377,  693, 1144, 1378,  703,
 1380,  318, 1394,  318, 1388, 1390, 1392,  318, 1396, 1398,
 1402,  488, 1411, 1406,  324,  318,  324,  488, 1413,  318,
  318, 1318,  456,  489, 1419, 1414,  402, 1415,  402,  489,
  318, 1417, 1420, 1421, 1422,  324,  324,   35,  194, 1424,
 1426,   35,  748, 1425, 1430, 1440, 1445,  402,  402, 1444,
 1452, 1447,   35, 1507, 1454,  324, 1455,   35, 1456, 1458,
 1461,   35, 1467,  324, 1293,   35,  324,  402, 1157,  553,
 1468, 1478, 1158, 1294, 1295,  402,  318,  776,  402, 1296,
 1479,   35,   35, 1297, 1483, 1484, 1298,   35, 1486, 1490,
 1299, 1501,   35,   35, 1503,   35,  330,   35,   35,   35,
 1500, 1300, 1511,  318,   35, 1512, 1516, 1301,   35, 1521,
   35, 1522, 1505,  318,  318,  318, 1506,  318, 1530, 1532,
   35,  530,    9, 1550,   35,  958,   35,  525,  843,  483,
   35,  950,   25,  809, 1302,  594,  484,   26,  440,  595,
  361, 1303,  806,  664,  808,  318,   32,  177,  813,  482,
   35,  770,  441,  816,   32,  742,   35,   35,   33,   33,
  530,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,  743,  595,  596,  597,  851,  752,  530,  530,  530,
  530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
  530,  530,  530,  744,  776,  456,  753,  777,  674,  301,
  652,  211,   97,  305,  652,  630,  845,  845,  118,  324,
  106,  630,  237,  276,  845,  845,  845,  845,  845,  854,
  845,  845,  131,  845,  845,  845,  845,  845,  845,  845,
  845,  124,  107,  418,  277,  132,  845,  125,  845,  845,
  845,  845,   53,  845,  845,  493,   21,  744, 1150, 1088,
  845,  928, 1089,  994,  845,  845, 1290,  845,  845,  845,
 1504, 1285, 1469, 1502, 1513, 1485,  575, 1453,  845, 1335,
  942,  845,  943,  845,  938,  845,  845,  944, 1548,  845,
 1289,  845,  845,  845,  845,  845,  845,  845,  845,  845,
  845,  845,  845,  845, 1334,  530, 1537, 1480,  845,  845,
  904, 1475,  845,  845, 1473, 1233, 1536, 1373, 1333, 1234,
  726,  924,  864,  911,  961,  571,  456,  845,  845,  845,
  845,  845,  456,  792,  291,  845,  845,  842,  862,  845,
  533, 1025,  610,  612,  845,  845,  845,  845,  845,  611,
  614,  764,  845,  613,  845,  905,  615, 1227, 1292, 1154,
  845,  845, 1099,  395,  741, 1079, 1056,  575, 1035, 1072,
  780, 1124,  575, 1074,  575,  575,  575,  575,  575,  575,
  575,  575,  575,  575,  575,  845,  845,  845,  845,  974,
  845,  628,  815,  629, 1183,    0,  575,  845,  575, 1129,
  575,    0,  575,  575,  575,    0,    0,  926,    0,  925,
    0,    0,    0,    0,  971,    0,  636,  770,  770,    0,
    0,    0,  324,    0,  978,  770,  770,  770,  770,  770,
    0,  770,  770,    0,  770,  770,  770,  770,  770,  770,
  770,    0,    0,    0,    0,    0,    0,  770,    0,  770,
  770,  770,  770,    0,  770,  770,    0,  575,    0,    0,
    0,  770,    0,  456,    0,  770,  770,    0,  770,  770,
  770,    0,    0,  932,    0,    0,    0,    0,    0,    0,
    0,    0,  770,    0,  770,    0,  770,  770,    0,    0,
  770,    0,  770,  770,  770,  770,  770,  770,  770,  770,
  770,  770,  770,  770,  770,    0,    0,    0,    0,  770,
  770,  493,    0,  770,  770,    0,    0,  493,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  770,  770,
  770,  770,  770,  317,    0,    0,  770,  770, 1054,    0,
  770,    0,    0,    0,    0,  770,  770,  770,  770,  770,
    0,    0,    0,  770,    0,  770,    0,    0,  493,    0,
    0,  770,  770,    0,  932,    0,    0,    0,    0,  932,
    0,  932,  932,  932,  932,  932,  932,  932,  932,  932,
  932,    0,    0,    0,    0,  456,  770,  770,  770,  770,
    0,  770,    0,  932,    0,  932,    0,  932,  770,  932,
  932,  932,  493,    0,    0,    0,    0,  493,    0,  493,
  493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
    0,    0,    0,    0,    0,    0,  493,    0,    0,    0,
  493,  493,    0,  493,  493,  493,  493,  493,  493,  493,
    0,  493,  493,  728,  493,  493,  493,  493,  493,  493,
  493,  493,  493,  493,  932,  493,  493,  493,  493,  493,
  493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
  493,  493,  493,  493,  493,  493,  493,    0,  324,  493,
  530,  493,  546,  493,  324,    0,  493,    0,    0,    0,
    0,   24,  493,   25,    0,    0,   26,    0,    0,    0,
    0,   27,    0,    0, 1182,   28,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  324,   32,    0,    0,    0,
    0,   33,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,    0,  354,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,    0,  324,
    0,  312,    0,    0,  324,    0,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,    0,  317,
    0,    0,    0,  324,    0,  317,    0,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,    0,  324,  324,
    0,  324,  324,  324,  324,  324,  324,    0,    0,  324,
  324,    0,    0,    0,  324,  324,  324,  324,  324,  324,
  324,  324,    0,    0,    0,    0,  317,    0,    0,    0,
    0,    0,    0,  324,    0,    0,  324,    0,  324,    0,
  324,    0,  347,  324,    0,    0,    0,    0,    0,  324,
    0,    0,    0,  349,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  317,    0,    0,    0,    0,  317,    0,  317,  317,  317,
  317,  317,  317,  317,  317,  317,  317,  317,    0,  728,
    0,    0,    0,    0,  317,  728,    0,    0,  317,  317,
  317,  317,  317,  317,    0,  317,  317,  317,    0,  317,
  317,    0,  317,  317,  317,  317,  317,    0,    0,    0,
  317,  317,    0,    0,    0,  317,  317,  317,  317,  317,
  317,  317,  317,    0,    0,    0,  728,    0,    0,    0,
    0,    0,    0,    0,  317,    0,    0,  317,    0,  317,
    0,  317,    0,    0,  317,    0,    0,    0,    0,    0,
  317,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  728,    0,    0,    0,    0,  728,    0,  728,  728,  728,
  728,  728,  728,  728,  728,  728,  728,  728,    0,  354,
    0,    0,    0,    0,  728,  354,   21,    0,  728,  728,
  728,  728,  728,  728,    0,  728,  728,  728,    0,  728,
  728,    0,  728,  728,  728,  728,  728,    0,    0,    0,
  728,  728,    0,    0,    0,  728,  728,  728,  728,  728,
  728,  728,  728,    0,    0,    0,  354,    0,    0,    0,
    0,    0,    0,    0,  728,    0,    0,  728,    0,  728,
    0,  728,    0,    0,  728,    0,    0,    0,    0,    0,
  728,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   50,    0,    0,    0,
  354,    0,    0,    0,    0,  354,    0,  354,  354,  354,
  354,  354,  354,  354,  354,  354,  354,  354,    0,  349,
    0,    0,    0,    0,  354,  349,    0,    0,  354,  354,
    0,  354,  354,  354,    0,  354,  354,  354,    0,  354,
  354,    0,  354,  354,  354,  354,  354,    0,    0,    0,
  354,  354,    0,    0,    0,  354,  354,  354,  354,  354,
  354,  354,  354,    0,    0,    0,  349,    0,    0,    0,
    0,    0,    0,   37,  354,    0,    0,  354,    0,  354,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  354,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  349,    0,    0,    0,    0,  349,    0,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  349,    0,    0,
    0,    0,    0,    0,  349,    0,    0,    0,  349,  349,
    0,  349,  349,  349,    0,  349,  349,  349,    0,  349,
  349,    0,  349,  349,  349,  349,  349,    0,    0,    0,
  349,  349,    0,    0,    0,  349,  349,  349,  349,  349,
  349,  349,  349,   21,    0,    0,    0,   21,    0,    0,
    0,    0,    0,    0,  349,    0,    0,  349,   21,  349,
    0,    0,    0,   21,    0,    0,    0,   21,    0,    0,
  349,   21,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   21,    0,    0,    0,   21,   21,    0,
    0,    0,    0,   21,    0,    0,    0,    0,   21,   21,
    0,   21,    0,   21,   21,   21,    0,    0,    0,    0,
   21,    0,    0,    0,   21,    0,   21,    0,    0,    0,
    0,    0,    0,   50,    0,    0,   21,   50,    0,   50,
   21,    0,   21,    0,    0,    0,   21,    0,   50,   50,
    0,    0,    0,   50,    0,    0,    0,   50,   50,   50,
    0,   50,    0,    0,   50,    0,   21,    0,   50,    0,
    0,   50,   21,   21,   50,   50,    0,   50,   50,    0,
  509,    0,    0,   50,    0,    0,   50,   50,   50,   50,
    0,   50,   50,   50,   50,   50,    0,    0,   50,    0,
   50,    0,    0,    0,   50,    0,   50,    0,    0,    0,
   37,    0,    0,    0,   37,    0,   50,    0,    0,   50,
   50,    0,   50,    0,    0,   37,   50,    0,    0,    0,
   37,    0,    0,   21,   37,    0,    0,    0,   37,    0,
    0,    0,    0,    0,    0,    0,   50,    0,   50,   50,
   37,    0,    0,    0,   37,   37,    0,    0,    0,    0,
   37,    0,    0,    0,    0,   37,   37,    0,   37,    0,
   37,   37,   37,    0,    0,    0,    0,   37,    0,    0,
    0,   37,    0,   37,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,    0,    0,   37,    0,   37,
    0,    0,   50,   37,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   55,    0,    0,
    0,    0,    0,   37,    0,   56,   24,   57,   25,   37,
   37,   26,   58,    0,   59,   60,   27,   61,   62,   63,
   28,    0,    0,    0,    0,    0,    0,   64,    0,   65,
   30,   66,   67,    0,   68,   69,    0,    0,    0,    0,
    0,   32,    0,    0,  208,   70,   33,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   36,    0,   37,   74,    0,    0,
   38,    0,   75,   76,   77,   78,   79,   80,   39,   40,
   81,   82,   41,   83,   84,  324,    0,    0,    0,   85,
   86,  324,  209,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,   93,    0,    0,    0,   94,    0,    0,    0,
   95,    0,    0,    0,    0,   96,   97,   98,   99,  100,
    0,    0,  324,  101,    0,  102,    0,    0,    0,    0,
    0,  103,  104,  210,  211,  212,  213,    0,  214,  215,
  216,  217,  218,  219,  220,  221,    0,    0,  222,  223,
  224,  225,  226,  227,  228,  229,  105,  106,  107,  108,
    0,    0,    0,    0,    0,    0,  324,    0,  203,    0,
  552,  324,    0,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,    0,    0,    0,    0,    0,
  324,    0,    0,    0,    0,  324,  324,  324,  324,  324,
  324,  324,  324,  324,    0,  324,  324,    0,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,    0,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,    0,  495,    0,    0,  324,    0,  324,  495,    0,
  324,    0,    0,    0,    0,    0,  324,    0,    0,    0,
    0,  552,    0,    0,    0,    0,  552,    0,  552,  552,
  552,  552,  552,  552,  552,  552,  552,  552,  552,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  495,
  552,    0,  552,    0,  552,    0,  552,  552,  552,    0,
    0,    0,    0,    0,  552,  552,  552,  552,    0,    0,
    0,  552,  552,    0,    0,    0,  552,  552,  552,  552,
  552,  552,  552,  552,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  495,    0,  552,    0,  553,  495,    0,
  495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
  495,  552,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  495,  495,  495,  495,  495,  495,  495,  495,  495,
  495,    0,  495,  495,    0,  495,  495,  495,  495,  495,
  495,  495,  495,  495,  495,    0,  495,  495,  495,  495,
  495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
  495,  495,  495,  495,  495,  495,  495,  495,    0,  491,
    0,    0,    0,    0,  495,  491,    0,    0,    0,    0,
    0,    0,    0,  495,    0,    0,    0,    0,  553,    0,
    0,    0,    0,  553,    0,  553,  553,  553,  553,  553,
  553,  553,  553,  553,  553,  553,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  491,  553,    0,  553,
    0,  553,    0,  553,  553,  553,    0,    0,    0,    0,
    0,  553,  553,  553,  553,    0,    0,    0,  553,  553,
    0,    0,    0,  553,  553,  553,  553,  553,  553,  553,
  553,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  491,    0,  553,    0,  554,  491,    0,  491,  491,  491,
  491,  491,  491,  491,  491,  491,  491,  491,  553,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  491,  491,
    0,  491,  491,  491,  491,  491,  491,  491,    0,  491,
  491,    0,  491,  491,  491,  491,  491,  491,  491,  491,
  491,  491,    0,  491,  491,  491,  491,  491,  491,  491,
  491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
  491,  491,  491,  491,  491,    0,  499,    0,    0,    0,
    0,  491,  499,    0,  491,    0,    0,    0,    0,    0,
  491,    0,    0,    0,    0,  554,    0,    0,    0,    0,
  554,    0,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  499,  554,    0,  554,    0,  554,    0,
  554,  554,  554,    0,    0,    0,    0,    0,  554,  554,
  554,  554,    0,    0,    0,  554,  554,    0,    0,    0,
  554,  554,  554,  554,  554,  554,  554,  554,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  499,    0,  554,
    0,  555,  499,    0,  499,  499,  499,  499,  499,  499,
  499,  499,  499,  499,  499,  554,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  499,    0,  499,  499,
  499,  499,  499,  499,  499,    0,  499,  499,    0,  499,
  499,  499,  499,  499,  499,  499,  499,  499,  499,    0,
  499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
  499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
  499,  499,    0,  324,    0,    0,    0,    0,  499,  324,
    0,  499,    0,    0,    0,    0,    0,  499,    0,    0,
    0,    0,  555,    0,    0,    0,    0,  555,    0,  555,
  555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  324,  555,    0,  555,    0,  555,    0,  555,  555,  555,
    0,    0,    0,    0,    0,  555,  555,  555,  555,    0,
    0,    0,  555,  555,    0,    0,    0,    0,    0,  555,
  555,  555,  555,  555,  555,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  324,    0,  555,    0,  556,  324,
    0,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  555,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  324,    0,  324,  324,  324,  324,  324,
  324,  324,    0,  324,  324,    0,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,    0,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,    0,
  424,    0,    0,    0,    0,  324,  424,    0,  324,    0,
    0,    0,    0,    0,  324,    0,    0,    0,    0,  556,
    0,    0,    0,    0,  556,    0,  556,  556,  556,  556,
  556,  556,  556,  556,  556,  556,  556,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  424,  556,    0,
  556,    0,  556,    0,  556,  556,  556,    0,    0,    0,
    0,    0,  556,  556,  556,  556,    0,    0,    0,  556,
  556,    0,    0,    0,    0,    0,  556,  556,  556,  556,
  556,  556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  424,    0,  556,    0,  557,  424,    0,  424,  424,
  424,  424,  424,  424,  424,  424,  424,  424,  424,  556,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  424,    0,  424,  424,  424,  424,  424,  424,  424,    0,
  424,  424,    0,  424,  424,  424,  424,  424,  424,  424,
  424,  424,  424,    0,  424,  424,  424,  424,  424,  424,
  424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
  424,  424,  424,  424,  424,  424,    0,  383,    0,    0,
    0,    0,  424,  383,    0,  424,    0,    0,    0,    0,
    0,  424,    0,    0,    0,    0,  557,    0,    0,    0,
    0,  557,    0,  557,  557,  557,  557,  557,  557,  557,
  557,  557,  557,  557,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  383,  557,    0,  557,    0,  557,
    0,  557,  557,  557,    0,    0,    0,    0,    0,  557,
  557,  557,  557,    0,    0,    0,  557,  557,    0,    0,
    0,    0,    0,  557,  557,  557,  557,  557,  557,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  383,    0,
  557,    0,    0,  383,    0,  383,  383,  383,  383,  383,
  383,  383,  383,  383,  383,  383,  557,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  383,    0,  383,
  383,  383,  383,  383,  383,  383,    0,  383,    0,    0,
  383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
    0,  383,  383,  383,  383,  383,  383,  383,  383,  383,
  383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
  383,  383,  383,    0,  530,    0,  484,    0,    0,  383,
  530,    0,  383,    0,   56,   24,    0,   25,  383,    0,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,    0,    0,    0,   64,    0,    0,   30,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   32,  530,    0,    0,    0,   33,    0,   71,   72,   34,
    0,    0,    0,    0,    0,    0,    0,    0,  324,    0,
    0,    0,    0,   36,  324,   37,   74,    0,  731,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  295,
    0,   41,    0,    0,    0,  530,    0,    0,    0,    0,
  530,    0,  530,  530,  530,  530,  530,  530,  530,  530,
  530,  530,  530,    0,    0,  324,    0,   89,   90,   91,
  327,    0,    0,    0,  530,    0,  530,    0,  530,   95,
  530,  530,  530,  731,  530,  530,    0,  530,  530,  530,
  530,  530,  530,  530,  530,  530,  530,    0,    0,    0,
  530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
  530,  530,  530,  530,  530,  530,  530,  530,  573,  530,
    0,    0,    0,    0,    0,  105,  485,    0,    0,    0,
    0,    0,    0,    0,    0,  530,    0,    0,  324,    0,
  324,  324,  324,  324,  324,  731,  324,    0,  324,  324,
    0,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,    0,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,    0,  542,    0,    0,    0,    0,
  324,  542,    0,  324,    0,    0,    0,    0,    0,  324,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  573,
    0,    0,    0,    0,  573,    0,  573,  573,  573,  573,
  573,  573,  573,  573,  573,  573,  573,    0,    0,    0,
    0,    0,  542,    0,    0,    0,    0,    0,  573,    0,
  573,    0,  573,    0,  573,  573,  573,    0,    0,    0,
    0,    0,    0,  546,    0,    0,    0,    0,    0,  546,
  573,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  542,    0,    0,    0,
    0,  542,    0,  542,  542,  542,  542,  542,  542,  542,
  542,  542,  542,  542,    0,    0,    0,    0,    0,  573,
  546,    0,    0,    0,    0,  542,    0,  542,    0,  542,
    0,  542,  542,  542,    0,  542,  542,    0,    0,  542,
  542,  542,  542,  542,  542,  542,  542,  542,    0,    0,
    0,  542,  542,  542,  542,  542,  542,  542,  542,  549,
    0,    0,    0,    0,  546,  549,    0,    0,    0,  546,
  542,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,    0,    0,    0,    0,  542,    0,    0,    0,
    0,    0,    0,  546,    0,  546,    0,  546,    0,  546,
  546,  546,    0,  546,  546,    0,  549,  546,  546,  546,
  546,    0,    0,    0,  546,  546,    0,    0,    0,  546,
  546,  546,  546,  546,  546,  546,  546,  547,    0,    0,
    0,    0,    0,  547,    0,    0,    0,    0,  546,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  549,    0,    0,    0,  546,  549,    0,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,    0,    0,
    0,    0,    0,    0,  547,    0,    0,    0,    0,  549,
    0,  549,    0,  549,    0,  549,  549,  549,    0,  549,
  549,    0,    0,  549,  549,  549,  549,  548,    0,    0,
  549,  549,    0,  548,    0,  549,  549,  549,  549,  549,
  549,  549,  549,    0,    0,    0,    0,    0,  547,    0,
    0,    0,    0,  547,  549,  547,  547,  547,  547,  547,
  547,  547,  547,  547,  547,  547,    0,    0,    0,    0,
  549,    0,    0,    0,  548,    0,    0,  547,    0,  547,
    0,  547,    0,  547,  547,  547,    0,  547,  547,    0,
    0,  547,  547,  547,  547,  558,    0,    0,  547,  547,
    0,    0,    0,  547,  547,  547,  547,  547,  547,  547,
  547,    0,    0,    0,    0,    0,    0,    0,  548,    0,
    0,    0,  547,  548,    0,  548,  548,  548,  548,  548,
  548,  548,  548,  548,  548,  548,    0,    0,  547,    0,
    0,    0,    0,    0,    0,    0,    0,  548,    0,  548,
    0,  548,    0,  548,  548,  548,    0,  548,  548,    0,
    0,  548,  548,  548,  548,  559,    0,    0,  548,  548,
    0,    0,    0,  548,  548,  548,  548,  548,  548,  548,
  548,    0,    0,    0,    0,    0,  558,    0,    0,    0,
    0,  558,  548,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,    0,    0,    0,    0,  548,    0,
    0,    0,    0,    0,    0,  558,    0,  558,    0,  558,
    0,  558,  558,  558,    0,    0,    0,  324,    0,  558,
  558,  558,  558,  324,    0,    0,  558,  558,    0,    0,
    0,    0,    0,  558,  558,  558,  558,  558,  558,    0,
    0,    0,    0,    0,    0,    0,  559,    0,    0,    0,
  558,  559,    0,  559,  559,  559,  559,  559,  559,  559,
  559,  559,  559,  559,  324,    0,  558,    0,    0,    0,
    0,    0,    0,    0,    0,  559,    0,  559,    0,  559,
    0,  559,  559,  559,    0,    0,    0,    0,    0,  559,
  559,  559,  559,    0,    0,    0,  559,  559,    0,    0,
    0,    0,    0,  559,  559,  559,  559,  559,  559,  560,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  559,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  559,  324,    0,    0,
  324,    0,  324,  324,    0,    0,    0,  324,  324,    0,
    0,  324,  324,  324,  324,  324,  324,  324,  324,  324,
    0,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,    0,    0,    0,    0,    0,    0,  561,    0,    0,
    0,  324,  324,    0,    0,    0,    0,    0,    0,  324,
    0,    0,  324,    0,    0,    0,    0,    0,  324,    0,
  560,    0,    0,    0,    0,  560,    0,  560,  560,  560,
  560,  560,  560,  560,  560,  560,  560,  560,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  560,
    0,  560,    0,  560,    0,  560,  560,  560,    0,    0,
    0,    0,    0,    0,    0,  560,  560,  562,    0,    0,
  560,  560,    0,    0,    0,    0,    0,    0,    0,  560,
  560,  560,  560,    0,    0,    0,    0,    0,  561,    0,
    0,    0,    0,  561,  560,  561,  561,  561,  561,  561,
  561,  561,  561,  561,  561,  561,    0,    0,    0,    0,
  560,    0,    0,    0,    0,    0,    0,  561,    0,  561,
    0,  561,    0,  561,  561,  561,    0,    0,    0,    0,
    0,    0,    0,  561,  561,  563,    0,    0,  561,  561,
    0,    0,    0,    0,    0,    0,    0,  561,  561,  561,
  561,    0,    0,    0,    0,    0,    0,    0,  562,    0,
    0,    0,  561,  562,    0,  562,  562,  562,  562,  562,
  562,  562,  562,  562,  562,  562,    0,    0,  561,    0,
    0,    0,    0,    0,    0,    0,    0,  562,    0,  562,
    0,  562,    0,  562,  562,  562,    0,    0,    0,    0,
    0,    0,    0,  562,  562,  564,    0,    0,  562,  562,
    0,    0,    0,    0,    0,    0,    0,  562,  562,  562,
  562,    0,    0,    0,    0,    0,  563,    0,    0,    0,
    0,  563,  562,  563,  563,  563,  563,  563,  563,  563,
  563,  563,  563,  563,    0,    0,    0,    0,  562,    0,
    0,    0,    0,    0,    0,  563,    0,  563,    0,  563,
    0,  563,  563,  563,    0,    0,    0,    0,    0,    0,
    0,  563,  563,  565,    0,    0,  563,  563,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  563,  563,    0,
    0,    0,    0,    0,    0,    0,  564,    0,    0,    0,
  563,  564,    0,  564,  564,  564,  564,  564,  564,  564,
  564,  564,  564,  564,    0,    0,  563,    0,    0,    0,
    0,    0,    0,    0,    0,  564,    0,  564,    0,  564,
    0,  564,  564,  564,    0,    0,    0,    0,    0,    0,
    0,  564,  564,  566,    0,    0,  564,  564,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  564,  564,    0,
    0,    0,    0,    0,  565,    0,    0,    0,    0,  565,
  564,  565,  565,  565,  565,  565,  565,  565,  565,  565,
  565,  565,    0,    0,    0,    0,  564,    0,    0,    0,
    0,    0,    0,  565,    0,  565,    0,  565,    0,  565,
  565,  565,    0,    0,    0,    0,    0,    0,    0,    0,
  565,  567,    0,    0,  565,  565,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  565,  565,    0,    0,    0,
    0,    0,    0,    0,  566,    0,    0,    0,  565,  566,
    0,  566,  566,  566,  566,  566,  566,  566,  566,  566,
  566,  566,    0,    0,  565,    0,    0,    0,    0,    0,
    0,    0,    0,  566,    0,  566,    0,  566,    0,  566,
  566,  566,    0,    0,    0,    0,    0,    0,    0,  568,
  566,    0,    0,    0,  566,  566,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  566,  566,    0,    0,    0,
    0,    0,  567,    0,    0,    0,    0,  567,  566,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    0,    0,    0,    0,  566,    0,    0,    0,    0,    0,
    0,  567,    0,  567,    0,  567,    0,  567,  567,  567,
    0,    0,    0,    0,    0,    0,    0,  569,  567,    0,
    0,    0,    0,  567,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  567,  567,    0,    0,    0,    0,    0,
  568,    0,    0,    0,    0,  568,  567,  568,  568,  568,
  568,  568,  568,  568,  568,  568,  568,  568,    0,    0,
    0,    0,  567,    0,    0,    0,    0,    0,    0,  568,
    0,  568,    0,  568,    0,  568,  568,  568,    0,    0,
    0,    0,    0,    0,    0,  570,  568,    0,    0,    0,
    0,  568,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  568,  568,    0,    0,    0,    0,    0,  569,    0,
    0,    0,    0,  569,  568,  569,  569,  569,  569,  569,
  569,  569,  569,  569,  569,  569,    0,    0,    0,    0,
  568,    0,    0,    0,    0,    0,    0,  569,    0,  569,
    0,  569,    0,  569,  569,  569,    0,    0,    0,    0,
    0,    0,    0,  571,    0,    0,    0,    0,    0,  569,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  569,
  569,    0,    0,    0,    0,    0,  570,    0,    0,    0,
    0,  570,  569,  570,  570,  570,  570,  570,  570,  570,
  570,  570,  570,  570,    0,    0,    0,    0,  569,    0,
    0,    0,    0,    0,    0,  570,    0,  570,    0,  570,
    0,  570,  570,  570,    0,    0,    0,    0,    0,    0,
    0,  572,    0,    0,    0,    0,    0,  570,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  570,  570,    0,
    0,    0,    0,    0,  571,    0,    0,    0,    0,  571,
  570,  571,  571,  571,  571,  571,  571,  571,  571,  571,
  571,  571,    0,    0,  317,    0,  570,    0,    0,    0,
  380,    0,    0,  571,    0,  571,    0,  571,    0,  571,
  571,  571,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  571,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  571,    0,    0,    0,
    0,  380,  572,    0,    0,    0,    0,  572,  571,  572,
  572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
    0,    0,    0,    0,  571,    0,    0,    0,    0,    0,
    0,  572,    0,  572,    0,  572,    0,  572,  572,  572,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  572,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  572,    0,    0,    0,    0,  317,
    0,    0,    0,    0,    0,  317,  572,  380,  380,  380,
  317,    0,  317,    0,  380,  380,    0,  317,  380,  380,
  380,  380,  572,  380,  380,  380,  380,    0,  380,  380,
  380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
  380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
    0,    0,   55,    0,  317,    0,  380,    0,    0,  380,
   56,   24,   57,   25,    0,    0,   26,   58,    0,   59,
   60,   27,   61,   62,   63,   28,    0,    0,    0,    0,
    0,    0,   64,    0,   65,   30,   66,   67,    0,   68,
   69,    0,    0,    0,    0,    0,   32,    0,    0,    0,
   70,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,    0,   36,
    0,   37,   74,    0,    0,   38,    0,   75,   76,   77,
   78,   79,   80,   39,   40,   81,   82,   41,   83,   84,
    0,    0,    0,    0,   85,   86,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,   93,    0,    0,
    0,   94,    0,    0,    0,   95,    0,    0,    0,    0,
   96,   97,   98,   99,  100,    0,    0,    0,  101,    0,
  102,    0,    0,    0,    0,  260,  103,  104,    0,    0,
    0,    0,    0,   56,   24,   57,   25,    0,    0,   26,
   58,    0,   59,   60,   27,   61,   62,   63,   28,    0,
    0,  105,  106,  107,  108,   64,    0,   65,   30,   66,
   67,    0,   68,   69,    0,    0,    0,    0,    0,   32,
    0,    0,    0,   70,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,   36,    0,   37,   74,    0,    0,   38,    0,
   75,   76,   77,   78,   79,   80,   39,   40,   81,   82,
   41,   83,   84,    0,    0,    0,    0,   85,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
   93,    0,    0,    0,   94,    0,    0,    0,   95,    0,
    0,    0,    0,   96,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,    0,    0,    0,  536,  103,
  104,    0,    0,    0,    0,    0,   56,   24,   57,   25,
    0,    0,   26,   58,    0,   59,   60,   27,   61,   62,
   63,   28,    0,    0,  105,  106,  107,  108,   64,    0,
   65,   30,   66,   67,    0,   68,   69,    0,    0,    0,
    0,    0,   32,    0,    0,    0,   70,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   73,    0,   36,    0,   37,   74,    0,
    0,   38,    0,   75,   76,   77,   78,   79,   80,   39,
   40,   81,   82,   41,   83,   84,    0,    0,    0,    0,
   85,   86,    0,    0,   87,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
   90,   91,   92,   93,    0,    0,    0,   94,    0,    0,
    0,   95,    0,    0,    0,    0,   96,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,    0,    0,
    0,  937,  103,  104,    0,    0,    0,    0,    0,  937,
  937,  937,  937,    0,    0,  937,  937,    0,  937,  937,
  937,  937,  937,  937,  937,    0,    0,  105,  106,  107,
  108,  937,    0,  937,  937,  937,  937,    0,  937,  937,
    0,    0,    0,    0,    0,  937,    0,    0,    0,  937,
  937,    0,  937,  937,  937,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  937,    0,  937,    0,
  937,  937,    0,    0,  937,    0,  937,  937,  937,  937,
  937,  937,  937,  937,  937,  937,  937,  937,  937,    0,
    0,    0,    0,  937,  937,    0,    0,  937,  937,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  937,  937,  937,  937,  937,    0,    0,    0,
  937,    0,    0,    0,  937,    0,    0,    0,    0,  937,
  937,  937,  937,  937,    0,    0,    0,  937,    0,  937,
    0,    0,    0,    0,  781,  937,  937,    0,    0,    0,
    0,    0,  781,  781,  781,  781,    0,    0,  781,  781,
    0,  781,  781,  781,  781,  781,  781,  781,    0,    0,
  937,  937,  937,  937,  781,    0,  781,  781,  781,  781,
    0,  781,  781,    0,    0,    0,    0,    0,  781,    0,
    0,    0,  781,  781,    0,  781,  781,  781,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  781,
    0,  781,    0,  781,  781,    0,    0,  781,    0,  781,
  781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
  781,  781,    0,    0,    0,    0,  781,  781,    0,    0,
  781,  781,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  781,  781,  781,  781,  781,
    0,    0,    0,  781,    0,    0,    0,  781,    0,    0,
    0,    0,  781,  781,  781,  781,  781,    0,    0,    0,
  781,    0,  781,    0,    0,    0,    0,  728,  781,  781,
    0,    0,    0,    0,    0,   56,   24,    0,   25,    0,
    0,   26,  294,    0,    0,    0,   27,   61,   62,    0,
   28,    0,    0,  781,  781,  781,  781,   64,    0,    0,
   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  295,    0,   41,    0,    0,    0,    0,    0,    0,    0,
   86,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,  296,    0,    0,    0,  501,  729,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,  102,    0,    0,    0,    0,
  728,  103,  104,    0,    0,    0,    0,    0,   56,   24,
    0,   25,    0,    0,   26,  294,    0,    0,    0,   27,
   61,   62,    0,   28,    0,    0,  105,  297,  107,  108,
   64,    0,    0,   30,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,  888,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,  296,    0,    0,    0,  501,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
    0,    0,    0,  909,  103,  104,    0,    0,    0,    0,
    0,   56,   24,    0,   25,    0,    0,   26,  294,    0,
    0,    0,   27,   61,   62,    0,   28,    0,    0,  105,
  297,  107,  108,   64,    0,    0,   30,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   71,   72,   34,    0,  572,    0,
    0,    0,    0,    0,    0,    0,    0,  573,    0,    0,
   36,    0,   37,   74,    0,    0,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  295,    0,   41,    0,
    0,    0,    0,    0,    0,    0,  574,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,   93,    0,
    0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,   56,   24,    0,   25,  103,  104,   26,
  294,    0,    0,    0,   27,   61,   62,    0,   28,    0,
    0,    0,    0,    0,    0,   64,    0,    0,   30,    0,
    0,    0,  105,  106,  107,  108,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  295,    0,
   41,    0,    0,    0,    0,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
  296,    0,    0,    0,  714,  960,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,    0,    0,    0,  695,  103,
  104,    0,    0,    0,    0,    0,   56,   24,    0,   25,
    0,    0,   26,  294,    0,    0,    0,   27,   61,   62,
    0,   28,    0,    0,  105,  715,  107,  108,   64,    0,
    0,   30,    0,    0,    0,  716,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  295,    0,   41,    0,    0,    0,  469,    0,    0,
    0,   86,    0,    0,   87,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
   90,   91,   92,  296,    0,    0,    0,    0,    0,    0,
    0,   95,    0,    0,    0,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,   56,   24,
    0,   25,  103,  104,   26,  294,    0,    0,    0,   27,
   61,   62,    0,   28,    0,    0,    0,    0,    0,    0,
   64,    0,    0,   30,    0,    0,    0,  105,  297,  107,
  108,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,  296,    0,    0,    0,  714,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
    0,    0,    0,  728,  103,  104,    0,    0,    0,    0,
    0,   56,   24,    0,   25,    0,    0,   26,  294,    0,
    0,    0,   27,   61,   62,    0,   28,    0,    0,  105,
  715,  107,  108,   64,    0,    0,   30,    0,    0,    0,
  716,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   71,   72,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   74,    0,    0,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  295,    0,   41,    0,
    0,    0,    0,    0,    0,    0,   86,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,  296,    0,
    0,    0,  501,    0,    0,    0,   95,    0,    0,    0,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,    0,    0,    0,  293,  103,  104,    0,
    0,    0,    0,    0,   56,   24,    0,   25,    0,    0,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,  105,  297,  107,  108,   64,    0,    0,   30,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   71,   72,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  295,
    0,   41,    0,    0,    0,    0,    0,    0,    0,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,  296,    0,    0,    0,    0,    0,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,    0,    0,    0,  302,
  103,  104,    0,    0,    0,    0,    0,   56,   24,    0,
   25,    0,    0,   26,  294,    0,    0,    0,   27,   61,
   62,    0,   28,    0,    0,  105,  297,  107,  108,   64,
    0,    0,   30,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  295,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  296,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,  570,  103,  104,    0,    0,    0,    0,    0,
   56,   24,    0,   25,    0,    0,   26,  294,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,  105,  297,
  107,  108,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  295,    0,   41,    0,    0,
    0,    0,    0,    0,    0,   86,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,   93,    0,    0,
    0,    0,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
  102,    0,    0,    0,    0,  802,  103,  104,    0,    0,
    0,    0,    0,   56,   24,    0,   25,    0,    0,   26,
  294,    0,    0,    0,   27,   61,   62,    0,   28,    0,
    0,  105,  106,  107,  108,   64,    0,    0,   30,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  295,    0,
   41,    0,    0,    0,    0,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
  296,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,    0,    0,    0,  598,  103,
  104,    0,    0,    0,    0,    0,  598,  598,    0,  598,
    0,    0,  598,  598,    0,    0,    0,  598,  598,  598,
    0,  598,    0,    0,  105,  297,  107,  108,  598,    0,
    0,  598,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  598,    0,    0,    0,    0,  598,    0,  598,
  598,  598,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  598,    0,  598,  598,    0,
    0,  598,    0,    0,  598,    0,  598,    0,  598,  598,
  598,  598,    0,  598,    0,    0,    0,    0,    0,    0,
    0,  598,    0,    0,  598,  598,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  598,
  598,  598,  598,  598,    0,    0,    0,    0,    0,    0,
    0,  598,    0,    0,    0,    0,    0,  598,  598,  598,
  598,    0,    0,    0,  598,    0,  598,    0,  188,    0,
    0,    0,  598,  598,    0,    0,    0,   24,    0,   25,
    0,    0,   26,    0,    0,    0,    0,   27,    0,    0,
    0,   28,    0,    0,    0,  742,    0,  598,  598,  598,
  598,   30,    0,    0,   24,    0,   25,    0,    0,   26,
    0,    0,   32,    0,   27,    0,    0,   33,   28,    0,
    0,   34,    0,    0,    0,    0,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   36,    0,   37,    0,   32,
    0,   38,    0,    0,   33,    0,    0,    0,   34,   39,
   40,    0, 1391,   41,    0,    0,    0,  189,    0,    0,
    0,   24,   36,   25,   37,    0,   26,    0,   38,    0,
    0,   27,    0,    0,    0,   28,   39,   40,    0,  880,
   41,    0,    0,  190,  189,   30,    0,    0,   24,    0,
   25,    0,    0,   26,    0,    0,   32,    0,   27,    0,
    0,   33,   28,    0,    0,   34,    0,    0,    0,    0,
  190,    0,   30,    0,    0,    0,    0,    0,    0,   36,
    0,   37,    0,   32,    0,   38,    0,    0,   33,    0,
    0,    0,   34,   39,   40,    0, 1057,   41,  191,    0,
    0,  312,    0,  324,    0,   24,   36,   25,   37,    0,
   26,    0,   38,    0,    0,   27,    0,    0,    0,   28,
   39,   40,    0, 1185,   41,  313,    0,    0,  312,   30,
    0,    0,   24,  238,   25,    0,    0,   26,    0,    0,
   32,    0,   27,    0,  324,   33,   28,    0,    0,   34,
    0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   36,    0,   37,    0,   32,    0,   38,
    0,    0,   33,    0,    0,    0,   34,   39,   40,    0,
    0,   41,  347,    0,    0,  552,    0,    0,    0,    0,
   36,    0,   37,    0,    0,    0,   38,    0,    0,    0,
    0,    0,    0,    0,   39,   40,    0,    0,   41,  347,
    0,    0,  312,    0,    0,    0,    0,    0,    0,    0,
  324,  324,  324,  324,  731,    0,    0,  324,  324,    0,
    0,  324,  324,  324,  324,  324,  324,  324,  324,  324,
    0,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,   50,    0,    0,  347,    0,    0,  324,
    0,    0,  324,    0,   50,   50,    0,    0,    0,   50,
    0,    0,    0,   50,   50,   50,    0,   50,    0,    0,
   50,    0,    0,  347,   50,    0,    0,   50,    0,    0,
    0,   50,    0,   50,   50,    0,    0,    0,    0,   50,
    0,    0,   50,    0,   50,    0,    0,   50,   50,   50,
   50,   50,    0,    0,    0,    0,   50,    0,    0,    0,
   50,    0,   50,    0,    0,    0,    0,   30,    0,   30,
    0,    0,   50,    0,    0,   50,   50,    0,   50,    0,
    0,    0,   50,    0,    0,    0,    0,    0,    0,    0,
    0,   30,   56,   24,    0,   25,    0,    0,   26,  294,
    0,    0,   50,   27,   61,   62,    0,   28,   30,    0,
    0,    0,    0,   30,   64,    0,    0,   30,   30,    0,
    0,   30,    0,   30,   30,   30,    0,    0,   32,    0,
   30,    0,    0,   33,   30,   71,   72,   34,    0,  572,
    0,    0,    0,    0,    0,    0,   30,    0,  573,    0,
   30,   36,   30,   37,   74,    0,    0,   38,   50,    0,
   76,    0,   78,    0,   80,   39,   40,  295,    0,   41,
    0,    0,    0,    0,    0,    0,   30,  574,    0,    0,
   87,   88,   30,   30,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,   93,
    0,    0,    0,    0,    0,    0,    0,   95,  907,    0,
  575,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,   56,   24,    0,   25,  103,  104,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,    0,    0,    0,   64,    0,    0,   30,
    0,    0,    0,  105,  106,  107,  108,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   71,   72,   34,
    0,  572,    0,    0,    0,    0,    0,    0,    0,    0,
  573,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  295,
    0,   41,    0,    0,    0,    0,    0,    0,    0,  574,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,   93,    0,    0,    0,    0,    0,    0,    0,   95,
    0,    0,  575,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,   56,   24,    0,   25,
  103,  104,   26,  294,    0,    0,    0,   27,   61,   62,
    0,   28,    0,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,    0,  105,  106,  107,  108,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  295,    0,   41,    0,    0,    0,  469,    0,    0,
    0,   86,    0,    0,   87,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
   90,   91,   92,  296,    0,    0,    0,    0,    0,    0,
    0,   95,    0,    0,    0,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,   56,   24,
    0,   25,  103,  104,   26,  294,    0,    0,    0,   27,
   61,   62,    0,   28,    0,    0,    0,    0,    0,    0,
   64,    0,    0,   30,    0,    0,    0,  105,  297,  107,
  108,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,  296,    0,    0,    0,    0,
  863,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
   56,   24,    0,   25,  103,  104,   26,  294,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,    0,    0,
    0,    0,   64,    0,    0,   30,    0,    0,    0,  105,
  297,  107,  108,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  295,    0,   41,    0,    0,
    0,    0,    0,    0,    0,   86,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,  296,    0,    0,
    0,  495,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
  102,    0,   56,   24,    0,   25,  103,  104,   26,  294,
    0,    0,    0,   27,   61,   62,    0,   28,    0,    0,
    0,    0,    0,    0,   64,    0,    0,   30,    0,    0,
    0,  105,  297,  107,  108,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  295,    0,   41,
    0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  296,
    0,    0,    0,  501,    0,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,   56,   24,    0,   25,  103,  104,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,    0,    0,    0,   64,    0,    0,   30,
    0,    0,    0,  105,  297,  107,  108,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   71,   72,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  295,
    0,   41,    0,    0,    0,    0,    0,    0,    0,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,  296,    0,    0,    0,    0,    0,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,   56,   24,    0,   25,
  103,  104,   26,  294,    0,    0,    0,   27,   61,   62,
    0,   28,    0,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,    0,  105,  297,  107,  108,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  295,    0,   41,    0,    0,    0,    0,    0,    0,
    0,   86,    0,    0,   87,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
   90,   91,   92,   93,    0,    0,    0,    0,    0,    0,
    0,   95,    0,    0,    0,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,   56,   24,
    0,   25,  103,  104,   26,  294,    0,    0,    0,   27,
   61,   62,    0,   28,    0,    0,    0,    0,    0,    0,
   64,    0,    0,   30,    0,    0,    0,  105,  106,  107,
  108,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,   93,    0,    0,    0,    0,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
   79,   79,    0,   79,  103,  104,   79,   79,    0,    0,
    0,   79,   79,   79,    0,   79,    0,    0,    0,    0,
    0,    0,   79,    0,    0,   79,    0,    0,    0,  105,
  995,  107,  108,    0,    0,    0,   79,    0,    0,    0,
    0,   79,    0,   79,   79,   79,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
    0,   79,   79,    0,    0,   79,    0,    0,   79,    0,
   79,    0,   79,   79,   79,   79,    0,   79,    0,    0,
    0,    0,    0,    0,    0,   79,    0,    0,   79,   79,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   79,   79,   79,   79,   79,    0,    0,
    0,    0,    0,    0,    0,   79,    0,    0,    0,    0,
    0,   79,   79,   79,   79,    0,    0,    0,   79,    0,
   79,    0,  136,  136,    0,  136,   79,   79,  136,  136,
    0,    0,    0,  136,  136,  136,    0,  136,    0,    0,
    0,    0,    0,    0,  136,    0,    0,  136,    0,    0,
    0,   79,   79,   79,   79,    0,    0,    0,  136,    0,
    0,    0,    0,  136,    0,  136,  136,  136,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  136,    0,  136,  136,    0,    0,  136,    0,    0,
  136,    0,  136,    0,  136,  136,  136,  136,    0,  136,
    0,    0,    0,    0,    0,    0,    0,  136,    0,    0,
  136,  136,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  136,  136,  136,  136,  136,
    0,    0,    0,    0,    0,    0,    0,  136,    0,    0,
    0,    0,    0,  136,  136,  136,  136,    0,    0,    0,
  136,    0,  136,    0,   56,   24,    0,   25,  136,  136,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,    0,    0,    0,   64,    0,    0,   30,
    0,    0,    0,  136,  136,  136,  136,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   71,   72,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  295,
 1293,   41,    0,    0, 1157,    0,    0,    0, 1158, 1294,
 1295,    0,    0,    0,    0, 1296,    0,    0,    0, 1310,
    0,    0, 1298,    0,    0,    0, 1299,   89,   90,   91,
  327,  296,    0,    0,    0,    0,    0, 1300,    0,   95,
    0,    0,    0, 1301,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,   56,   24,    0,   25,
  103,  104,   26,  294,    0,    0,    0,   27,   61,   62,
 1302,   28,    0,    0,    0,    0,    0, 1303,   64,    0,
    0,   30,    0,    0,    0,  105,  328,    0,  108,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  295,    0,   41,   24,    0,   25,  469,    0,   26,
    0, 1244,    0,    0,   27,    0,    0,    0,   28,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   30,   89,
   90,   91,  327,    0,    0,    0,    0,    0,    0,   32,
    0,   95,    0,    0,   33,    0, 1245,    0,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   24,   36,   25,   37,    0,   26,    0,   38, 1246,
    0,   27,    0,    0,    0,   28,   39,   40,    0,   29,
   41,    0,    0,    0,  312,   30,    0,  105,  328,    0,
    0,   31,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,    0,    0,   34,   35,    0,   24,    0,
   25,    0,    0,   26,    0,    0,    0,    0,   27,   36,
    0,   37,   28,    0,    0,   38,    0,    0,    0,    0,
    0,    0,   30,   39,   40,    0,    0,   41,    0,  177,
    0,  177,    0,   32,  177,    0,    0,    0,   33,  177,
    0,    0,   34,  177,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  177,    0,  347,   36,    0,   37,    0,
    0,    0,   38,    0,  177,    0,    0,    0,    0,  177,
   39,   40,    0,  177,   41,    0,    0,    0,  312,    0,
    0,    0,    0,    0,    0,    0,    0,  177,    0,  177,
    0,    0,    0,  177,    0,    0,    0,    0,    0,    0,
    0,  177,  177,    0,  190,  177,  177,    0,  177,  177,
    0,  177,   42,    0,    0,    0,  177,    0,    0,    0,
  177,    0,    0,   24,    0,   25,    0,    0,   26,    0,
  177,    0,    0,   27,    0,    0,    0,   28,    0,    0,
    0,  177,    0,    0,  961,    0,  177,   30,    0,    0,
  177,    0,    0,    0,    0,    0,    0,    0,   32,  313,
    0,    0,    0,   33,  177,    0,  177,   34,    0,    0,
  177,    0,    0,    0,    0,    0,    0,    0,  177,  177,
    0,   36,  177,   37,    0,    0,  177,   38,    0,    0,
  177,    0,   24,    0,   25,   39,   40,   26,    0,   41,
    0,    0,   27,  312,    0,    0,   28,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,  961,
    0,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,    0,   24,   34,   25,    0,    0,
   26,    0,    0,    0,    0,   27,    0,    0,    0,   28,
   36,    0,   37,    0,    0,    0,   38,    0,    0,   30,
    0,    0,    0,    0,   39,   40,    0,  177,   41,    0,
   32,    0,  503,    0,    0,   33,    0,    0,   24,   34,
   25,    0,    0,   26,  347,    0,    0,    0,   27,    0,
    0,    0,   28,   36,    0,   37,    0,    0,    0,   38,
    0,    0,   30,    0,    0,    0,    0,   39,   40,    0,
    0,   41,    0,   32,    0,  552,    0,    0,   33,    0,
    0,   24,   34,   25,    0,    0,   26,    0,    0,    0,
    0,   27,    0,    0,    0,   28,   36,    0,   37,    0,
    0,    0,   38,    0,    0,   30,    0,    0,    0,    0,
   39,   40,    0,  347,   41,    0,   32,    0,  189,    0,
    0,   33,    0,    0,  478,   34,  478,    0,    0,  478,
    0,    0,    0,    0,  478,    0,    0,    0,  478,   36,
    0,   37,    0,    0,    0,   38,    0,    0,  478,    0,
    0,    0,    0,   39,   40,    0,  347,   41,    0,  478,
    0, 1491,    0,    0,  478,    0,    0,  178,  478,  178,
    0,    0,  178,    0,    0,    0,    0,  178,    0,    0,
    0,  178,  478,    0,  478,    0,    0,    0,  478,    0,
    0,  178,    0,    0,    0,    0,  478,  478,    0,  347,
  478,    0,  178,    0,  478,    0,    0,  178,    0,    0,
  177,  178,  177,    0,    0,  177,    0,    0,    0,    0,
  177,    0,    0,    0,  177,  178,    0,  178,    0,    0,
    0,  178,    0,    0,  177,    0,    0,    0,    0,  178,
  178,    0,  347,  178,    0,  177,    0,  178,    0,    0,
  177,    0,    0,  187,  177,  187,    0,    0,  187,    0,
    0,    0,    0,  187,    0,    0,    0,  187,  177,    0,
  177,    0,    0,    0,  177,    0,    0,  187,    0,    0,
    0,    0,  177,  177,    0,  478,  177,    0,  187,    0,
  177,    0,    0,  187,    0,    0,    0,  187,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  187,    0,  187,   30,    0,    0,  187,    0,   30,
    0,    0,    0,    0,    0,  187,  187,    0,  178,  187,
   30,   30,    0,  187,    0,   30,    0,    0,    0,   30,
   30,   30,    0,   30,    0,    0,   30,    0,    0,    0,
   30,    0,    0,   30,    0,    0,    0,   30,    0,   30,
   30,    0,    0,    0,    0,   30,    0,    0,   30,   36,
   30,  177,    0,   30,   30,   30,   30,   30,    0,    0,
   36,    0,   30,    0,    0,   36,   30,    0,   30,   36,
    0,    0,    0,   36,    0,    0,    0,    0,   30,    0,
    0,   30,   30,    0,   30,   36,    0,    0,   30,   36,
   36,    0,    0,    0,  187,   36,    0,    0,    0,    0,
   36,    0,    0,   36,    0,   36,   36,   36,   30,    0,
    0,    0,   36,    0,   30,   30,   36,    0,   36,    0,
   34,    0,    0,    0,    0,    0,    0,    0,   36,    0,
    0,   34,   36,    0,   36,    0,   34,    0,   36,   30,
   34,    0,    0,    0,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   34,   34,    0,   30,   36,   36,   34,    0,    0,    0,
    0,   34,    0,    0,   34,    0,   34,   34,   34,    0,
   30,    0,    0,   34,    0,   30,    0,   34,    0,   34,
   30,    0,    0,   30,    0,   30,   30,   30,    0,   34,
   30,    0,   30,   34,    0,   34,   30,    0,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,    0,   30,    0,   30,    0,    0,    0,    0,   34,
    0,    0,    0,    0,    0,   34,   34,    0,    0,    0,
   49,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,   49,   49,    0,   30,   30,   49,    0,    0,    0,
   49,   49,   49,    0,   49,    0,    0,   49,    0,    0,
    0,   49,    0,    0,   49,    0,    0,    0,   49,    0,
   49,   49,    0,    0,    0,    0,   49,    0,    0,   49,
   49,   49,    0,    0,   49,   49,   49,   49,   49,    0,
    0,   49,   49,   49,    0,    0,   49,   49,    0,   49,
   49,   49,   49,    0,   49,    0,    0,   49,    0,   49,
    0,   49,   49,   49,   49,   49,    0,    0,   49,   49,
   49,   49,    0,    0,    0,    0,   49,    0,    0,   49,
   49,   49,    0,    0,   49,   49,   49,   49,   49,   49,
    0,   49,   49,   49,    0,   82,   49,   49,    0,   49,
   49,   49,   49,    0,   49,    0,    0,   49,    0,   49,
    0,   49,   49,   49,   49,   49,    0,    0,   49,   49,
   49,   49,    0,    0,    0,    0,   49,    0,    0,   49,
   49,   49,    0,    0,   49,   49,   49,   49,   49,   49,
    0,   49,   49,   49,    0,  217,   49,   49,    0,   49,
   49,   49,   49,    0,   49,    0,    0,   49,    0,   49,
    0,   49,   49,   49,   49,   49,    0,    0,   49,   49,
   49,   49,    0,    0,    0,    0,   49,    0,    0,   49,
   49,   49,    0,    0,   49,   49,   49,   49,   49,   49,
    0,   49,    0,   49,    0,   83,   49,   49,    0,   49,
   49,    0,    0,    0,   49,    0,    0,    0,    0,   49,
    0,    0,   49,   49,    0,   49,    0,    0,    0,   49,
   49,   49,    0,    0,    0,    0,   49,    0,    0,    0,
   49,   49,    0,    0,   49,    0,   49,   49,   49,   49,
    0,   49,    0,   49,    0,  218,   49,   49,    0,   49,
   49,    0,    0,    0,   49,    0,    0,    0,    0,   49,
    0,    0,    0,   49,    0,   49,    0,    0,    0,   49,
   49,   49,    0,    0,    0,    0,   49,   49,    0,    0,
    0,   49,    0,    0,   49,    0,   49,   49,   49,   49,
    0,    0,    0,   49,    0,   38,   49,   49,    0,   49,
    0,   49,    0,    0,    0,    0,    0,    0,    0,   49,
    0,    0,    0,   49,    0,   49,    0,    0,   49,   49,
   49,    0,    0,   49,    0,    0,    0,    0,   49,    0,
    0,   49,    0,   49,   49,   49,    0,   49,    0,   49,
   49,    0,   49,    0,   49,   40,    0,   49,    0,    0,
   49,    0,   49,   49,   49,    0,   49,    0,   49,   49,
   49,    0,   49,   49,    0,    0,    0,    0,    0,    0,
    0,    0,   49,    0,   49,   49,    0,    0,    0,   49,
    0,   49,   49,    0,    0,    0,   49,    0,   49,   49,
    0,    0,  199,    0,    0,    0,   49,    0,    0,   49,
    0,    0,    0,    0,   49,   49,    0,   49,   49,   49,
    0,  201,   49,   49,   49,   49,   49,    0,   49,   49,
    0,   49,    0,   49,    0,   49,   49,    0,   49,   49,
   49,    0,    0,    0,   49,   49,    0,   49,    0,   49,
    0,   49,    0,   49,    0,    0,    0,    0,    0,    0,
    0,   49,    0,    0,    0,   49,    0,   49,   49,    0,
    0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
    0,    0,    0,  287,    0,   49,    0,    0,    0,    0,
   49,   49,    0,    0,    0,   49,    0,  288,   49,  631,
   49,   49,   49,    0,    0,    0,    0,   49,  631,  631,
    0,   49,    0,  631,    0,    0,    0,  631,  631,  631,
    0,    0,    0,   49,  631,    0,    0,   49,  631,   49,
    0,  631,    0,    0,    0,  631,   49,  631,   49,    0,
    0,    0,    0,    0,    0,    0,  631,    0,    0,    0,
    0,    0,  631,   49,    0,   49,   49,    0,  631,    0,
   49,    0,    0,    0,    0,    0,  631,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   49,    0,  631,
    0,    0,   49,    0,    0,    0,  631,   49,    0,    0,
   49,    0,   49,   49,   49,    0,    0,   49,    0,   49,
    0,    0,    0,   49,    0,    0,    0,    0,  631,  631,
    0,    0,    0,    0,    0,   49,    0,    0,    0,   49,
    0,   49,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   49,
  };
  protected static readonly short [] yyCheck = {            17,
  291,    6,   17,  292,  501,   17,   20,   18,   51,    6,
    4,   20,  241,  186,  359,   20,  290,  331,  311,   17,
  475,  283,  538,  157,  321,  192,  555,  346,   20,  888,
  288,   47,  499, 1191,  201, 1091,  733,    0,  280,  765,
   58,    0,   77,    0,    0,  433,  288,  563,  280,    0,
  257,   87,   88,    0,    0,  256,   51,  297,   73,  201,
 1146,   79,   77,   81,  268,  256,    0,  256,  706,  256,
  708,  256,  108, 1200, 1201,  256,  256,  309,  309,  256,
   95,  256,   87,   88,  256,  256,  256,  256,  887,  376,
  256, 1218,   17,   61,  622,  623,  268,   65,   66,   67,
   17,   69,   70,  108,  256, 1090,   74,   75,  376,  747,
  380,  256,  282,   81,   17,   83,  754,   85,  647,   17,
  256,   17,   90,   91,  256,  263,  277, 1112,  376,  950,
  281,  376,  263,   21,  257,  298,  384,  349, 1197,  157,
   17,   17,  157,   17,  187,  157,  114,  314,  311,  366,
  437,  321,  951,  974,  499,  298,  376,  191,  268,  157,
  256,  435,  256, 1222,   52,  377,  298,  437,  311,  437,
  206,  207,  347,  268,  375,  277,  377,  352,  379,  354,
  371,  276,  357,  358,  322,  360,  361,  371,  256,  437,
  419,  322,  437,  380,   17,  382,  239,  437,  495,  350,
  474,  206,  207,  348,  389,   17,  383,  498,  389,  389,
  256,  380,  709,  384,  230,  534, 1374,  437,  460, 1251,
  256, 1379, 1380, 1381,  538, 1383,  430,  428,  460,  460,
  431,  246,  157,  256, 1266,  426,  251,  426,  235, 1397,
  157, 1327,  426,  475,  475,  773,  282,  383,  636,  563,
  437,  256,  640, 1238,  157,  422,  426,  983,  430,  157,
  426,  157,  437,  426,  300, 1423,  376,  256,  283,  371,
 1428,  286,  287,  801,  426,  280,  371,  282,  520,  313,
  157,  157,   17,  157,  380,  379,  301,  292,  520,  520,
  308, 1276,  307,  256,  309,  300,  311,  994,  257,  426,
  257,  257,  469,  470,  309,  472,  257,  322,  323,   20,
  257,  257,  380,  347, 1040,  350,  256,  955,  352,  331,
  430,  284,  290,  257,  426,  427,  793,  295,  470,  648,
  472,  426,  346,  331,  157,  350,  382,  305,  343,  375,
  376,  346,  256,  358,  359,  157,  361,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371,  313,  893,  256,
  383,  422,  313,  297,  400,  401,  313,  313,  297,  376,
  375,  376,  256, 1429,  310,  436,   87,   88,  393,  313,
  877,  256, 1020,  256,  347,  913,  376,  915, 1515,  378,
  918,  256,  380,  382,  687,  400,  401,  108,  432,  442,
   93,  856,  256, 1435,   97,   98,   99,  100,  101,  102,
  103,  104,  375,  256,  423, 1542,  379,  256,  381,  453,
  383,  377,  157,  439,  440,  256,  256,  256,  371,  445,
  437, 1069,  381,  382,  256,  375,  426,  256, 1076,  448,
 1472,  376, 1474,  377,  384,  463,  310,  256,  793,  437,
  679,  256,  949,  711,  799,  460, 1094,  256,  986,  778,
  988,  989,  266, 1495,  378,  256,  371,  462,  382,  711,
  475,  377,  262,  380,  256,  424,  349,  377,  384,  376,
 1009, 1016,  497,  426,  499,  382,  501,  371,  332, 1348,
  256,  384,  526,  511,  512,  206,  207,  465,  382,  256,
  384,  515,  437,  471,  377,  389,  515,  382, 1238,  524,
  515,  379,  527,  303,  379,  520,  381,  321,  383,  553,
  534,  426,  376,  515,  256,  844,  538,  545,  382,  534,
  437,  565, 1356,  567,  256,  569, 1360, 1361,  377,  382,
  538,  555,  426,  511,  437,  256, 1276,  256,  377,  380,
  555,  563,  382, 1081,  384,  377,  347,  572,  573,  389,
  379,  352,  381,  354,  383,  563,  357,  358,  377,  360,
  361,  282,  332,  870,  332,  380,  743, 1105,  377,  383,
  380,  292,  426, 1099,  266,  930,  720,  280,  310,  300,
  365,  382,  379, 1417,  375,  288,  386,  387,  380,  888,
  874,  635,  617,  296,  256,  371,  376,  622,  623,  366,
  625,  377,  256,  382, 1232,  347,  382,  384,  384,  394,
  352,  382,  354,  389,  658,  357,  358, 1155,  360,  361,
 1454, 1455,  343,  647,  384,  346, 1164,  437,  347,  321,
 1095,  428,  647,  352,  935,  354,  437,  351,  357,  358,
  382,  360,  361,  402,  403,  424,  426,  672,  310,  952,
  426,  256, 1486,  424,  375,  376,  426,  360,  426,  379,
  256,  272,  687,  964,  426,  432,  433,  434,  435,  372,
  373,  374,  272,  311,  377,  378,  314,  277, 1306,  400,
  401,  281,  320, 1311,  709,  399,  272, 1238,  381,  714,
  301,  383,  738,  347,  332,  437,  347, 1052,  352,  256,
  354,  301,  423,  357,  358,  256,  360,  361,  422,  272,
  976,  755,  740, 1341,  760,  301,  377,  365,  437,  330,
  381,  426,  436,  738,  375, 1276,  751,  448,  774,  377,
  330,  436,  757,  381,  759,  763,  384,  765,  301,  922,
 1238,  256,  380,  347,  330,  760,  394, 1238,  773, 1073,
  350,  347, 1018, 1238,  778, 1027,  352,  460,  354,  774,
 1238,  357,  358,  778,  360,  361,  371,  330,  793,  371,
  431,  375,  377,  826,  799, 1099,  801,  382, 1276,  384,
  384,  429,  375,  437,  389, 1276,  379, 1059,  426,  399,
 1091, 1276,  394,  256,  515,  311,  347,  379, 1276,  381,
  846,  352, 1126,  354,  320,  311,  357,  358,  314,  360,
  361, 1238,  422,  534,  320,  834,  841,  520,  375,  347,
  377,  426,  379,  380,  426,  382,  332,  384,  389,  397,
  399,  846,  347,  858,  555,  428,  269,  352,  399,  354,
  865,  437,  357,  358,  849,  360,  361,  375, 1120, 1276,
  875,  387,  877,  422,  287, 1497, 1498,  560,  261,  311,
  311,  422,  314,  314,  422,  351,  298,  436,  320,  320,
 1109,  428,  378,  888,  431,  298,  865,  261,  436,  311,
  332,  332,  285, 1297,  347, 1527,  437,  876,  913,  352,
  915,  354,  426,  918,  357,  358, 1310,  360,  361,  302,
  392,  285,  436,  389,  307,  930,  393,  409,  927,  312,
  935,  351,  315,  399,  317,  318,  319,  408,  302,  421,
  426,  324,  437,  307,  949,  328,  647,  952,  312,  360,
  311,  315,  376,  317,  318,  319,  422,  340,  382,  320,
  324,  344,  365,  346,  328,  389,  377,  378,  371,  389,
  436,  332,  398, 1460,  377,  983,  340,  380,  381,  399,
  344,  986,  346,  988,  989, 1204,  991,  370,  256, 1241,
 1477,  394,  406,  407,  426,  426,  365,  382,  375,  384,
  394,  269,  422,  389,  389, 1009,  370,  384,  372,  373,
  384,  365,  381,  399, 1009,  375,  436, 1001,  377,  287,
  375,  385, 1027,  426,  384,  394,  429,  381,  711,  384,
  375,  378, 1040, 1038, 1039,  382,  422,  738, 1297,  384,
  394,  362,  363,  426, 1531,  365,  375, 1052,  429,  371,
  436, 1310, 1053,  381, 1059,  384,  378, 1090,  380,  760,
  382,  381,  426,  379, 1323, 1324,  375,  389, 1327, 1348,
  422, 1073,  261,  774,  394,  384, 1081,  778,  365, 1112,
  426,  311, 1087,  272,  314, 1073, 1091,  376,  277,  380,
  320,  380,  281,  384,  381,  384,  285, 1099,  362,  363,
 1105, 1106,  332, 1362,  426, 1090,  376,  394,  379,  380,
  380, 1099,  301,  302,  384, 1120,  378,  379,  307,  381,
  382,  383,  381,  312, 1126,  384,  315, 1112,  317,  318,
  319,  313,  380,  834,  382,  324,  384,  256, 1126,  328,
  347,  330,  426,  376,  379,  846,  381,  380, 1429, 1175,
 1155,  340,  380, 1157,  382,  344,  384,  346,  379, 1164,
  381,  350, 1157,  378, 1197,  400,  401,  382,  375,  383,
  377, 1158, 1198,  380,  384,  382,  377,  384, 1165,  380,
 1175,  370,  389,   20,  378,  420,  380,  888,  382, 1222,
 1177,  378, 1179,  428, 1181,  382,  431,  378, 1224,  365,
  375,  382,  377, 1198, 1237, 1238, 1191,  372,  373,  378,
 1236,  377, 1197,  382,  380,  381,  261,  384,  384,  426,
  375, 1254,   59,  380,  381,  384,  927,  384,  394, 1224,
  380,   68,  382,  384,  390,  391, 1241, 1222,  378,  379,
  285, 1236,  382, 1276,  380, 1278,  382,   84,  404,  405,
   87,   88, 1237,  383,  376,   92, 1282,  302,  380,  394,
  395,  396,  307,  429,  378,  365,  380,  312,  382, 1254,
  315,  371,  317,  318,  319,  376,  377,  377, 1286,  324,
  380,  381,  382,  328,  376,  376,  377, 1282,  380,  382,
 1314,  384,  298, 1278,  394,  340,  378,  426,  380,  344,
  298,  346,  381,  382,  383,  384,  277, 1331, 1009,  378,
  378,  380,  380,  378,  351,  380, 1342,  380, 1344,  382,
  380, 1345, 1346,  372,  373,  370,  426,  372,  373,  382,
 1338,  384,  384,  380, 1358,  382,  422,  378, 1371,  380,
  378,  426,  380,  382,  377,  384,  382, 1342,  384, 1344,
  385,  386, 1356, 1348, 1194, 1195, 1360, 1361,  383,  364,
  197, 1356,  382,  380,  384, 1360, 1361,  382,  426,  384,
  380,  384,  376,  382,  298,  426, 1371, 1410,  380,  380,
  298,  426,  382,  380,  380,  384,  380,  382,  379, 1374,
  256,  298,  298,  380, 1379, 1380, 1381,  389, 1383,  384,
  382,  381,  383,  382, 1437, 1438,  381,  380,  382,  246,
  382, 1419, 1397, 1417,  382,  384,  382,  431, 1444,  437,
    0,  380, 1417,  375, 1429,  382, 1459,  382,  382,  380,
 1456,  380,  351,  298,  298,  382,  426,  378, 1423,  379,
  375, 1446,  426, 1428,  389,  256,  256,  389,  426, 1444,
 1454, 1455,  280,  256, 1458, 1460, 1157,  384,  375, 1454,
 1455, 1456,  376, 1458, 1497, 1498,  351,  380,  359,  378,
  382,  382, 1477,  383, 1175,  380,  272,  273,  382,  316,
  378,  277, 1486,  320,  384,  281,  282,  283,  380,  384,
  380, 1486,  288,  431, 1527,  389,  292, 1198,  355,  295,
  389,  256,  256,  299,  380,  301,  376,  384,  355,  382,
  378,  389,  375,  356,  310, 1523, 1524,  389,  378,  364,
  316,  358,  359, 1224,  376,  356, 1531,  376,  261,  426,
  383, 1539, 1540,   93,  330, 1236,  256,   97,   98,   99,
  100,  101,  102,  103,  104,  256,  379,  343,  265,  375,
  267,  380,  285,  270,  350,  284,  347,  426,  275,  382,
  376,  375,  279,  400,  401,  426,  375,  404,  375,  302,
  389,  384,  289,  379,  307,  376,  384,  382,  376,  312,
  380, 1282,  315,  300,  317,  318,  319,  376,  305,  426,
    0,  324,  309, 1294,  311,  328, 1297,  292, 1299,  426,
 1301,  438,  426,  320,  426,  426,  323,  340,  325, 1310,
  383,  344,  329,  346,  383,  332,  379,  383,  379,  383,
  337,  338, 1323, 1324,  341,  383, 1327,  426,  345,  426,
  379,  383,  422,  381,  379,  379,  473,  370,  426,  476,
  379, 1342,  256, 1344,  375,  381,  381, 1348,  380,  379,
  377,  376,  389,  379,  379, 1356,  381,  382,  380, 1360,
 1361, 1362,  499,  376,  380,  384,  379,  377,  381,  382,
 1371,  383,  380,  380,  380,  400,  401,  257,  515,  380,
  389,  261,  519,  375,  382,  382,  256,  400,  401,  383,
  380,  382,  272,  376,  383,  420,  383,  277,  383,  383,
  382,  281,  426,  428,  273,  285,  431,  420,  277,  426,
  384,  426,  281,  282,  283,  428, 1417,  554,  431,  288,
  384,  301,  302,  292,  426,  384,  295,  307,  383,  378,
  299,  384,  312,  313,  380,  315,  296,  317,  318,  319,
  426,  310,  389, 1444,  324,  378,  375,  316,  328,  389,
  330,  383,  263, 1454, 1455, 1456,  322, 1458,  376,  345,
  340,  321,    0,  376,  344,    0,  346,  375,  384,  376,
  350,    0,  375,  384,  343,  380,  376,  375,  380,  380,
  389,  350,  619,  426,  621, 1486,  378,  426,  384,  376,
  370,    0,  380,  630,  376,  384,  376,  377,  376,  378,
  360,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  384,  372,  373,  374,  380,  384,  377,  378,  379,
  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,
  390,  391,  392,  380,  376,  672,  384,  376,  376,  375,
  375,  426,  426,  376,  384,  322,  256,  257,  377,  381,
  384,  263,   50,  384,  264,  265,  266,  267,  268,  696,
  270,  271,  384,  273,  274,  275,  276,  277,  278,  279,
  280,  384,  384,  187,  384,  384,  286,  384,  288,  289,
  290,  291,   12,  293,  294,    0,    5,  515, 1112, 1052,
  300,  834, 1052,  927,  304,  305, 1278,  307,  308,  309,
 1467, 1254, 1432, 1463, 1483, 1449,  256, 1419,  678, 1301,
  849,  321,  849,  323,  844,  325,  326,  849, 1540,  329,
 1276,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343, 1300,  495, 1525, 1442,  348,  349,
  777, 1438,  352,  353, 1437, 1222, 1524, 1346, 1299, 1224,
  499,  826,  714,  799,  870,  358,  793,  367,  368,  369,
  370,  371,  799,  573,   71,  375,  376,  672,  711,  379,
  324,  964,  387,  389,  384,  385,  386,  387,  388,  388,
  391,  534,  392,  390,  394,  778,  392, 1214, 1282, 1126,
  400,  401, 1073,  157,  513, 1039, 1007,  347,  974, 1030,
  560, 1095,  352, 1032,  354,  355,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  425,  426,  427,  428,  886,
  430,  409,  628,  409, 1173,   -1,  376,  437,  378, 1106,
  380,   -1,  382,  383,  384,   -1,   -1,  832,   -1,  831,
   -1,   -1,   -1,   -1,  881,   -1,  883,  256,  257,   -1,
   -1,   -1,    0,   -1,  891,  264,  265,  266,  267,  268,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,  288,
  289,  290,  291,   -1,  293,  294,   -1,  437,   -1,   -1,
   -1,  300,   -1,  930,   -1,  304,  305,   -1,  307,  308,
  309,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  321,   -1,  323,   -1,  325,  326,   -1,   -1,
  329,   -1,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,   -1,   -1,   -1,   -1,  348,
  349,  256,   -1,  352,  353,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
  369,  370,  371,    0,   -1,   -1,  375,  376, 1005,   -1,
  379,   -1,   -1,   -1,   -1,  384,  385,  386,  387,  388,
   -1,   -1,   -1,  392,   -1,  394,   -1,   -1,  303,   -1,
   -1,  400,  401,   -1,  347,   -1,   -1,   -1,   -1,  352,
   -1,  354,  355,  356,  357,  358,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1, 1052,  425,  426,  427,  428,
   -1,  430,   -1,  376,   -1,  378,   -1,  380,  437,  382,
  383,  384,  347,   -1,   -1,   -1,   -1,  352,   -1,  354,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,
  375,  376,   -1,  378,  379,  380,  381,  382,  383,  384,
   -1,  386,  387,    0,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  437,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,   -1,  256,  424,
  870,  426,  256,  428,  262,   -1,  431,   -1,   -1,   -1,
   -1,  265,  437,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1, 1171,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  303,  300,   -1,   -1,   -1,
   -1,  305,   -1,   -1,   -1,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
   -1,  325,   -1,    0,   -1,  329,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  337,  338,   -1,   -1,  341,   -1,  347,
   -1,  345,   -1,   -1,  352,   -1,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,   -1,  256,
   -1,   -1,   -1,  371,   -1,  262,   -1,  375,  376,  377,
  378,  379,  380,  381,  382,  383,  384,   -1,  386,  387,
   -1,  389,  390,  391,  392,  393,  394,   -1,   -1,  397,
  398,   -1,   -1,   -1,  402,  403,  404,  405,  406,  407,
  408,  409,   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,
   -1,   -1,   -1,  421,   -1,   -1,  424,   -1,  426,   -1,
  428,   -1,  426,  431,   -1,   -1,   -1,   -1,   -1,  437,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  347,   -1,   -1,   -1,   -1,  352,   -1,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,   -1,  256,
   -1,   -1,   -1,   -1,  371,  262,   -1,   -1,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,  384,   -1,  386,
  387,   -1,  389,  390,  391,  392,  393,   -1,   -1,   -1,
  397,  398,   -1,   -1,   -1,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,   -1,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  421,   -1,   -1,  424,   -1,  426,
   -1,  428,   -1,   -1,  431,   -1,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  347,   -1,   -1,   -1,   -1,  352,   -1,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,   -1,  256,
   -1,   -1,   -1,   -1,  371,  262,    0,   -1,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,  384,   -1,  386,
  387,   -1,  389,  390,  391,  392,  393,   -1,   -1,   -1,
  397,  398,   -1,   -1,   -1,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,   -1,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  421,   -1,   -1,  424,   -1,  426,
   -1,  428,   -1,   -1,  431,   -1,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
  347,   -1,   -1,   -1,   -1,  352,   -1,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,   -1,  256,
   -1,   -1,   -1,   -1,  371,  262,   -1,   -1,  375,  376,
   -1,  378,  379,  380,   -1,  382,  383,  384,   -1,  386,
  387,   -1,  389,  390,  391,  392,  393,   -1,   -1,   -1,
  397,  398,   -1,   -1,   -1,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,   -1,  303,   -1,   -1,   -1,
   -1,   -1,   -1,    0,  421,   -1,   -1,  424,   -1,  426,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  347,   -1,   -1,   -1,   -1,  352,   -1,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,   -1,   -1,
   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,  376,
   -1,  378,  379,  380,   -1,  382,  383,  384,   -1,  386,
  387,   -1,  389,  390,  391,  392,  393,   -1,   -1,   -1,
  397,  398,   -1,   -1,   -1,  402,  403,  404,  405,  406,
  407,  408,  409,  257,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,   -1,   -1,  421,   -1,   -1,  424,  272,  426,
   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,   -1,
  437,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  297,   -1,   -1,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,   -1,   -1,   -1,  312,  313,
   -1,  315,   -1,  317,  318,  319,   -1,   -1,   -1,   -1,
  324,   -1,   -1,   -1,  328,   -1,  330,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  340,  261,   -1,  263,
  344,   -1,  346,   -1,   -1,   -1,  350,   -1,  272,  273,
   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,  282,  283,
   -1,  285,   -1,   -1,  288,   -1,  370,   -1,  292,   -1,
   -1,  295,  376,  377,  298,  299,   -1,  301,  302,   -1,
  384,   -1,   -1,  307,   -1,   -1,  310,  311,  312,  313,
   -1,  315,  316,  317,  318,  319,   -1,   -1,  322,   -1,
  324,   -1,   -1,   -1,  328,   -1,  330,   -1,   -1,   -1,
  257,   -1,   -1,   -1,  261,   -1,  340,   -1,   -1,  343,
  344,   -1,  346,   -1,   -1,  272,  350,   -1,   -1,   -1,
  277,   -1,   -1,  437,  281,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,  373,
  297,   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,
  307,   -1,   -1,   -1,   -1,  312,  313,   -1,  315,   -1,
  317,  318,  319,   -1,   -1,   -1,   -1,  324,   -1,   -1,
   -1,  328,   -1,  330,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  340,   -1,   -1,   -1,  344,   -1,  346,
   -1,   -1,  426,  350,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  370,   -1,  264,  265,  266,  267,  376,
  377,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,  288,
  289,  290,  291,   -1,  293,  294,   -1,   -1,   -1,   -1,
   -1,  300,   -1,   -1,  286,  304,  305,   -1,  307,  308,
  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  321,   -1,  323,   -1,  325,  326,   -1,   -1,
  329,   -1,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  256,   -1,   -1,   -1,  348,
  349,  262,  334,  352,  353,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
  369,  370,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,
  379,   -1,   -1,   -1,   -1,  384,  385,  386,  387,  388,
   -1,   -1,  303,  392,   -1,  394,   -1,   -1,   -1,   -1,
   -1,  400,  401,  385,  386,  387,  388,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,   -1,   -1,  400,  401,
  402,  403,  404,  405,  406,  407,  425,  426,  427,  428,
   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,  437,   -1,
  256,  352,   -1,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,   -1,   -1,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,
  381,  382,  383,  384,   -1,  386,  387,   -1,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,   -1,  256,   -1,   -1,  426,   -1,  428,  262,   -1,
  431,   -1,   -1,   -1,   -1,   -1,  437,   -1,   -1,   -1,
   -1,  347,   -1,   -1,   -1,   -1,  352,   -1,  354,  355,
  356,  357,  358,  359,  360,  361,  362,  363,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,
  376,   -1,  378,   -1,  380,   -1,  382,  383,  384,   -1,
   -1,   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,
   -1,  397,  398,   -1,   -1,   -1,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  347,   -1,  421,   -1,  256,  352,   -1,
  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  437,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,  379,  380,  381,  382,  383,
  384,   -1,  386,  387,   -1,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,   -1,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,   -1,  256,
   -1,   -1,   -1,   -1,  428,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  437,   -1,   -1,   -1,   -1,  347,   -1,
   -1,   -1,   -1,  352,   -1,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  303,  376,   -1,  378,
   -1,  380,   -1,  382,  383,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,   -1,  397,  398,
   -1,   -1,   -1,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  347,   -1,  421,   -1,  256,  352,   -1,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  437,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,  376,
   -1,  378,  379,  380,  381,  382,  383,  384,   -1,  386,
  387,   -1,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,   -1,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,   -1,  256,   -1,   -1,   -1,
   -1,  428,  262,   -1,  431,   -1,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,   -1,
  352,   -1,  354,  355,  356,  357,  358,  359,  360,  361,
  362,  363,  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,  376,   -1,  378,   -1,  380,   -1,
  382,  383,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,
  392,  393,   -1,   -1,   -1,  397,  398,   -1,   -1,   -1,
  402,  403,  404,  405,  406,  407,  408,  409,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,  421,
   -1,  256,  352,   -1,  354,  355,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  437,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,  379,
  380,  381,  382,  383,  384,   -1,  386,  387,   -1,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,   -1,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,   -1,  256,   -1,   -1,   -1,   -1,  428,  262,
   -1,  431,   -1,   -1,   -1,   -1,   -1,  437,   -1,   -1,
   -1,   -1,  347,   -1,   -1,   -1,   -1,  352,   -1,  354,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  303,  376,   -1,  378,   -1,  380,   -1,  382,  383,  384,
   -1,   -1,   -1,   -1,   -1,  390,  391,  392,  393,   -1,
   -1,   -1,  397,  398,   -1,   -1,   -1,   -1,   -1,  404,
  405,  406,  407,  408,  409,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  347,   -1,  421,   -1,  256,  352,
   -1,  354,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  437,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  376,   -1,  378,  379,  380,  381,  382,
  383,  384,   -1,  386,  387,   -1,  389,  390,  391,  392,
  393,  394,  395,  396,  397,  398,   -1,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,   -1,
  256,   -1,   -1,   -1,   -1,  428,  262,   -1,  431,   -1,
   -1,   -1,   -1,   -1,  437,   -1,   -1,   -1,   -1,  347,
   -1,   -1,   -1,   -1,  352,   -1,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,  376,   -1,
  378,   -1,  380,   -1,  382,  383,  384,   -1,   -1,   -1,
   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,  397,
  398,   -1,   -1,   -1,   -1,   -1,  404,  405,  406,  407,
  408,  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  347,   -1,  421,   -1,  256,  352,   -1,  354,  355,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  437,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  376,   -1,  378,  379,  380,  381,  382,  383,  384,   -1,
  386,  387,   -1,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,   -1,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,   -1,  256,   -1,   -1,
   -1,   -1,  428,  262,   -1,  431,   -1,   -1,   -1,   -1,
   -1,  437,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,
   -1,  352,   -1,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  303,  376,   -1,  378,   -1,  380,
   -1,  382,  383,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,   -1,   -1,   -1,  397,  398,   -1,   -1,
   -1,   -1,   -1,  404,  405,  406,  407,  408,  409,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,
  421,   -1,   -1,  352,   -1,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  437,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,
  379,  380,  381,  382,  383,  384,   -1,  386,   -1,   -1,
  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
   -1,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,   -1,  256,   -1,  256,   -1,   -1,  428,
  262,   -1,  431,   -1,  264,  265,   -1,  267,  437,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  300,  303,   -1,   -1,   -1,  305,   -1,  307,  308,  309,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,  323,  262,  325,  326,   -1,  266,  329,
   -1,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
   -1,  341,   -1,   -1,   -1,  347,   -1,   -1,   -1,   -1,
  352,   -1,  354,  355,  356,  357,  358,  359,  360,  361,
  362,  363,  364,   -1,   -1,  303,   -1,  367,  368,  369,
  370,   -1,   -1,   -1,  376,   -1,  378,   -1,  380,  379,
  382,  383,  384,  321,  386,  387,   -1,  389,  390,  391,
  392,  393,  394,  395,  396,  397,  398,   -1,   -1,   -1,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  256,  421,
   -1,   -1,   -1,   -1,   -1,  425,  426,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  437,   -1,   -1,  376,   -1,
  378,  379,  380,  381,  382,  383,  384,   -1,  386,  387,
   -1,  389,  390,  391,  392,  393,  394,  395,  396,  397,
  398,   -1,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,   -1,  256,   -1,   -1,   -1,   -1,
  428,  262,   -1,  431,   -1,   -1,   -1,   -1,   -1,  437,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,
   -1,   -1,   -1,   -1,  352,   -1,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,   -1,   -1,   -1,
   -1,   -1,  303,   -1,   -1,   -1,   -1,   -1,  376,   -1,
  378,   -1,  380,   -1,  382,  383,  384,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,
  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,
   -1,  352,   -1,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,   -1,   -1,   -1,   -1,   -1,  437,
  303,   -1,   -1,   -1,   -1,  376,   -1,  378,   -1,  380,
   -1,  382,  383,  384,   -1,  386,  387,   -1,   -1,  390,
  391,  392,  393,  394,  395,  396,  397,  398,   -1,   -1,
   -1,  402,  403,  404,  405,  406,  407,  408,  409,  256,
   -1,   -1,   -1,   -1,  347,  262,   -1,   -1,   -1,  352,
  421,  354,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,   -1,   -1,   -1,   -1,  437,   -1,   -1,   -1,
   -1,   -1,   -1,  376,   -1,  378,   -1,  380,   -1,  382,
  383,  384,   -1,  386,  387,   -1,  303,  390,  391,  392,
  393,   -1,   -1,   -1,  397,  398,   -1,   -1,   -1,  402,
  403,  404,  405,  406,  407,  408,  409,  256,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,  421,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  347,   -1,   -1,   -1,  437,  352,   -1,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  376,
   -1,  378,   -1,  380,   -1,  382,  383,  384,   -1,  386,
  387,   -1,   -1,  390,  391,  392,  393,  256,   -1,   -1,
  397,  398,   -1,  262,   -1,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,   -1,   -1,   -1,  347,   -1,
   -1,   -1,   -1,  352,  421,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,  303,   -1,   -1,  376,   -1,  378,
   -1,  380,   -1,  382,  383,  384,   -1,  386,  387,   -1,
   -1,  390,  391,  392,  393,  256,   -1,   -1,  397,  398,
   -1,   -1,   -1,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,
   -1,   -1,  421,  352,   -1,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,   -1,   -1,  437,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,
   -1,  380,   -1,  382,  383,  384,   -1,  386,  387,   -1,
   -1,  390,  391,  392,  393,  256,   -1,   -1,  397,  398,
   -1,   -1,   -1,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,
   -1,  352,  421,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,   -1,   -1,   -1,   -1,  437,   -1,
   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,   -1,  380,
   -1,  382,  383,  384,   -1,   -1,   -1,  256,   -1,  390,
  391,  392,  393,  262,   -1,   -1,  397,  398,   -1,   -1,
   -1,   -1,   -1,  404,  405,  406,  407,  408,  409,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,
  421,  352,   -1,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  303,   -1,  437,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,   -1,  380,
   -1,  382,  383,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,   -1,   -1,   -1,  397,  398,   -1,   -1,
   -1,   -1,   -1,  404,  405,  406,  407,  408,  409,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  437,  376,   -1,   -1,
  379,   -1,  381,  382,   -1,   -1,   -1,  386,  387,   -1,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,  398,
   -1,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  420,  421,   -1,   -1,   -1,   -1,   -1,   -1,  428,
   -1,   -1,  431,   -1,   -1,   -1,   -1,   -1,  437,   -1,
  347,   -1,   -1,   -1,   -1,  352,   -1,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,
   -1,  378,   -1,  380,   -1,  382,  383,  384,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  392,  393,  256,   -1,   -1,
  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,
  407,  408,  409,   -1,   -1,   -1,   -1,   -1,  347,   -1,
   -1,   -1,   -1,  352,  421,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,
   -1,  380,   -1,  382,  383,  384,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  392,  393,  256,   -1,   -1,  397,  398,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,
   -1,   -1,  421,  352,   -1,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,   -1,   -1,  437,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,
   -1,  380,   -1,  382,  383,  384,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  392,  393,  256,   -1,   -1,  397,  398,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,
   -1,  352,  421,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,   -1,   -1,   -1,   -1,  437,   -1,
   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,   -1,  380,
   -1,  382,  383,  384,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  392,  393,  256,   -1,   -1,  397,  398,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  408,  409,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,
  421,  352,   -1,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,   -1,   -1,  437,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,   -1,  380,
   -1,  382,  383,  384,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  392,  393,  256,   -1,   -1,  397,  398,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  408,  409,   -1,
   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,   -1,  352,
  421,  354,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,   -1,   -1,   -1,   -1,  437,   -1,   -1,   -1,
   -1,   -1,   -1,  376,   -1,  378,   -1,  380,   -1,  382,
  383,  384,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  393,  256,   -1,   -1,  397,  398,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  408,  409,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,  421,  352,
   -1,  354,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,   -1,   -1,  437,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  376,   -1,  378,   -1,  380,   -1,  382,
  383,  384,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  393,   -1,   -1,   -1,  397,  398,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  408,  409,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,   -1,   -1,  352,  421,  354,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
   -1,   -1,   -1,   -1,  437,   -1,   -1,   -1,   -1,   -1,
   -1,  376,   -1,  378,   -1,  380,   -1,  382,  383,  384,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  393,   -1,
   -1,   -1,   -1,  398,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  408,  409,   -1,   -1,   -1,   -1,   -1,
  347,   -1,   -1,   -1,   -1,  352,  421,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,   -1,   -1,
   -1,   -1,  437,   -1,   -1,   -1,   -1,   -1,   -1,  376,
   -1,  378,   -1,  380,   -1,  382,  383,  384,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  393,   -1,   -1,   -1,
   -1,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  408,  409,   -1,   -1,   -1,   -1,   -1,  347,   -1,
   -1,   -1,   -1,  352,  421,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,
   -1,  380,   -1,  382,  383,  384,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  398,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  408,
  409,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,
   -1,  352,  421,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,   -1,   -1,   -1,   -1,  437,   -1,
   -1,   -1,   -1,   -1,   -1,  376,   -1,  378,   -1,  380,
   -1,  382,  383,  384,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  398,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  408,  409,   -1,
   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,   -1,  352,
  421,  354,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,   -1,   -1,  256,   -1,  437,   -1,   -1,   -1,
  262,   -1,   -1,  376,   -1,  378,   -1,  380,   -1,  382,
  383,  384,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  398,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,
   -1,  303,  347,   -1,   -1,   -1,   -1,  352,  421,  354,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
   -1,   -1,   -1,   -1,  437,   -1,   -1,   -1,   -1,   -1,
   -1,  376,   -1,  378,   -1,  380,   -1,  382,  383,  384,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  398,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,  377,  421,  379,  380,  381,
  382,   -1,  384,   -1,  386,  387,   -1,  389,  390,  391,
  392,  393,  437,  395,  396,  397,  398,   -1,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
   -1,   -1,  256,   -1,  426,   -1,  428,   -1,   -1,  431,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,  288,  289,  290,  291,   -1,  293,
  294,   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,  305,   -1,  307,  308,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,
   -1,  325,  326,   -1,   -1,  329,   -1,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
   -1,   -1,   -1,   -1,  348,  349,   -1,   -1,  352,  353,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  368,  369,  370,  371,   -1,   -1,
   -1,  375,   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,
  384,  385,  386,  387,  388,   -1,   -1,   -1,  392,   -1,
  394,   -1,   -1,   -1,   -1,  256,  400,  401,   -1,   -1,
   -1,   -1,   -1,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,  425,  426,  427,  428,  286,   -1,  288,  289,  290,
  291,   -1,  293,  294,   -1,   -1,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,  305,   -1,  307,  308,  309,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  321,   -1,  323,   -1,  325,  326,   -1,   -1,  329,   -1,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,   -1,   -1,   -1,   -1,  348,  349,   -1,
   -1,  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,  369,  370,
  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,  379,   -1,
   -1,   -1,   -1,  384,  385,  386,  387,  388,   -1,   -1,
   -1,  392,   -1,  394,   -1,   -1,   -1,   -1,  256,  400,
  401,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,  425,  426,  427,  428,  286,   -1,
  288,  289,  290,  291,   -1,  293,  294,   -1,   -1,   -1,
   -1,   -1,  300,   -1,   -1,   -1,  304,  305,   -1,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  321,   -1,  323,   -1,  325,  326,   -1,
   -1,  329,   -1,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,   -1,   -1,   -1,   -1,
  348,  349,   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,  369,  370,  371,   -1,   -1,   -1,  375,   -1,   -1,
   -1,  379,   -1,   -1,   -1,   -1,  384,  385,  386,  387,
  388,   -1,   -1,   -1,  392,   -1,  394,   -1,   -1,   -1,
   -1,  256,  400,  401,   -1,   -1,   -1,   -1,   -1,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,  425,  426,  427,
  428,  286,   -1,  288,  289,  290,  291,   -1,  293,  294,
   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
  305,   -1,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,   -1,
  325,  326,   -1,   -1,  329,   -1,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,   -1,
   -1,   -1,   -1,  348,  349,   -1,   -1,  352,  353,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,  368,  369,  370,  371,   -1,   -1,   -1,
  375,   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,  384,
  385,  386,  387,  388,   -1,   -1,   -1,  392,   -1,  394,
   -1,   -1,   -1,   -1,  256,  400,  401,   -1,   -1,   -1,
   -1,   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
  425,  426,  427,  428,  286,   -1,  288,  289,  290,  291,
   -1,  293,  294,   -1,   -1,   -1,   -1,   -1,  300,   -1,
   -1,   -1,  304,  305,   -1,  307,  308,  309,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,
   -1,  323,   -1,  325,  326,   -1,   -1,  329,   -1,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,   -1,   -1,   -1,   -1,  348,  349,   -1,   -1,
  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,
   -1,   -1,   -1,  375,   -1,   -1,   -1,  379,   -1,   -1,
   -1,   -1,  384,  385,  386,  387,  388,   -1,   -1,   -1,
  392,   -1,  394,   -1,   -1,   -1,   -1,  256,  400,  401,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,  425,  426,  427,  428,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  300,   -1,   -1,   -1,   -1,  305,   -1,  307,  308,
  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,   -1,  325,  326,   -1,   -1,
  329,   -1,   -1,  332,   -1,  334,   -1,  336,  337,  338,
  339,   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  349,   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
  369,  370,  371,   -1,   -1,   -1,  375,  376,   -1,   -1,
  379,   -1,   -1,   -1,   -1,   -1,  385,  386,  387,  388,
   -1,   -1,   -1,  392,   -1,  394,   -1,   -1,   -1,   -1,
  256,  400,  401,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,  425,  426,  427,  428,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,
   -1,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,
  326,  327,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,   -1,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  349,   -1,   -1,  352,  353,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  368,  369,  370,  371,   -1,   -1,   -1,  375,
   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,
  386,  387,  388,   -1,   -1,   -1,  392,   -1,  394,   -1,
   -1,   -1,   -1,  256,  400,  401,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,  425,
  426,  427,  428,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,
   -1,   -1,  305,   -1,  307,  308,  309,   -1,  311,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,   -1,
  323,   -1,  325,  326,   -1,   -1,  329,   -1,   -1,  332,
   -1,  334,   -1,  336,  337,  338,  339,   -1,  341,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,   -1,  352,
  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,   -1,
   -1,   -1,  385,  386,  387,  388,   -1,   -1,   -1,  392,
   -1,  394,   -1,  264,  265,   -1,  267,  400,  401,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,  425,  426,  427,  428,   -1,   -1,   -1,  300,
   -1,   -1,   -1,   -1,  305,   -1,  307,  308,  309,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  323,   -1,  325,  326,   -1,   -1,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,   -1,
  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,
   -1,  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,  369,  370,
  371,   -1,   -1,   -1,  375,  376,   -1,   -1,  379,   -1,
   -1,   -1,   -1,   -1,  385,  386,  387,  388,   -1,   -1,
   -1,  392,   -1,  394,   -1,   -1,   -1,   -1,  256,  400,
  401,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,  425,  426,  427,  428,  286,   -1,
   -1,  289,   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,
   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,   -1,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,  326,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,   -1,  341,   -1,   -1,   -1,  345,   -1,   -1,
   -1,  349,   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,  386,  387,
  388,   -1,   -1,   -1,  392,   -1,  394,   -1,  264,  265,
   -1,  267,  400,  401,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,  425,  426,  427,
  428,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,
   -1,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,
  326,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,   -1,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  349,   -1,   -1,  352,  353,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  368,  369,  370,  371,   -1,   -1,   -1,  375,
   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,
  386,  387,  388,   -1,   -1,   -1,  392,   -1,  394,   -1,
   -1,   -1,   -1,  256,  400,  401,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,  425,
  426,  427,  428,  286,   -1,   -1,  289,   -1,   -1,   -1,
  436,   -1,   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,
   -1,   -1,  305,   -1,  307,  308,  309,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,   -1,  325,  326,   -1,   -1,  329,   -1,   -1,  332,
   -1,  334,   -1,  336,  337,  338,  339,   -1,  341,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,   -1,  352,
  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,   -1,
   -1,   -1,  375,   -1,   -1,   -1,  379,   -1,   -1,   -1,
   -1,   -1,  385,  386,  387,  388,   -1,   -1,   -1,  392,
   -1,  394,   -1,   -1,   -1,   -1,  256,  400,  401,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,  425,  426,  427,  428,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  300,   -1,   -1,   -1,   -1,  305,   -1,  307,  308,  309,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,   -1,  325,  326,   -1,   -1,  329,
   -1,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,
   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,
   -1,   -1,   -1,   -1,   -1,  385,  386,  387,  388,   -1,
   -1,   -1,  392,   -1,  394,   -1,   -1,   -1,   -1,  256,
  400,  401,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  425,  426,  427,  428,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,   -1,
  307,  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,  326,
   -1,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,
  337,  338,  339,   -1,  341,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  349,   -1,   -1,  352,  353,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,  386,
  387,  388,   -1,   -1,   -1,  392,   -1,  394,   -1,   -1,
   -1,   -1,  256,  400,  401,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  425,  426,
  427,  428,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,
   -1,  305,   -1,  307,  308,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
   -1,  325,  326,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,  337,  338,  339,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  349,   -1,   -1,  352,  353,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  368,  369,  370,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,
   -1,  385,  386,  387,  388,   -1,   -1,   -1,  392,   -1,
  394,   -1,   -1,   -1,   -1,  256,  400,  401,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,  425,  426,  427,  428,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  300,
   -1,   -1,   -1,   -1,  305,   -1,  307,  308,  309,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  323,   -1,  325,  326,   -1,   -1,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,   -1,
  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,
   -1,  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,  369,  370,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
   -1,   -1,   -1,   -1,  385,  386,  387,  388,   -1,   -1,
   -1,  392,   -1,  394,   -1,   -1,   -1,   -1,  256,  400,
  401,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,  425,  426,  427,  428,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,   -1,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,  326,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  349,   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,  386,  387,
  388,   -1,   -1,   -1,  392,   -1,  394,   -1,  256,   -1,
   -1,   -1,  400,  401,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,   -1,  256,   -1,  425,  426,  427,
  428,  289,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,  300,   -1,  275,   -1,   -1,  305,  279,   -1,
   -1,  309,   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,   -1,  300,
   -1,  329,   -1,   -1,  305,   -1,   -1,   -1,  309,  337,
  338,   -1,  256,  341,   -1,   -1,   -1,  345,   -1,   -1,
   -1,  265,  323,  267,  325,   -1,  270,   -1,  329,   -1,
   -1,  275,   -1,   -1,   -1,  279,  337,  338,   -1,  256,
  341,   -1,   -1,  371,  345,  289,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,   -1,  300,   -1,  275,   -1,
   -1,  305,  279,   -1,   -1,  309,   -1,   -1,   -1,   -1,
  371,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  323,
   -1,  325,   -1,  300,   -1,  329,   -1,   -1,  305,   -1,
   -1,   -1,  309,  337,  338,   -1,  256,  341,  426,   -1,
   -1,  345,   -1,  262,   -1,  265,  323,  267,  325,   -1,
  270,   -1,  329,   -1,   -1,  275,   -1,   -1,   -1,  279,
  337,  338,   -1,  256,  341,  426,   -1,   -1,  345,  289,
   -1,   -1,  265,  377,  267,   -1,   -1,  270,   -1,   -1,
  300,   -1,  275,   -1,  303,  305,  279,   -1,   -1,  309,
   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  323,   -1,  325,   -1,  300,   -1,  329,
   -1,   -1,  305,   -1,   -1,   -1,  309,  337,  338,   -1,
   -1,  341,  426,   -1,   -1,  345,   -1,   -1,   -1,   -1,
  323,   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  337,  338,   -1,   -1,  341,  426,
   -1,   -1,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  379,  380,  381,  382,  383,   -1,   -1,  386,  387,   -1,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,  398,
   -1,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  261,   -1,   -1,  426,   -1,   -1,  428,
   -1,   -1,  431,   -1,  272,  273,   -1,   -1,   -1,  277,
   -1,   -1,   -1,  281,  282,  283,   -1,  285,   -1,   -1,
  288,   -1,   -1,  426,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,
   -1,   -1,  310,   -1,  312,   -1,   -1,  315,  316,  317,
  318,  319,   -1,   -1,   -1,   -1,  324,   -1,   -1,   -1,
  328,   -1,  330,   -1,   -1,   -1,   -1,  261,   -1,  263,
   -1,   -1,  340,   -1,   -1,  343,  344,   -1,  346,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,  370,  275,  276,  277,   -1,  279,  302,   -1,
   -1,   -1,   -1,  307,  286,   -1,   -1,  289,  312,   -1,
   -1,  315,   -1,  317,  318,  319,   -1,   -1,  300,   -1,
  324,   -1,   -1,  305,  328,  307,  308,  309,   -1,  311,
   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,  320,   -1,
  344,  323,  346,  325,  326,   -1,   -1,  329,  426,   -1,
  332,   -1,  334,   -1,  336,  337,  338,  339,   -1,  341,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  349,   -1,   -1,
  352,  353,  376,  377,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,  380,   -1,
  382,   -1,   -1,  385,  386,  387,  388,   -1,   -1,   -1,
  392,   -1,  394,   -1,  264,  265,   -1,  267,  400,  401,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,  425,  426,  427,  428,   -1,   -1,   -1,
  300,   -1,   -1,   -1,   -1,  305,   -1,  307,  308,  309,
   -1,  311,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  320,   -1,   -1,  323,   -1,  325,  326,   -1,   -1,  329,
   -1,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,
   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,
   -1,   -1,  382,   -1,   -1,  385,  386,  387,  388,   -1,
   -1,   -1,  392,   -1,  394,   -1,  264,  265,   -1,  267,
  400,  401,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,  425,  426,  427,  428,   -1,
   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,   -1,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,  326,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,   -1,  341,   -1,   -1,   -1,  345,   -1,   -1,
   -1,  349,   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,  386,  387,
  388,   -1,   -1,   -1,  392,   -1,  394,   -1,  264,  265,
   -1,  267,  400,  401,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,  425,  426,  427,
  428,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,
   -1,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,
  326,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,   -1,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  349,   -1,   -1,  352,  353,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,
  376,   -1,   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,
  386,  387,  388,   -1,   -1,   -1,  392,   -1,  394,   -1,
  264,  265,   -1,  267,  400,  401,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  425,
  426,  427,  428,   -1,   -1,   -1,  300,   -1,   -1,   -1,
   -1,  305,   -1,  307,  308,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
   -1,  325,  326,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,  337,  338,  339,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  349,   -1,   -1,  352,  353,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  368,  369,  370,  371,   -1,   -1,
   -1,  375,   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,
   -1,  385,  386,  387,  388,   -1,   -1,   -1,  392,   -1,
  394,   -1,  264,  265,   -1,  267,  400,  401,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,  425,  426,  427,  428,   -1,   -1,   -1,  300,   -1,
   -1,   -1,   -1,  305,   -1,  307,  308,  309,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,   -1,  325,  326,   -1,   -1,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,  337,  338,  339,   -1,  341,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,   -1,
  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,
   -1,   -1,   -1,  375,   -1,   -1,   -1,  379,   -1,   -1,
   -1,   -1,   -1,  385,  386,  387,  388,   -1,   -1,   -1,
  392,   -1,  394,   -1,  264,  265,   -1,  267,  400,  401,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,  425,  426,  427,  428,   -1,   -1,   -1,
  300,   -1,   -1,   -1,   -1,  305,   -1,  307,  308,  309,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,   -1,  325,  326,   -1,   -1,  329,
   -1,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,
   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,
   -1,   -1,   -1,   -1,   -1,  385,  386,  387,  388,   -1,
   -1,   -1,  392,   -1,  394,   -1,  264,  265,   -1,  267,
  400,  401,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,  425,  426,  427,  428,   -1,
   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,   -1,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,  326,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  349,   -1,   -1,  352,  353,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,  386,  387,
  388,   -1,   -1,   -1,  392,   -1,  394,   -1,  264,  265,
   -1,  267,  400,  401,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,  425,  426,  427,
  428,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,
   -1,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,
  326,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,   -1,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  349,   -1,   -1,  352,  353,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,   -1,  385,
  386,  387,  388,   -1,   -1,   -1,  392,   -1,  394,   -1,
  264,  265,   -1,  267,  400,  401,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  425,
  426,  427,  428,   -1,   -1,   -1,  300,   -1,   -1,   -1,
   -1,  305,   -1,  307,  308,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
   -1,  325,  326,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,  337,  338,  339,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  349,   -1,   -1,  352,  353,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  368,  369,  370,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,
   -1,  385,  386,  387,  388,   -1,   -1,   -1,  392,   -1,
  394,   -1,  264,  265,   -1,  267,  400,  401,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,  425,  426,  427,  428,   -1,   -1,   -1,  300,   -1,
   -1,   -1,   -1,  305,   -1,  307,  308,  309,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,   -1,  325,  326,   -1,   -1,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,  337,  338,  339,   -1,  341,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,   -1,
  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,
   -1,   -1,   -1,  385,  386,  387,  388,   -1,   -1,   -1,
  392,   -1,  394,   -1,  264,  265,   -1,  267,  400,  401,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,  425,  426,  427,  428,   -1,   -1,   -1,
  300,   -1,   -1,   -1,   -1,  305,   -1,  307,  308,  309,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,   -1,  325,  326,   -1,   -1,  329,
   -1,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
  273,  341,   -1,   -1,  277,   -1,   -1,   -1,  281,  282,
  283,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  367,  368,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,  310,   -1,  379,
   -1,   -1,   -1,  316,   -1,  385,  386,  387,  388,   -1,
   -1,   -1,  392,   -1,  394,   -1,  264,  265,   -1,  267,
  400,  401,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  343,  279,   -1,   -1,   -1,   -1,   -1,  350,  286,   -1,
   -1,  289,   -1,   -1,   -1,  425,  426,   -1,  428,   -1,
   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,   -1,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,  326,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,   -1,  341,  265,   -1,  267,  345,   -1,  270,
   -1,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  367,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,  300,
   -1,  379,   -1,   -1,  305,   -1,  307,   -1,  309,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  265,  323,  267,  325,   -1,  270,   -1,  329,  330,
   -1,  275,   -1,   -1,   -1,  279,  337,  338,   -1,  283,
  341,   -1,   -1,   -1,  345,  289,   -1,  425,  426,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,
   -1,  305,   -1,   -1,   -1,  309,  310,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,  323,
   -1,  325,  279,   -1,   -1,  329,   -1,   -1,   -1,   -1,
   -1,   -1,  289,  337,  338,   -1,   -1,  341,   -1,  265,
   -1,  267,   -1,  300,  270,   -1,   -1,   -1,  305,  275,
   -1,   -1,  309,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  289,   -1,  426,  323,   -1,  325,   -1,
   -1,   -1,  329,   -1,  300,   -1,   -1,   -1,   -1,  305,
  337,  338,   -1,  309,  341,   -1,   -1,   -1,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,
   -1,   -1,   -1,  329,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  337,  338,   -1,  371,  341,  265,   -1,  267,  345,
   -1,  270,  426,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
  289,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
   -1,  300,   -1,   -1,  380,   -1,  305,  289,   -1,   -1,
  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  300,  426,
   -1,   -1,   -1,  305,  323,   -1,  325,  309,   -1,   -1,
  329,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  337,  338,
   -1,  323,  341,  325,   -1,   -1,  345,  329,   -1,   -1,
  426,   -1,  265,   -1,  267,  337,  338,  270,   -1,  341,
   -1,   -1,  275,  345,   -1,   -1,  279,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,  378,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,
   -1,   -1,  305,   -1,   -1,  265,  309,  267,   -1,   -1,
  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,
  323,   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  337,  338,   -1,  426,  341,   -1,
  300,   -1,  345,   -1,   -1,  305,   -1,   -1,  265,  309,
  267,   -1,   -1,  270,  426,   -1,   -1,   -1,  275,   -1,
   -1,   -1,  279,  323,   -1,  325,   -1,   -1,   -1,  329,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  337,  338,   -1,
   -1,  341,   -1,  300,   -1,  345,   -1,   -1,  305,   -1,
   -1,  265,  309,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,  323,   -1,  325,   -1,
   -1,   -1,  329,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  337,  338,   -1,  426,  341,   -1,  300,   -1,  345,   -1,
   -1,  305,   -1,   -1,  265,  309,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,  323,
   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  337,  338,   -1,  426,  341,   -1,  300,
   -1,  345,   -1,   -1,  305,   -1,   -1,  265,  309,  267,
   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,
   -1,  279,  323,   -1,  325,   -1,   -1,   -1,  329,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  337,  338,   -1,  426,
  341,   -1,  300,   -1,  345,   -1,   -1,  305,   -1,   -1,
  265,  309,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
  275,   -1,   -1,   -1,  279,  323,   -1,  325,   -1,   -1,
   -1,  329,   -1,   -1,  289,   -1,   -1,   -1,   -1,  337,
  338,   -1,  426,  341,   -1,  300,   -1,  345,   -1,   -1,
  305,   -1,   -1,  265,  309,  267,   -1,   -1,  270,   -1,
   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,  323,   -1,
  325,   -1,   -1,   -1,  329,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  337,  338,   -1,  426,  341,   -1,  300,   -1,
  345,   -1,   -1,  305,   -1,   -1,   -1,  309,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,   -1,  325,  256,   -1,   -1,  329,   -1,  261,
   -1,   -1,   -1,   -1,   -1,  337,  338,   -1,  426,  341,
  272,  273,   -1,  345,   -1,  277,   -1,   -1,   -1,  281,
  282,  283,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,   -1,  301,
  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,  261,
  312,  426,   -1,  315,  316,  317,  318,  319,   -1,   -1,
  272,   -1,  324,   -1,   -1,  277,  328,   -1,  330,  281,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,  340,   -1,
   -1,  343,  344,   -1,  346,  297,   -1,   -1,  350,  301,
  302,   -1,   -1,   -1,  426,  307,   -1,   -1,   -1,   -1,
  312,   -1,   -1,  315,   -1,  317,  318,  319,  370,   -1,
   -1,   -1,  324,   -1,  376,  377,  328,   -1,  330,   -1,
  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,
   -1,  272,  344,   -1,  346,   -1,  277,   -1,  350,  261,
  281,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,
  301,  302,   -1,  285,  376,  377,  307,   -1,   -1,   -1,
   -1,  312,   -1,   -1,  315,   -1,  317,  318,  319,   -1,
  302,   -1,   -1,  324,   -1,  307,   -1,  328,   -1,  330,
  312,   -1,   -1,  315,   -1,  317,  318,  319,   -1,  340,
  322,   -1,  324,  344,   -1,  346,  328,   -1,   -1,  350,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,
   -1,   -1,  344,   -1,  346,   -1,   -1,   -1,   -1,  370,
   -1,   -1,   -1,   -1,   -1,  376,  377,   -1,   -1,   -1,
  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,
   -1,  272,  273,   -1,  376,  377,  277,   -1,   -1,   -1,
  281,  282,  283,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,
  261,  312,   -1,   -1,  315,  316,  317,  318,  319,   -1,
   -1,  272,  273,  324,   -1,   -1,  277,  328,   -1,  330,
  281,  282,  283,   -1,  285,   -1,   -1,  288,   -1,  340,
   -1,  292,  343,  344,  295,  346,   -1,   -1,  299,  350,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,
  261,  312,   -1,   -1,  315,  316,  317,  318,  319,  370,
   -1,  272,  273,  324,   -1,  376,  277,  328,   -1,  330,
  281,  282,  283,   -1,  285,   -1,   -1,  288,   -1,  340,
   -1,  292,  343,  344,  295,  346,   -1,   -1,  299,  350,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,
  261,  312,   -1,   -1,  315,  316,  317,  318,  319,  370,
   -1,  272,  273,  324,   -1,  376,  277,  328,   -1,  330,
  281,  282,  283,   -1,  285,   -1,   -1,  288,   -1,  340,
   -1,  292,  343,  344,  295,  346,   -1,   -1,  299,  350,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,  310,
  261,  312,   -1,   -1,  315,  316,  317,  318,  319,  370,
   -1,  272,   -1,  324,   -1,  376,  277,  328,   -1,  330,
  281,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,  340,
   -1,   -1,  343,  344,   -1,  346,   -1,   -1,   -1,  350,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,   -1,   -1,
  261,  312,   -1,   -1,  315,   -1,  317,  318,  319,  370,
   -1,  272,   -1,  324,   -1,  376,  277,  328,   -1,  330,
  281,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,  340,
   -1,   -1,   -1,  344,   -1,  346,   -1,   -1,   -1,  350,
  301,  302,   -1,   -1,   -1,   -1,  307,  261,   -1,   -1,
   -1,  312,   -1,   -1,  315,   -1,  317,  318,  319,  370,
   -1,   -1,   -1,  324,   -1,  376,  261,  328,   -1,  330,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,
   -1,   -1,   -1,  344,   -1,  346,   -1,   -1,  302,  350,
  285,   -1,   -1,  307,   -1,   -1,   -1,   -1,  312,   -1,
   -1,  315,   -1,  317,  318,  319,   -1,  302,   -1,  370,
  324,   -1,  307,   -1,  328,  376,   -1,  312,   -1,   -1,
  315,   -1,  317,  318,  319,   -1,  340,   -1,  261,  324,
  344,   -1,  346,  328,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,  263,  340,   -1,   -1,   -1,  344,
   -1,  346,  285,   -1,   -1,   -1,  370,   -1,  372,  373,
   -1,   -1,  376,   -1,   -1,   -1,  285,   -1,   -1,  302,
   -1,   -1,   -1,   -1,  307,  370,   -1,  372,  373,  312,
   -1,  376,  315,  302,  317,  318,  319,   -1,  307,  322,
   -1,  324,   -1,  312,   -1,  328,  315,   -1,  317,  318,
  319,   -1,   -1,   -1,  261,  324,   -1,  340,   -1,  328,
   -1,  344,   -1,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  340,   -1,   -1,   -1,  344,   -1,  346,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,   -1,
   -1,   -1,   -1,  376,   -1,  302,   -1,   -1,   -1,   -1,
  307,  370,   -1,   -1,   -1,  312,   -1,  376,  315,  263,
  317,  318,  319,   -1,   -1,   -1,   -1,  324,  272,  273,
   -1,  328,   -1,  277,   -1,   -1,   -1,  281,  282,  283,
   -1,   -1,   -1,  340,  288,   -1,   -1,  344,  292,  346,
   -1,  295,   -1,   -1,   -1,  299,  261,  301,  263,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  310,   -1,   -1,   -1,
   -1,   -1,  316,  370,   -1,  372,  373,   -1,  322,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  330,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,  343,
   -1,   -1,  307,   -1,   -1,   -1,  350,  312,   -1,   -1,
  315,   -1,  317,  318,  319,   -1,   -1,  322,   -1,  324,
   -1,   -1,   -1,  328,   -1,   -1,   -1,   -1,  372,  373,
   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,  344,
   -1,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,
  };

#line 6528 "as-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static ActionScriptParser ()
{
	oob_stack = new Stack<object> ();
}

public ActionScriptParser (SeekableStreamReader reader, CompilationSourceFile file)
	: this (reader, file, file.Compiler.Report)
{
}

public ActionScriptParser (SeekableStreamReader reader, CompilationSourceFile file, Report report)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file);

#if FULL_AST
	lbag = new LocationsBag ();
#else
	lbag = null;
#endif
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

object ConvertAsType(SimpleName sn, object e)
{
	if (sn.Name == "Object") 
		return new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (e));
	else if (sn.Name == "Boolean") 
		return new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (e));
	else if (sn.Name == "Number")
		return new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (e));
	else if (sn.Name == "String")
		return new TypeExpression (compiler.BuiltinTypes.String, GetLocation (e));
	else if (sn.Name == "Void")
		return new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (e));
	else
		return e;
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.SUPER:
		return "super";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return ".<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTENDS = 284;
  public const int EXTERN = 285;
  public const int FALSE = 286;
  public const int FINALLY = 287;
  public const int FIXED = 288;
  public const int FLOAT = 289;
  public const int FOR = 290;
  public const int FOREACH = 291;
  public const int FUNCTION = 292;
  public const int GOTO = 293;
  public const int IF = 294;
  public const int IMPLICIT = 295;
  public const int IMPLEMENTS = 296;
  public const int IMPORT = 297;
  public const int IN = 298;
  public const int INDEXER = 299;
  public const int INT = 300;
  public const int INTERFACE = 301;
  public const int INTERNAL = 302;
  public const int IS = 303;
  public const int LOCK = 304;
  public const int LONG = 305;
  public const int NAMESPACE = 306;
  public const int NEW = 307;
  public const int NULL = 308;
  public const int OBJECT = 309;
  public const int OPERATOR = 310;
  public const int OUT = 311;
  public const int OVERRIDE = 312;
  public const int PACKAGE = 313;
  public const int PARAMS = 314;
  public const int PRIVATE = 315;
  public const int PROPERTY = 316;
  public const int PROTECTED = 317;
  public const int PUBLIC = 318;
  public const int READONLY = 319;
  public const int REF = 320;
  public const int RETURN = 321;
  public const int REMOVE = 322;
  public const int SBYTE = 323;
  public const int SEALED = 324;
  public const int SHORT = 325;
  public const int SIZEOF = 326;
  public const int STACKALLOC = 327;
  public const int STATIC = 328;
  public const int STRING = 329;
  public const int STRUCT = 330;
  public const int SWITCH = 331;
  public const int THIS = 332;
  public const int THROW = 333;
  public const int TRUE = 334;
  public const int TRY = 335;
  public const int TYPEOF = 336;
  public const int UINT = 337;
  public const int ULONG = 338;
  public const int UNCHECKED = 339;
  public const int UNSAFE = 340;
  public const int USHORT = 341;
  public const int USING = 342;
  public const int VAR = 343;
  public const int VIRTUAL = 344;
  public const int VOID = 345;
  public const int VOLATILE = 346;
  public const int WHERE = 347;
  public const int WHILE = 348;
  public const int ARGLIST = 349;
  public const int PARTIAL = 350;
  public const int ARROW = 351;
  public const int FROM = 352;
  public const int FROM_FIRST = 353;
  public const int JOIN = 354;
  public const int ON = 355;
  public const int EQUALS = 356;
  public const int SELECT = 357;
  public const int GROUP = 358;
  public const int BY = 359;
  public const int LET = 360;
  public const int ORDERBY = 361;
  public const int ASCENDING = 362;
  public const int DESCENDING = 363;
  public const int INTO = 364;
  public const int INTERR_NULLABLE = 365;
  public const int EXTERN_ALIAS = 366;
  public const int REFVALUE = 367;
  public const int REFTYPE = 368;
  public const int MAKEREF = 369;
  public const int ASYNC = 370;
  public const int AWAIT = 371;
  public const int GET = 372;
  public const int SET = 373;
  public const int LAST_KEYWORD = 374;
  public const int OPEN_BRACE = 375;
  public const int CLOSE_BRACE = 376;
  public const int OPEN_BRACKET = 377;
  public const int CLOSE_BRACKET = 378;
  public const int OPEN_PARENS = 379;
  public const int CLOSE_PARENS = 380;
  public const int DOT = 381;
  public const int COMMA = 382;
  public const int COLON = 383;
  public const int SEMICOLON = 384;
  public const int TILDE = 385;
  public const int PLUS = 386;
  public const int MINUS = 387;
  public const int BANG = 388;
  public const int ASSIGN = 389;
  public const int OP_LT = 390;
  public const int OP_GT = 391;
  public const int BITWISE_AND = 392;
  public const int BITWISE_OR = 393;
  public const int STAR = 394;
  public const int PERCENT = 395;
  public const int DIV = 396;
  public const int CARRET = 397;
  public const int INTERR = 398;
  public const int DOUBLE_COLON = 399;
  public const int OP_INC = 400;
  public const int OP_DEC = 401;
  public const int OP_SHIFT_LEFT = 402;
  public const int OP_SHIFT_RIGHT = 403;
  public const int OP_LE = 404;
  public const int OP_GE = 405;
  public const int OP_EQ = 406;
  public const int OP_NE = 407;
  public const int OP_AND = 408;
  public const int OP_OR = 409;
  public const int OP_MULT_ASSIGN = 410;
  public const int OP_DIV_ASSIGN = 411;
  public const int OP_MOD_ASSIGN = 412;
  public const int OP_ADD_ASSIGN = 413;
  public const int OP_SUB_ASSIGN = 414;
  public const int OP_SHIFT_LEFT_ASSIGN = 415;
  public const int OP_SHIFT_RIGHT_ASSIGN = 416;
  public const int OP_AND_ASSIGN = 417;
  public const int OP_XOR_ASSIGN = 418;
  public const int OP_OR_ASSIGN = 419;
  public const int OP_PTR = 420;
  public const int OP_COALESCING = 421;
  public const int OP_GENERICS_LT = 422;
  public const int OP_GENERICS_LT_DECL = 423;
  public const int OP_GENERICS_GT = 424;
  public const int LITERAL = 425;
  public const int IDENTIFIER = 426;
  public const int OPEN_PARENS_LAMBDA = 427;
  public const int OPEN_PARENS_CAST = 428;
  public const int GENERIC_DIMENSION = 429;
  public const int DEFAULT_COLON = 430;
  public const int OPEN_BRACKET_EXPR = 431;
  public const int EVAL_STATEMENT_PARSER = 432;
  public const int EVAL_COMPILATION_UNIT_PARSER = 433;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 434;
  public const int DOC_SEE = 435;
  public const int GENERATE_COMPLETION = 436;
  public const int COMPLETE_COMPLETION = 437;
  public const int UMINUS = 438;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
