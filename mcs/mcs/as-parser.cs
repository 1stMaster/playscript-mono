// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "as-parser.jay"
//
// as-parser.jay: The Parser for the ActionScript compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//			Ben Cooley		(bcooley@zynga.com) - ActionScript
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using Mono.CSharp;
using Linq = Mono.CSharp.Linq;
using Enum = Mono.CSharp.Enum;
using Attribute = Mono.CSharp.Attribute;
using Delegate = Mono.CSharp.Delegate;
using Nullable = Mono.CSharp.Nullable;

namespace Mono.ActionScript
{
	/// <summary>
	///    The ActionScript Parser
	/// </summary>
	public class ActionScriptParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives package_declaration opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_namespace",
//t    "using_namespace : IMPORT namespace_or_type_expr SEMICOLON",
//t    "using_namespace : IMPORT IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "using_namespace : IMPORT error",
//t    "$$2 :",
//t    "$$3 :",
//t    "package_declaration : opt_attributes PACKAGE opt_package_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_package_type_declarations CLOSE_BRACE",
//t    "opt_package_name :",
//t    "opt_package_name : package_name",
//t    "package_name : IDENTIFIER",
//t    "package_name : package_name DOT IDENTIFIER",
//t    "package_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_package_type_declarations :",
//t    "opt_package_type_declarations : package_type_declarations",
//t    "package_type_declarations : package_type_declaration",
//t    "package_type_declarations : package_type_declaration package_type_declaration",
//t    "package_type_declaration : type_declaration",
//t    "package_type_declaration : attribute_sections CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "$$12 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers VAR IDENTIFIER COLON member_type $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$22 opt_type_parameter_constraints_clauses",
//t    "$$23 :",
//t    "$$24 :",
//t    "$$25 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL FUNCTION $$23 method_declaration_name OPEN_PARENS $$24 opt_formal_parameter_list CLOSE_PARENS COLON VOID $$25 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers FUNCTION modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS COLON member_type",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name error",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON error",
//t    "$$26 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type ASSIGN $$26 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$27 :",
//t    "$$28 :",
//t    "$$29 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$27 OPEN_BRACE $$28 accessor_declarations $$29 CLOSE_BRACE",
//t    "$$30 :",
//t    "$$31 :",
//t    "$$32 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$30 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$31 accessor_declarations $$32 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$33 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$33 accessor_body",
//t    "$$34 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$34 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$35 :",
//t    "$$36 :",
//t    "$$37 :",
//t    "$$38 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$35 type_declaration_name $$36 opt_class_base opt_type_parameter_constraints_clauses $$37 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$38 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$39 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$39 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$40 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$41 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$42 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$43 :",
//t    "$$44 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$43 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$44 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$45 :",
//t    "constructor_initializer : COLON SUPER OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
//t    "$$46 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$46 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : COLON error",
//t    "constructor_initializer : error",
//t    "$$47 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$47 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$48 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$48 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$49 :",
//t    "$$50 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$49 event_accessor_declarations $$50 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$51 :",
//t    "opt_event_initializer : ASSIGN $$51 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$52 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$52 event_variable_initializer",
//t    "$$53 :",
//t    "event_variable_initializer : $$53 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$54 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$54 event_accessor_block",
//t    "$$55 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$55 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "$$56 :",
//t    "$$57 :",
//t    "$$58 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$56 OPEN_BRACE $$57 opt_enum_member_declarations $$58 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$59 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$59 ASSIGN constant_expression",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$60 :",
//t    "$$61 :",
//t    "$$62 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$60 opt_formal_parameter_list CLOSE_PARENS $$61 opt_type_parameter_constraints_clauses $$62 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$63 :",
//t    "type_declaration_name : IDENTIFIER $$63 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : namespace_or_type_expr pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : SUPER DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : SUPER OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$64 :",
//t    "new_expr_type : $$64 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$65 :",
//t    "typeof_expression : TYPEOF $$65 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : identifier_inside_body generic_dimension",
//t    "unbound_type_name : qualified_alias_member identifier_inside_body generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
//t    "unbound_type_name : namespace_or_type_expr DOT identifier_inside_body generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
//t    "$$66 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$66 block",
//t    "$$67 :",
//t    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$67 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$68 :",
//t    "anonymous_method_signature : OPEN_PARENS $$68 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression_or_error",
//t    "conditional_expression : null_coalescing_expression INTERR expression error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$69 :",
//t    "lambda_expression_body_simple : $$69 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$70 :",
//t    "lambda_expression : IDENTIFIER ARROW $$70 lambda_expression_body",
//t    "$$71 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$71 lambda_expression_body",
//t    "$$72 :",
//t    "$$73 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$72 opt_lambda_parameter_list CLOSE_PARENS ARROW $$73 lambda_expression_body",
//t    "$$74 :",
//t    "$$75 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$74 opt_lambda_parameter_list CLOSE_PARENS ARROW $$75 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$76 :",
//t    "$$77 :",
//t    "$$78 :",
//t    "$$79 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$76 type_declaration_name $$77 opt_class_base opt_type_parameter_constraints_clauses $$78 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$79 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : EXTENDS type_list",
//t    "opt_class_base : EXTENDS type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$80 :",
//t    "block : OPEN_BRACE $$80 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$81 :",
//t    "block_prepared : OPEN_BRACE $$81 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$82 :",
//t    "labeled_statement : identifier_inside_body COLON $$82 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "$$83 :",
//t    "block_variable_declaration : VAR identifier_inside_body COLON variable_type $$83 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$84 :",
//t    "block_variable_declaration : CONST identifier_inside_body COLON variable_type $$84 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$85 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$85 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$86 :",
//t    "switch_section : switch_labels $$86 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "do_statement : DO embedded_statement error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$87 :",
//t    "for_statement : FOR open_parens_any $$87 for_statement_cont",
//t    "$$88 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$88 for_condition_and_iterator_part embedded_statement",
//t    "for_statement_cont : error",
//t    "$$89 :",
//t    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$89 for_iterator_part",
//t    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
//t    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
//t    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
//t    "close_parens_close_brace : CLOSE_PARENS",
//t    "close_parens_close_brace : CLOSE_BRACE",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$90 :",
//t    "for_initializer : variable_type identifier_inside_body $$90 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type error",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
//t    "$$91 :",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$91 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH block",
//t    "$$92 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$92 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$93 :",
//t    "unsafe_statement : UNSAFE $$93 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$94 :",
//t    "$$95 :",
//t    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$94 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$95 embedded_statement",
//t    "$$96 :",
//t    "$$97 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$96 using_initialization CLOSE_PARENS $$97 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$98 :",
//t    "from_clause : FROM identifier_inside_body IN $$98 expression_or_error",
//t    "$$99 :",
//t    "from_clause : FROM type identifier_inside_body IN $$99 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$100 :",
//t    "select_or_group_clause : SELECT $$100 expression_or_error",
//t    "$$101 :",
//t    "$$102 :",
//t    "select_or_group_clause : GROUP $$101 expression_or_error $$102 BY expression_or_error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$103 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$103 expression_or_error",
//t    "$$104 :",
//t    "where_clause : WHERE $$104 expression_or_error",
//t    "$$105 :",
//t    "$$106 :",
//t    "$$107 :",
//t    "join_clause : JOIN identifier_inside_body IN $$105 expression_or_error ON $$106 expression_or_error EQUALS $$107 expression_or_error opt_join_into",
//t    "$$108 :",
//t    "$$109 :",
//t    "$$110 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$108 expression_or_error ON $$109 expression_or_error EQUALS $$110 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$111 :",
//t    "orderby_clause : ORDERBY $$111 orderings",
//t    "orderings : order_by",
//t    "$$112 :",
//t    "orderings : order_by COMMA $$112 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$113 :",
//t    "orderings_then_by : orderings_then_by COMMA $$113 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$114 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$114 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$115 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$115 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives package_declaration",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$116 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$116 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$117 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$117 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTENDS","EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH",
    "FUNCTION","GOTO","IF","IMPLICIT","IMPLEMENTS","IMPORT","IN","INT",
    "INTERFACE","INTERNAL","IS","LOCK","LONG","NAMESPACE","NEW","NULL",
    "OBJECT","OPERATOR","OUT","OVERRIDE","PACKAGE","PARAMS","PRIVATE",
    "PROTECTED","PUBLIC","READONLY","REF","RETURN","REMOVE","SBYTE",
    "SEALED","SHORT","SIZEOF","STACKALLOC","STATIC","STRING","STRUCT",
    "SWITCH","THIS","THROW","TRUE","TRY","TYPEOF","UINT","ULONG",
    "UNCHECKED","UNSAFE","USHORT","USING","VAR","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","GET",
    "SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 389 "as-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 390 "as-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 409 "as-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 454 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 26:
  case_26();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 41:
  case_41();
  break;
case 42:
  case_42();
  break;
case 50:
  case_50();
  break;
case 51:
  case_51();
  break;
case 52:
#line 674 "as-parser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 53:
  case_53();
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
#line 704 "as-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 57:
  case_57();
  break;
case 58:
#line 713 "as-parser.jay"
  { yyVal = "event"; }
  break;
case 59:
#line 714 "as-parser.jay"
  { yyVal = "return"; }
  break;
case 60:
  case_60();
  break;
case 61:
#line 731 "as-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 62:
  case_62();
  break;
case 63:
#line 745 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 64:
  case_64();
  break;
case 66:
#line 764 "as-parser.jay"
  { yyVal = null; }
  break;
case 67:
#line 768 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 68:
#line 773 "as-parser.jay"
  { yyVal = null; }
  break;
case 69:
  case_69();
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
  case_72();
  break;
case 73:
#line 815 "as-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 75:
#line 823 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
#line 849 "as-parser.jay"
  { yyVal = null; }
  break;
case 79:
#line 853 "as-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 80:
#line 857 "as-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 83:
#line 869 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 84:
#line 873 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 96:
  case_96();
  break;
case 97:
#line 904 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 98:
#line 908 "as-parser.jay"
  { 
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 99:
  case_99();
  break;
case 100:
  case_100();
  break;
case 101:
  case_101();
  break;
case 102:
  case_102();
  break;
case 103:
#line 943 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 108:
#line 984 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 109:
#line 988 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 110:
  case_110();
  break;
case 111:
#line 1004 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 112:
  case_112();
  break;
case 113:
  case_113();
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
  case_119();
  break;
case 120:
#line 1082 "as-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[0+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 122:
  case_122();
  break;
case 123:
  case_123();
  break;
case 126:
#line 1111 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 127:
#line 1115 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 128:
  case_128();
  break;
case 129:
#line 1128 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 130:
  case_130();
  break;
case 133:
#line 1147 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 134:
#line 1151 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 135:
  case_135();
  break;
case 136:
#line 1167 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 137:
  case_137();
  break;
case 138:
  case_138();
  break;
case 141:
  case_141();
  break;
case 142:
  case_142();
  break;
case 143:
  case_143();
  break;
case 144:
#line 1237 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 145:
#line 1241 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 146:
  case_146();
  break;
case 147:
#line 1267 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 148:
  case_148();
  break;
case 149:
#line 1277 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 150:
  case_150();
  break;
case 151:
  case_151();
  break;
case 152:
  case_152();
  break;
case 154:
#line 1342 "as-parser.jay"
  { yyVal = null; }
  break;
case 155:
#line 1346 "as-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 157:
  case_157();
  break;
case 158:
  case_158();
  break;
case 159:
  case_159();
  break;
case 160:
  case_160();
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 164:
#line 1404 "as-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 165:
#line 1408 "as-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 166:
  case_166();
  break;
case 167:
  case_167();
  break;
case 168:
  case_168();
  break;
case 169:
  case_169();
  break;
case 170:
  case_170();
  break;
case 171:
  case_171();
  break;
case 172:
#line 1481 "as-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 173:
  case_173();
  break;
case 174:
#line 1522 "as-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 176:
#line 1530 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
  case_179();
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
#line 1619 "as-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 191:
  case_191();
  break;
case 192:
#line 1673 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 193:
  case_193();
  break;
case 194:
#line 1702 "as-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 195:
  case_195();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
  case_202();
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
#line 1847 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 209:
  case_209();
  break;
case 210:
  case_210();
  break;
case 211:
  case_211();
  break;
case 212:
  case_212();
  break;
case 213:
#line 1882 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 216:
#line 1894 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 217:
#line 1898 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 218:
#line 1905 "as-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 219:
#line 1909 "as-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 224:
#line 1917 "as-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 225:
#line 1921 "as-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 226:
#line 1925 "as-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 227:
#line 1931 "as-parser.jay"
  {
	  }
  break;
case 228:
  case_228();
  break;
case 230:
#line 1961 "as-parser.jay"
  { yyVal = null; }
  break;
case 232:
  case_232();
  break;
case 233:
#line 1977 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 234:
  case_234();
  break;
case 236:
#line 2023 "as-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 237:
#line 2024 "as-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 238:
#line 2025 "as-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 239:
#line 2026 "as-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 240:
#line 2027 "as-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 241:
#line 2028 "as-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 242:
#line 2030 "as-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 243:
#line 2031 "as-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 244:
#line 2033 "as-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 245:
#line 2034 "as-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 246:
#line 2035 "as-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 247:
#line 2036 "as-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 248:
#line 2037 "as-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 249:
#line 2038 "as-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 250:
#line 2039 "as-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 251:
#line 2040 "as-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 252:
#line 2041 "as-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 253:
#line 2042 "as-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 254:
#line 2043 "as-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 255:
#line 2044 "as-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 256:
#line 2045 "as-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 257:
#line 2046 "as-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 258:
#line 2053 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 259:
  case_259();
  break;
case 260:
#line 2072 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 261:
  case_261();
  break;
case 262:
  case_262();
  break;
case 263:
  case_263();
  break;
case 264:
  case_264();
  break;
case 265:
  case_265();
  break;
case 266:
  case_266();
  break;
case 267:
  case_267();
  break;
case 269:
#line 2178 "as-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 272:
#line 2190 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 273:
  case_273();
  break;
case 274:
#line 2200 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 275:
  case_275();
  break;
case 276:
  case_276();
  break;
case 277:
  case_277();
  break;
case 278:
  case_278();
  break;
case 279:
  case_279();
  break;
case 280:
  case_280();
  break;
case 281:
  case_281();
  break;
case 282:
  case_282();
  break;
case 283:
  case_283();
  break;
case 284:
  case_284();
  break;
case 286:
#line 2315 "as-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 287:
  case_287();
  break;
case 290:
#line 2332 "as-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 291:
#line 2336 "as-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 292:
  case_292();
  break;
case 293:
#line 2349 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 294:
  case_294();
  break;
case 295:
  case_295();
  break;
case 296:
#line 2374 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 306:
  case_306();
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 310:
  case_310();
  break;
case 311:
  case_311();
  break;
case 312:
  case_312();
  break;
case 314:
  case_314();
  break;
case 315:
  case_315();
  break;
case 318:
#line 2536 "as-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 325:
#line 2595 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 326:
  case_326();
  break;
case 327:
#line 2614 "as-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 328:
  case_328();
  break;
case 330:
  case_330();
  break;
case 332:
  case_332();
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 340:
  case_340();
  break;
case 341:
#line 2714 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 345:
  case_345();
  break;
case 346:
  case_346();
  break;
case 347:
  case_347();
  break;
case 348:
  case_348();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 352:
  case_352();
  break;
case 353:
  case_353();
  break;
case 354:
  case_354();
  break;
case 355:
  case_355();
  break;
case 356:
  case_356();
  break;
case 358:
#line 2832 "as-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 359:
#line 2839 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 361:
  case_361();
  break;
case 363:
  case_363();
  break;
case 365:
  case_365();
  break;
case 367:
#line 2877 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 368:
  case_368();
  break;
case 369:
#line 2907 "as-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 370:
  case_370();
  break;
case 371:
#line 2916 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 372:
#line 2920 "as-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 373:
  case_373();
  break;
case 374:
  case_374();
  break;
case 375:
  case_375();
  break;
case 376:
#line 2953 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 377:
#line 2954 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 378:
#line 2955 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 379:
#line 2956 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 380:
#line 2957 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 381:
#line 2958 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 383:
#line 2963 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 384:
#line 2964 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 385:
#line 2965 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 386:
#line 2966 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 387:
#line 2967 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 388:
#line 2968 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 389:
#line 2969 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 390:
#line 2970 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 391:
#line 2971 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 412:
  case_412();
  break;
case 413:
  case_413();
  break;
case 417:
#line 3018 "as-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 418:
#line 3022 "as-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 419:
#line 3023 "as-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 424:
  case_424();
  break;
case 425:
#line 3056 "as-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 426:
  case_426();
  break;
case 427:
  case_427();
  break;
case 428:
  case_428();
  break;
case 429:
  case_429();
  break;
case 430:
#line 3088 "as-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 431:
  case_431();
  break;
case 432:
#line 3096 "as-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 433:
  case_433();
  break;
case 434:
  case_434();
  break;
case 435:
  case_435();
  break;
case 436:
#line 3120 "as-parser.jay"
  { yyVal = null; }
  break;
case 438:
  case_438();
  break;
case 439:
  case_439();
  break;
case 440:
#line 3143 "as-parser.jay"
  { yyVal = null; }
  break;
case 441:
#line 3147 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 442:
  case_442();
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
#line 3179 "as-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 447:
  case_447();
  break;
case 448:
  case_448();
  break;
case 449:
  case_449();
  break;
case 452:
#line 3207 "as-parser.jay"
  { yyVal = null; }
  break;
case 454:
  case_454();
  break;
case 455:
  case_455();
  break;
case 456:
  case_456();
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
#line 3258 "as-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 463:
  case_463();
  break;
case 464:
  case_464();
  break;
case 465:
  case_465();
  break;
case 466:
  case_466();
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 476:
#line 3353 "as-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 478:
#line 3361 "as-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 479:
  case_479();
  break;
case 480:
  case_480();
  break;
case 481:
#line 3381 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 482:
#line 3388 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
  case_487();
  break;
case 488:
  case_488();
  break;
case 489:
  case_489();
  break;
case 490:
#line 3455 "as-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 491:
  case_491();
  break;
case 492:
  case_492();
  break;
case 495:
#line 3482 "as-parser.jay"
  { yyVal = null; }
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 506:
  case_506();
  break;
case 507:
  case_507();
  break;
case 508:
  case_508();
  break;
case 509:
#line 3558 "as-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 510:
#line 3562 "as-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 511:
#line 3569 "as-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 512:
#line 3573 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 513:
  case_513();
  break;
case 514:
  case_514();
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
#line 3616 "as-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 518:
  case_518();
  break;
case 521:
  case_521();
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 524:
  case_524();
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
#line 3730 "as-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 534:
#line 3734 "as-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 535:
#line 3738 "as-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 536:
#line 3742 "as-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 537:
#line 3749 "as-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 539:
#line 3757 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 540:
  case_540();
  break;
case 541:
  case_541();
  break;
case 543:
#line 3781 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 544:
#line 3785 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 545:
  case_545();
  break;
case 546:
  case_546();
  break;
case 548:
#line 3821 "as-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 549:
#line 3825 "as-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 550:
#line 3829 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 551:
#line 3833 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 552:
#line 3837 "as-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 553:
#line 3841 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 555:
  case_555();
  break;
case 556:
  case_556();
  break;
case 557:
  case_557();
  break;
case 559:
  case_559();
  break;
case 560:
#line 3873 "as-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
  case_561();
  break;
case 562:
#line 3882 "as-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 3886 "as-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 568:
  case_568();
  break;
case 569:
  case_569();
  break;
case 570:
  case_570();
  break;
case 571:
  case_571();
  break;
case 573:
  case_573();
  break;
case 574:
  case_574();
  break;
case 576:
  case_576();
  break;
case 578:
  case_578();
  break;
case 580:
  case_580();
  break;
case 582:
  case_582();
  break;
case 584:
  case_584();
  break;
case 586:
  case_586();
  break;
case 588:
  case_588();
  break;
case 589:
  case_589();
  break;
case 590:
#line 4015 "as-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
  case_593();
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 596:
  case_596();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
#line 4110 "as-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 607:
  case_607();
  break;
case 610:
#line 4125 "as-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 611:
  case_611();
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 615:
  case_615();
  break;
case 616:
  case_616();
  break;
case 617:
  case_617();
  break;
case 618:
#line 4170 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 619:
  case_619();
  break;
case 620:
  case_620();
  break;
case 621:
#line 4184 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 629:
#line 4209 "as-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 630:
  case_630();
  break;
case 631:
  case_631();
  break;
case 632:
  case_632();
  break;
case 634:
#line 4238 "as-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 635:
#line 4251 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
#line 4292 "as-parser.jay"
  { yyVal = null; }
  break;
case 641:
#line 4294 "as-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 642:
  case_642();
  break;
case 643:
#line 4307 "as-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 662:
#line 4418 "as-parser.jay"
  {
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 663:
  case_663();
  break;
case 665:
#line 4432 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 674:
#line 4524 "as-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 675:
#line 4528 "as-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 676:
#line 4535 "as-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 677:
  case_677();
  break;
case 678:
#line 4549 "as-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 679:
#line 4553 "as-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 680:
  case_680();
  break;
case 681:
#line 4578 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 682:
  case_682();
  break;
case 683:
  case_683();
  break;
case 684:
  case_684();
  break;
case 685:
  case_685();
  break;
case 690:
#line 4622 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 691:
#line 4626 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 693:
  case_693();
  break;
case 696:
#line 4650 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 697:
#line 4654 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
  case_730();
  break;
case 733:
  case_733();
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
#line 4798 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 738:
#line 4802 "as-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 739:
  case_739();
  break;
case 741:
  case_741();
  break;
case 742:
#line 4823 "as-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 744:
  case_744();
  break;
case 745:
  case_745();
  break;
case 746:
  case_746();
  break;
case 747:
  case_747();
  break;
case 748:
  case_748();
  break;
case 750:
  case_750();
  break;
case 751:
  case_751();
  break;
case 755:
  case_755();
  break;
case 758:
  case_758();
  break;
case 759:
  case_759();
  break;
case 760:
#line 4930 "as-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 761:
#line 4934 "as-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 766:
  case_766();
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 770:
  case_770();
  break;
case 771:
#line 4979 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 772:
  case_772();
  break;
case 773:
#line 4989 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 774:
#line 4990 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 775:
  case_775();
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 780:
  case_780();
  break;
case 781:
  case_781();
  break;
case 782:
  case_782();
  break;
case 783:
#line 5065 "as-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 788:
  case_788();
  break;
case 789:
  case_789();
  break;
case 790:
  case_790();
  break;
case 791:
#line 5116 "as-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 792:
#line 5120 "as-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
#line 5154 "as-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 802:
  case_802();
  break;
case 803:
  case_803();
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 807:
  case_807();
  break;
case 808:
#line 5214 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 809:
  case_809();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 812:
  case_812();
  break;
case 813:
#line 5255 "as-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 814:
  case_814();
  break;
case 815:
  case_815();
  break;
case 816:
  case_816();
  break;
case 818:
#line 5283 "as-parser.jay"
  { lexer.putback ('}'); }
  break;
case 819:
#line 5287 "as-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 824:
#line 5308 "as-parser.jay"
  { yyVal = null; }
  break;
case 826:
#line 5313 "as-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 830:
  case_830();
  break;
case 831:
  case_831();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 844:
  case_844();
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 855:
#line 5509 "as-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 863:
#line 5558 "as-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 864:
  case_864();
  break;
case 865:
#line 5577 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 866:
  case_866();
  break;
case 867:
#line 5595 "as-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 868:
#line 5602 "as-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 869:
  case_869();
  break;
case 870:
#line 5612 "as-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 873:
  case_873();
  break;
case 874:
  case_874();
  break;
case 875:
  case_875();
  break;
case 876:
  case_876();
  break;
case 877:
  case_877();
  break;
case 878:
  case_878();
  break;
case 879:
  case_879();
  break;
case 880:
  case_880();
  break;
case 882:
  case_882();
  break;
case 883:
#line 5715 "as-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 884:
  case_884();
  break;
case 885:
  case_885();
  break;
case 886:
  case_886();
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 889:
  case_889();
  break;
case 890:
  case_890();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
#line 5815 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 894:
  case_894();
  break;
case 895:
#line 5830 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 896:
  case_896();
  break;
case 897:
  case_897();
  break;
case 898:
  case_898();
  break;
case 900:
  case_900();
  break;
case 901:
  case_901();
  break;
case 902:
#line 5892 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 903:
  case_903();
  break;
case 904:
  case_904();
  break;
case 905:
  case_905();
  break;
case 906:
  case_906();
  break;
case 908:
  case_908();
  break;
case 914:
#line 5946 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 915:
  case_915();
  break;
case 916:
#line 5965 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 917:
  case_917();
  break;
case 918:
  case_918();
  break;
case 919:
  case_919();
  break;
case 920:
  case_920();
  break;
case 921:
  case_921();
  break;
case 922:
  case_922();
  break;
case 923:
  case_923();
  break;
case 924:
  case_924();
  break;
case 925:
  case_925();
  break;
case 927:
#line 6109 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 928:
#line 6116 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 929:
  case_929();
  break;
case 931:
  case_931();
  break;
case 932:
  case_932();
  break;
case 934:
  case_934();
  break;
case 935:
  case_935();
  break;
case 936:
#line 6162 "as-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 937:
  case_937();
  break;
case 938:
  case_938();
  break;
case 939:
#line 6179 "as-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 940:
  case_940();
  break;
case 941:
  case_941();
  break;
case 943:
  case_943();
  break;
case 944:
  case_944();
  break;
case 947:
  case_947();
  break;
case 948:
  case_948();
  break;
case 956:
#line 6301 "as-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 957:
#line 6308 "as-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 958:
  case_958();
  break;
case 959:
  case_959();
  break;
case 960:
#line 6325 "as-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 961:
#line 6329 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 962:
  case_962();
  break;
case 963:
  case_963();
  break;
case 964:
  case_964();
  break;
case 965:
  case_965();
  break;
case 967:
#line 6365 "as-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 969:
#line 6373 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 970:
#line 6377 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 971:
#line 6384 "as-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 973:
  case_973();
  break;
case 974:
  case_974();
  break;
case 975:
  case_975();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 397 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
#line 411 "as-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 431 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 464 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 472 "as-parser.jay"
{
		var un = new UsingNamespace ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[0+yyTop]));
	  }

void case_19()
#line 479 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
#line 492 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_21()
#line 505 "as-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = yyVals[0+yyTop] as MemberName;
		if (name == null) {
			name = new MemberName("asroot");
		}
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
	  }

void case_22()
#line 536 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_23()
#line 541 "as-parser.jay"
{
	  	lbag.AddLocation (current_container, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[0+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_26()
#line 555 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_27()
#line 560 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_28()
#line 565 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_41()
#line 603 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_42()
#line 621 "as-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_50()
#line 654 "as-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }

void case_51()
#line 659 "as-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_53()
#line 676 "as-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_54()
#line 684 "as-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_55()
#line 691 "as-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }

void case_57()
#line 709 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_60()
#line 716 "as-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_62()
#line 733 "as-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_64()
#line 747 "as-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_69()
#line 775 "as-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_70()
#line 781 "as-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_71()
#line 787 "as-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_72()
#line 801 "as-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_76()
#line 825 "as-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_77()
#line 835 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_96()
#line 889 "as-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_99()
#line 911 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }

void case_100()
#line 925 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_101()
#line 930 "as-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_102()
#line 936 "as-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_104()
#line 950 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_105()
#line 963 "as-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_110()
#line 993 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_112()
#line 1006 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_113()
#line 1011 "as-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_116()
#line 1026 "as-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[0+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[0+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-4+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_117()
#line 1041 "as-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_118()
#line 1054 "as-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_119()
#line 1065 "as-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_122()
#line 1088 "as-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_123()
#line 1094 "as-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_128()
#line 1120 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_130()
#line 1130 "as-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_135()
#line 1156 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_137()
#line 1169 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_138()
#line 1175 "as-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_141()
#line 1185 "as-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_142()
#line 1194 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = (Method) yyVals[0+yyTop];
		async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
		current_type.AddMember (m);
	  }

void case_143()
#line 1204 "as-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_146()
#line 1243 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-10+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-11+yyTop], yyVals[0+yyTop] != null);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
				     
		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_148()
#line 1270 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_150()
#line 1279 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var modifiers = (Modifiers) yyVals[-12+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-2+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-13+yyTop], yyVals[0+yyTop] != null);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-11+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_151()
#line 1306 "as-parser.jay"
{
		MemberName name = (MemberName) yyVals[-5+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-6+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-9+yyTop],
					    0, name, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop], false);

		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_152()
#line 1325 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop], false);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_157()
#line 1352 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_158()
#line 1357 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_159()
#line 1364 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_160()
#line 1370 "as-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_161()
#line 1377 "as-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_162()
#line 1387 "as-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_163()
#line 1393 "as-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_166()
#line 1410 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_167()
#line 1418 "as-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_168()
#line 1427 "as-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_169()
#line 1452 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[0+yyTop], lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], lt.Location);
	  }

void case_170()
#line 1457 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_171()
#line 1467 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])), lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], l);
	  }

void case_173()
#line 1483 "as-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-6+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, mod, (Attributes) yyVals[-7+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_177()
#line 1532 "as-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_178()
#line 1556 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_179()
#line 1563 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_180()
#line 1570 "as-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_181()
#line 1583 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_182()
#line 1588 "as-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_183()
#line 1595 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_184()
#line 1603 "as-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_185()
#line 1608 "as-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_187()
#line 1624 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_188()
#line 1635 "as-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_189()
#line 1640 "as-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_190()
#line 1654 "as-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_191()
#line 1661 "as-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_193()
#line 1675 "as-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-6+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_195()
#line 1704 "as-parser.jay"
{
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }

void case_200()
#line 1723 "as-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_201()
#line 1737 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_202()
#line 1759 "as-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_203()
#line 1780 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_204()
#line 1807 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_206()
#line 1829 "as-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_207()
#line 1834 "as-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_209()
#line 1849 "as-parser.jay"
{
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_210()
#line 1855 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_211()
#line 1869 "as-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_212()
#line 1875 "as-parser.jay"
{
	    lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_228()
#line 1933 "as-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_232()
#line 1967 "as-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_234()
#line 1979 "as-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_259()
#line 2055 "as-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_261()
#line 2074 "as-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_262()
#line 2089 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_263()
#line 2095 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_264()
#line 2105 "as-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_265()
#line 2122 "as-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_266()
#line 2131 "as-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
		var lt = (Tokenizer.LocatedToken) yyVals[-4+yyTop];
		var mods = (Modifiers) yyVals[-5+yyTop];
		var c = new Constructor (current_type, lt.Value, mods, (Attributes) yyVals[-6+yyTop], current_local_parameters, lt.Location);

		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		}

		current_type.AddConstructor (c);
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_267()
#line 2160 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var c = (Constructor) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_273()
#line 2192 "as-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_275()
#line 2202 "as-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_276()
#line 2208 "as-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorThisInitializer (null, GetLocation (yyVals[0+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_277()
#line 2214 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_278()
#line 2222 "as-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_279()
#line 2231 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_280()
#line 2256 "as-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_281()
#line 2270 "as-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_282()
#line 2283 "as-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_283()
#line 2291 "as-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_284()
#line 2298 "as-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_287()
#line 2317 "as-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_292()
#line 2341 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_294()
#line 2351 "as-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_295()
#line 2360 "as-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_299()
#line 2381 "as-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_300()
#line 2386 "as-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_301()
#line 2391 "as-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_302()
#line 2399 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_303()
#line 2411 "as-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_304()
#line 2427 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_305()
#line 2439 "as-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_306()
#line 2455 "as-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_308()
#line 2464 "as-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_309()
#line 2476 "as-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_310()
#line 2481 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_311()
#line 2493 "as-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_312()
#line 2499 "as-parser.jay"
{
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_314()
#line 2516 "as-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
		}
		yyVal = yyVals[0+yyTop];
	 }

void case_315()
#line 2524 "as-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_320()
#line 2542 "as-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_321()
#line 2550 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_322()
#line 2563 "as-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_323()
#line 2571 "as-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_326()
#line 2597 "as-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_328()
#line 2616 "as-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_330()
#line 2635 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_332()
#line 2646 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_334()
#line 2658 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_335()
#line 2667 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_337()
#line 2679 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_338()
#line 2686 "as-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_339()
#line 2694 "as-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_340()
#line 2700 "as-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_342()
#line 2716 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_343()
#line 2725 "as-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_345()
#line 2736 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_346()
#line 2745 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_347()
#line 2750 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_348()
#line 2758 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_349()
#line 2764 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_350()
#line 2772 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_352()
#line 2782 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_353()
#line 2793 "as-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_354()
#line 2799 "as-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_355()
#line 2809 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop]);
  	  }

void case_356()
#line 2814 "as-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, Variance.None);
  	  }

void case_361()
#line 2848 "as-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_363()
#line 2857 "as-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_365()
#line 2866 "as-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_368()
#line 2882 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null) {
				if (sn.Name == "var")
					yyVal = new VarExpr (sn.Location);
				else if (sn.Name == "Boolean") 
					yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[-1+yyTop]));
				else if (sn.Name == "Number")
					yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[-1+yyTop]));
				else if (sn.Name == "String")
					yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[-1+yyTop]));
				else if (sn.Name == "Void")
					yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop]));
				else
					yyVal = yyVals[-1+yyTop];
			} else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_370()
#line 2909 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_373()
#line 2925 "as-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_374()
#line 2931 "as-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_375()
#line 2940 "as-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_412()
#line 3004 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_413()
#line 3008 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_424()
#line 3049 "as-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_426()
#line 3061 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_427()
#line 3067 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_428()
#line 3073 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_429()
#line 3079 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_431()
#line 3089 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_433()
#line 3097 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_434()
#line 3105 "as-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_435()
#line 3110 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_438()
#line 3126 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_439()
#line 3136 "as-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_442()
#line 3152 "as-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_443()
#line 3158 "as-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_444()
#line 3163 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_445()
#line 3171 "as-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_447()
#line 3180 "as-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_448()
#line 3188 "as-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_449()
#line 3195 "as-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_454()
#line 3213 "as-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_455()
#line 3219 "as-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_456()
#line 3228 "as-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_457()
#line 3242 "as-parser.jay"
{
	  	lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_458()
#line 3248 "as-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_463()
#line 3269 "as-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_464()
#line 3274 "as-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_465()
#line 3279 "as-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_466()
#line 3284 "as-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_468()
#line 3296 "as-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_469()
#line 3301 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_470()
#line 3306 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_471()
#line 3314 "as-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_472()
#line 3320 "as-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_473()
#line 3325 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_474()
#line 3333 "as-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_475()
#line 3339 "as-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_479()
#line 3366 "as-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_480()
#line 3371 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_483()
#line 3393 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_484()
#line 3406 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_485()
#line 3418 "as-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_486()
#line 3426 "as-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_487()
#line 3433 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_488()
#line 3440 "as-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_489()
#line 3445 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_491()
#line 3457 "as-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_492()
#line 3465 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_497()
#line 3488 "as-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_498()
#line 3494 "as-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_499()
#line 3503 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_500()
#line 3509 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_501()
#line 3515 "as-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_502()
#line 3520 "as-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_506()
#line 3535 "as-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_507()
#line 3543 "as-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_508()
#line 3548 "as-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_513()
#line 3578 "as-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_514()
#line 3585 "as-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_515()
#line 3599 "as-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_516()
#line 3605 "as-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_518()
#line 3618 "as-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_521()
#line 3629 "as-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_522()
#line 3637 "as-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_523()
#line 3643 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_524()
#line 3651 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_525()
#line 3657 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_526()
#line 3663 "as-parser.jay"
{
		var tne = (ATypeNameExpression) yyVals[-3+yyTop];
		if (tne.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (tne, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_527()
#line 3675 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_528()
#line 3685 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_529()
#line 3696 "as-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_530()
#line 3704 "as-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_531()
#line 3712 "as-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_532()
#line 3720 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_540()
#line 3759 "as-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_541()
#line 3767 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_545()
#line 3787 "as-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_546()
#line 3792 "as-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method is AnonymousMethodExpression) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_555()
#line 3847 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_556()
#line 3852 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_557()
#line 3857 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_559()
#line 3866 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_561()
#line 3875 "as-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_565()
#line 3892 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
#line 3897 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_568()
#line 3906 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
#line 3911 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_570()
#line 3916 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_571()
#line 3921 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_573()
#line 3930 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_574()
#line 3935 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 3944 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_578()
#line 3953 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 3962 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
#line 3971 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 3980 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 3989 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 4000 "as-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_589()
#line 4005 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_591()
#line 4017 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 4022 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_593()
#line 4027 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 4032 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_595()
#line 4037 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 4042 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_597()
#line 4047 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 4052 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_599()
#line 4057 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_600()
#line 4062 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 4070 "as-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_602()
#line 4077 "as-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_603()
#line 4091 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_604()
#line 4097 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_605()
#line 4103 "as-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_607()
#line 4111 "as-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_611()
#line 4127 "as-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_613()
#line 4138 "as-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_614()
#line 4146 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_615()
#line 4152 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_616()
#line 4157 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_617()
#line 4163 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_619()
#line 4172 "as-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_620()
#line 4177 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_622()
#line 4186 "as-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_623()
#line 4191 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_630()
#line 4214 "as-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_631()
#line 4219 "as-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_632()
#line 4224 "as-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_636()
#line 4253 "as-parser.jay"
{
		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
	  }

void case_637()
#line 4263 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_638()
#line 4278 "as-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_639()
#line 4284 "as-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_642()
#line 4299 "as-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_645()
#line 4313 "as-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_646()
#line 4332 "as-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_647()
#line 4340 "as-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_648()
#line 4345 "as-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_649()
#line 4350 "as-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_650()
#line 4355 "as-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_651()
#line 4360 "as-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_652()
#line 4365 "as-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_653()
#line 4370 "as-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_654()
#line 4375 "as-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_655()
#line 4380 "as-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_656()
#line 4385 "as-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_657()
#line 4390 "as-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_658()
#line 4395 "as-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_659()
#line 4400 "as-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_660()
#line 4407 "as-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_663()
#line 4420 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_666()
#line 4437 "as-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_667()
#line 4443 "as-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_668()
#line 4462 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_669()
#line 4468 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_670()
#line 4478 "as-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_671()
#line 4484 "as-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_672()
#line 4510 "as-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_673()
#line 4517 "as-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_677()
#line 4537 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_680()
#line 4571 "as-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_682()
#line 4583 "as-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_683()
#line 4588 "as-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_684()
#line 4597 "as-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_685()
#line 4602 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_693()
#line 4629 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_726()
#line 4693 "as-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_727()
#line 4698 "as-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_728()
#line 4703 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_729()
#line 4711 "as-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_730()
#line 4719 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_733()
#line 4732 "as-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_734()
#line 4748 "as-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_735()
#line 4778 "as-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_736()
#line 4789 "as-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_739()
#line 4804 "as-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_741()
#line 4813 "as-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_744()
#line 4829 "as-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = Tokenizer.LocatedToken.Create ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_745()
#line 4839 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_746()
#line 4846 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_747()
#line 4852 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_748()
#line 4859 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_750()
#line 4869 "as-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		/* TODO: lbag*/
	  }

void case_751()
#line 4874 "as-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_755()
#line 4892 "as-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_758()
#line 4907 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_759()
#line 4916 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_766()
#line 4949 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_768()
#line 4962 "as-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_769()
#line 4967 "as-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_770()
#line 4975 "as-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_772()
#line 4981 "as-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_775()
#line 4999 "as-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementErrorExpression (yyVals[0+yyTop] as Expression);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_776()
#line 5012 "as-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_777()
#line 5020 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_780()
#line 5034 "as-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_781()
#line 5043 "as-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_782()
#line 5053 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_784()
#line 5067 "as-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_785()
#line 5073 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_786()
#line 5083 "as-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_788()
#line 5092 "as-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_789()
#line 5099 "as-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_790()
#line 5106 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new List<SwitchSection> ();
	  }

void case_793()
#line 5125 "as-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_794()
#line 5132 "as-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_795()
#line 5142 "as-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_796()
#line 5147 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_802()
#line 5166 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_803()
#line 5174 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_804()
#line 5184 "as-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_805()
#line 5189 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_806()
#line 5194 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_807()
#line 5204 "as-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }

void case_809()
#line 5220 "as-parser.jay"
{
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }

void case_810()
#line 5228 "as-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_811()
#line 5241 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_812()
#line 5249 "as-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_814()
#line 5259 "as-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_815()
#line 5268 "as-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_816()
#line 5273 "as-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_821()
#line 5293 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_822()
#line 5300 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_830()
#line 5324 "as-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_831()
#line 5340 "as-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_832()
#line 5353 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_833()
#line 5370 "as-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_834()
#line 5380 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_841()
#line 5403 "as-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_842()
#line 5411 "as-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_843()
#line 5416 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_844()
#line 5424 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_845()
#line 5430 "as-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_846()
#line 5435 "as-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_847()
#line 5443 "as-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_848()
#line 5448 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_849()
#line 5456 "as-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_850()
#line 5461 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_851()
#line 5469 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_852()
#line 5485 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_856()
#line 5511 "as-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_857()
#line 5516 "as-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_858()
#line 5521 "as-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_859()
#line 5529 "as-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_860()
#line 5536 "as-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [l.Count - 1].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_864()
#line 5560 "as-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_866()
#line 5579 "as-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_869()
#line 5607 "as-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_871()
#line 5617 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_872()
#line 5625 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_873()
#line 5635 "as-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_874()
#line 5645 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_875()
#line 5650 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_876()
#line 5662 "as-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_877()
#line 5672 "as-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_878()
#line 5677 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_879()
#line 5686 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_880()
#line 5694 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_882()
#line 5705 "as-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_884()
#line 5717 "as-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_885()
#line 5728 "as-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_886()
#line 5740 "as-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_887()
#line 5751 "as-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_888()
#line 5758 "as-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_889()
#line 5767 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_890()
#line 5775 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_891()
#line 5790 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_892()
#line 5798 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_894()
#line 5817 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_896()
#line 5832 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_897()
#line 5849 "as-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_898()
#line 5864 "as-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_900()
#line 5877 "as-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_901()
#line 5882 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_903()
#line 5894 "as-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_904()
#line 5901 "as-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_905()
#line 5909 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_906()
#line 5916 "as-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_908()
#line 5928 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_915()
#line 5948 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_917()
#line 5967 "as-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_918()
#line 5977 "as-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_919()
#line 5985 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_920()
#line 5993 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_921()
#line 6001 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_922()
#line 6039 "as-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_923()
#line 6047 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_924()
#line 6055 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_925()
#line 6063 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_929()
#line 6118 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_931()
#line 6129 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_932()
#line 6136 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_934()
#line 6145 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_935()
#line 6152 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_937()
#line 6164 "as-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_938()
#line 6169 "as-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_940()
#line 6181 "as-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_941()
#line 6186 "as-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_943()
#line 6196 "as-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_944()
#line 6212 "as-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_947()
#line 6239 "as-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_type.AddMember (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_948()
#line 6267 "as-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_958()
#line 6310 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_959()
#line 6316 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_962()
#line 6331 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_963()
#line 6336 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_964()
#line 6344 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_965()
#line 6352 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_973()
#line 6390 "as-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_974()
#line 6396 "as-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_975()
#line 6405 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   18,   19,    8,   17,   17,   21,   21,   21,   22,   22,
   23,   23,    7,    7,    6,    6,   20,   20,   24,   24,
   25,   25,   26,   26,   26,   26,   26,    9,    9,   10,
   10,   34,   32,   37,   33,   33,   35,   35,   35,   35,
   36,   36,   41,   38,   39,   40,   40,   42,   42,   42,
   42,   42,   43,   43,   47,   44,   46,   49,   49,   49,
   50,   50,   51,   51,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   66,   68,   70,   71,
   72,   28,   28,   75,   53,   76,   76,   77,   77,   78,
   80,   74,   74,   79,   79,   85,   54,   89,   54,   54,
   84,   92,   84,   86,   86,   93,   93,   94,   95,   94,
   90,   90,   96,   96,   97,   98,   88,   88,   91,   91,
   91,  101,   55,  104,  105,   99,  106,  107,  108,   99,
   99,   99,  100,  100,  103,  103,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  112,  112,  115,  115,
  115,  118,  115,  116,  116,  119,  119,  120,  120,  120,
  113,  113,  113,  121,  121,  121,  114,  123,  125,  126,
   56,  128,  129,  130,   58,  124,  124,  124,  124,  124,
  134,  131,  135,  132,  133,  133,  133,  136,  137,  138,
  140,   29,   29,  139,  139,  141,  141,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  145,   59,  144,  144,
  146,  146,  149,  143,  143,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  151,  150,  152,
  150,  150,  150,   60,  155,  157,  153,  154,  154,  156,
  156,  161,  159,  162,  159,  159,  159,  163,   61,  165,
   57,  168,  169,   57,  164,  171,  164,  166,  166,  172,
  172,  173,  174,  173,  175,  170,  167,  167,  167,  167,
  167,  179,  176,  180,  177,  178,  178,   62,  182,  184,
  185,   30,  181,  181,  181,  183,  183,  183,  186,  186,
  187,  188,  187,  187,  189,  190,  191,   31,  192,  192,
   16,   16,  193,  193,  196,  195,  195,  195,  197,  197,
  199,   65,  122,  102,  102,  127,  127,  200,  200,  200,
  198,  198,  201,  201,  202,  202,  204,  204,   83,   73,
   73,   87,   87,  117,  117,  147,  147,  205,  205,  205,
  205,  205,  209,  209,  210,  208,  208,  208,  208,  208,
  208,  208,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  213,  213,  213,  214,  214,  214,  234,  234,  235,
  235,  236,  236,  216,  216,  233,  233,  233,  233,  233,
  233,  233,  233,  218,  218,  238,  238,  239,  239,  240,
  240,  242,  242,  242,  243,  243,  243,  243,  243,  244,
  244,  160,  160,  237,  237,  237,  237,  237,  249,  249,
  248,  248,  250,  250,  250,  250,  251,  219,  219,  219,
  247,  247,  247,  252,  252,  253,  253,  220,  221,  221,
  222,  223,  224,  224,  215,  215,  215,  215,  215,  258,
  254,  225,  259,  259,  260,  260,  261,  261,  262,  262,
  262,  262,  255,  255,  206,  206,  257,  257,  263,  263,
  256,  256,   82,   82,  264,  264,  265,  226,  266,  266,
  266,  267,  267,  267,  267,  267,  268,  194,  227,  228,
  229,  230,  270,  231,  271,  231,  269,  269,  273,  272,
  217,  274,  274,  274,  274,  274,  275,  275,  275,  275,
  275,  275,  275,  276,  276,  276,  276,  277,  277,  277,
  277,  277,  277,  278,  278,  278,  279,  279,  279,  279,
  279,  280,  280,  280,  281,  281,  282,  282,  283,  283,
  284,  284,  285,  285,  286,  286,  287,  287,  287,  289,
  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
  290,  290,  291,  291,  291,  292,  292,  293,  293,  295,
  294,  288,  288,  297,  296,  298,  296,  299,  300,  296,
  301,  302,  296,   45,   45,  245,  245,  245,  245,  232,
  232,  232,   81,  304,  305,  306,  307,  308,   27,   64,
   64,   63,   63,  109,  109,  309,  309,  309,  309,  309,
  309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
   67,   67,   67,   69,   69,  310,  310,  311,  311,  312,
  312,  313,  313,  313,  313,  203,  203,  314,  314,  316,
  110,  317,  317,  318,  158,  315,  315,  319,  319,  320,
  320,  320,  320,  324,  324,  325,  325,  325,  322,  322,
  322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
  322,  326,  326,  326,  326,  326,  326,  326,  326,  326,
  326,  326,  326,  326,  340,  340,  340,  340,  327,  341,
  323,  342,  342,  343,  343,  343,  343,  343,  343,  207,
  207,  344,   48,   48,  346,  321,  349,  321,  345,  345,
  345,  347,  347,  353,  353,  352,  352,  354,  354,  348,
  348,  350,  350,  355,  355,  356,  351,  351,  351,  328,
  328,  328,  339,  339,  357,  358,  358,  329,  329,  359,
  359,  359,  362,  360,  360,  361,  361,  363,  363,  363,
  366,  364,  365,  365,  367,  367,  367,  330,  330,  330,
  330,  368,  368,  369,  369,  369,  373,  370,  376,  372,
  372,  379,  375,  375,  378,  378,  380,  380,  374,  374,
  383,  382,  382,  377,  377,  381,  381,  385,  384,  384,
  371,  371,  386,  371,  331,  331,  331,  331,  331,  331,
  387,  388,  388,  389,  389,  389,  390,  390,  391,  391,
  392,  392,  393,  393,  332,  332,  332,  332,  394,  394,
  396,  396,  395,  397,  395,  395,  333,  334,  398,  337,
  335,  335,  400,  401,  338,  403,  404,  336,  336,  336,
  402,  402,  399,  399,  303,  303,  303,  303,  405,  405,
  407,  407,  409,  408,  410,  408,  406,  406,  406,  406,
  406,  414,  412,  415,  416,  412,  411,  411,  417,  417,
  417,  417,  417,  422,  418,  423,  419,  424,  425,  426,
  420,  428,  429,  430,  420,  427,  427,  432,  421,  431,
  435,  431,  434,  437,  434,  433,  433,  433,  436,  436,
  436,  413,  438,  413,    3,    3,  439,    3,    3,  440,
  440,  246,  246,  241,  241,    5,  441,  441,  441,  441,
  445,  441,  441,  441,  441,  442,  442,  443,  446,  443,
  444,  444,  447,  447,  448,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    3,    5,    2,
    0,    0,   10,    0,    1,    1,    3,    1,    0,    1,
    0,    1,    0,    1,    0,    1,    0,    1,    1,    2,
    1,    2,    1,    1,    1,    1,    1,    0,    1,    1,
    2,    0,    3,    0,    6,    3,    1,    1,    1,    1,
    1,    3,    0,    3,    1,    0,    3,    0,    1,    1,
    3,    3,    1,    1,    0,    4,    4,    0,    1,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
    0,   16,    5,    0,    9,    0,    1,    1,    2,    3,
    0,    3,    1,    1,    1,    0,   10,    0,   10,    8,
    0,    0,    3,    0,    1,    1,    2,    2,    0,    5,
    0,    1,    1,    2,    3,    0,    4,    2,    1,    1,
    1,    0,    3,    0,    0,   12,    0,    0,    0,   14,
   10,    5,    1,    1,    0,    1,    1,    3,    3,    3,
    5,    3,    5,    1,    1,    1,    1,    3,    5,    2,
    5,    0,    8,    0,    1,    1,    2,    1,    1,    1,
    4,    6,    4,    1,    2,    2,    1,    0,    0,    0,
   10,    0,    0,    0,   13,    1,    2,    1,    2,    1,
    0,    5,    0,    5,    1,    1,    1,    0,    0,    0,
    0,   15,    5,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    5,    1,    1,
    1,    1,    0,    7,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    7,    0,
    7,    2,    2,    2,    0,    0,    9,    1,    1,    0,
    1,    0,    6,    0,    6,    2,    1,    0,    8,    0,
    9,    0,    0,   10,    0,    0,    3,    0,    1,    1,
    2,    2,    0,    5,    0,    2,    2,    2,    1,    1,
    1,    0,    5,    0,    5,    1,    1,    2,    0,    0,
    0,   12,    0,    2,    2,    0,    1,    2,    1,    3,
    2,    0,    5,    1,    0,    0,    0,   13,    0,    1,
    1,    3,    1,    4,    2,    0,    3,    2,    1,    3,
    0,    3,    1,    1,    3,    1,    2,    3,    4,    4,
    0,    3,    1,    3,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
    2,    2,    1,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    3,    4,    4,    4,    3,    3,
    4,    3,    4,    4,    4,    0,    1,    3,    4,    0,
    1,    1,    3,    2,    3,    1,    2,    3,    2,    1,
    1,    0,    1,    1,    3,    3,    3,    2,    1,    1,
    1,    1,    2,    2,    4,    3,    1,    4,    4,    3,
    1,    3,    2,    1,    3,    1,    1,    1,    4,    3,
    2,    2,    6,    3,    7,    4,    3,    7,    3,    0,
    2,    4,    1,    2,    0,    1,    1,    3,    3,    1,
    1,    1,    0,    1,    1,    2,    2,    3,    1,    2,
    0,    1,    2,    4,    1,    3,    0,    5,    1,    1,
    1,    2,    3,    3,    4,    4,    1,    2,    4,    4,
    4,    4,    0,    4,    0,    5,    0,    1,    0,    4,
    4,    1,    2,    2,    4,    2,    1,    2,    2,    2,
    2,    2,    2,    1,    3,    3,    3,    1,    3,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    3,    3,
    3,    1,    3,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    5,    4,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    3,    3,    2,    1,    0,    1,    1,    1,    0,
    2,    1,    1,    0,    4,    0,    5,    0,    0,    7,
    0,    0,    8,    1,    1,    1,    1,    1,    1,    6,
    4,    4,    1,    1,    0,    0,    0,    0,   15,    0,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    2,    3,    0,    1,    1,    2,    4,    3,    1,
    3,    1,    3,    1,    1,    0,    1,    1,    1,    0,
    4,    1,    1,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    4,    1,    2,    2,    2,    2,    2,    2,    1,    1,
    2,    1,    1,    1,    0,    8,    0,    8,    0,    2,
    1,    0,    1,    0,    1,    1,    2,    2,    4,    0,
    2,    0,    1,    1,    2,    4,    1,    5,    2,    2,
    2,    2,    2,    2,    1,    1,    1,    1,    1,    5,
    7,    4,    0,    8,    4,    0,    1,    1,    2,    1,
    0,    3,    1,    2,    3,    3,    1,    1,    1,    1,
    1,    5,    4,    7,    3,    6,    0,    4,    0,    5,
    1,    0,    4,    2,    2,    2,    1,    1,    0,    1,
    0,    5,    1,    0,    1,    0,    1,    1,    1,    3,
    4,    5,    0,    9,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    3,    4,    3,    3,    2,    3,    2,
    4,    3,    0,    1,    3,    4,    5,    3,    1,    2,
    0,    1,    2,    0,    7,    3,    2,    2,    0,    3,
    5,    4,    0,    0,   10,    0,    0,    9,    5,    4,
    2,    1,    0,    2,    2,    2,    2,    2,    4,    5,
    4,    5,    0,    5,    0,    6,    3,    2,    2,    2,
    1,    0,    3,    0,    0,    6,    1,    2,    1,    1,
    1,    1,    1,    0,    5,    0,    3,    0,    0,    0,
   12,    0,    0,    0,   13,    0,    2,    0,    3,    1,
    0,    4,    1,    0,    4,    1,    2,    2,    1,    2,
    2,    0,    0,    4,    2,    3,    0,    4,    2,    2,
    3,    0,    1,    1,    1,    2,    2,    2,    4,    3,
    0,    7,    4,    4,    3,    1,    3,    0,    0,    4,
    0,    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  945,    0,    0,  949,    0,
    0,   15,   17,  378,  384,  391,  379,  381,    0,  380,
    0,  387,  389,  376,    0,  383,  385,  377,  388,  390,
  386,  341,  966,    0,  382,  956,    0,   10,    1,    0,
    0,    0,   12,    0,  777,    0,    0,    0,    0,    0,
    0,    0,    0,  419,    0,    0,    0,    0,    0,    0,
    0,  417,    0,    0,    0,  478,    0,  418,    0,  517,
    0,  869,    0,    0,    0,  629,    0,    0,    0,    0,
    0,    0,    0,  680,    0,  729,    0,    0,    0,    0,
    0,    0,    0,    0,  416,    0,  618,    0,  776,    0,
  712,    0,    0,    0,  392,  393,  394,    0,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  414,  415,  625,  547,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  626,  624,  627,  628,  696,  698,    0,  694,  697,  713,
  715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
  714,    0,  778,  779,  798,  799,  800,  801,  835,  836,
  837,  838,  839,  840,    0,    0,    0,   20,    0,    0,
  331,    0,  333,  953,   16,  946,    0,    0,  241,  240,
  237,  242,  243,  236,  255,  254,  247,  248,  244,  246,
  245,  249,  238,  239,  250,  251,  257,  256,  252,  253,
    0,    0,  969,    0,  958,    0,  957,    3,   52,    0,
    0,    0,   50,   13,    0,    0,    0,  841,  420,  421,
  867,    0,  744,  743,    0,  843,  842,    0,  539,  533,
  538,  728,  775,  699,  726,  725,  727,  700,  701,  702,
  703,  704,  705,  706,  707,  708,  709,  710,  711,    0,
    0,    0,  807,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  848,    0,    0,    0,    0,  854,
    0,    0,    0,  850,    0,    0,    0,  868,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  360,    0,
    0,    0,    0,    0,    0,    0,    0,  621,    0,    0,
    0,  395,  546,    0,    0,  544,  548,  549,  543,  553,
  552,  550,  551,  614,  528,    0,  413,  412,    0,    0,
    0,    0,    0,  730,    0,    0,    0,  481,  482,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  948,  695,  773,  774,
  901,  916,    0,    0,  902,  904,    0,  928,  887,  885,
  909,    0,    0,  907,  910,  911,  912,  913,  888,  886,
  951,    0,    0,  335,    0,   18,    0,    0,    0,  965,
    0,  342,    0,    0,    0,  967,    0,    6,    0,   51,
  480,    0,  476,  477,    0,    0,  474,    0,    0,    0,
    0,    0,  805,    0,  772,  770,  771,    0,    0,    0,
    0,    0,    0,    0,    0,  633,    0,  846,  844,  634,
    0,    0,  502,    0,    0,    0,  493,    0,  497,  507,
  509,    0,  489,    0,    0,    0,    0,    0,  484,    0,
    0,  487,    0,  491,  362,  847,    0,    0,  849,  858,
    0,    0,    0,  859,    0,    0,  870,    0,    0,    0,
    0,  742,  372,    0,  330,  368,  369,    0,    0,  367,
  370,  371,    0,    0,    0,  554,    0,    0,  535,    0,
  616,  693,    0,    0,  688,  690,  691,  692,  424,  425,
    0,  338,  339,    0,  179,  178,  180,    0,    0,    0,
    0,  364,    0,  601,    0,    0,  852,    0,    0,  429,
    0,  432,    0,  430,    0,  470,    0,    0,    0,    0,
    0,  459,  462,    0,    0,  454,  461,  460,    0,  590,
  591,  592,  593,  594,  595,  596,  597,  598,  600,  599,
  555,  557,  556,  562,  563,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  586,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  900,  899,    0,  908,    0,  898,    0,    0,  332,
  963,  964,  356,    0,    0,  353,    0,    0,  176,    0,
    0,  973,  959,  961,   60,   58,   59,    0,    0,   53,
    0,    0,   61,   63,   28,   26,   21,    0,  428,    0,
  479,    0,  530,  747,  541,  166,  187,    0,    0,    0,
  156,    0,    0,    0,  167,  534,    0,  738,  736,  737,
  734,  735,  873,  733,  811,    0,  829,  808,    0,  820,
    0,  831,    0,  845,  782,    0,  872,    0,    0,  492,
    0,  508,  510,    0,    0,  446,    0,    0,  442,    0,
    0,  471,    0,  512,  486,    0,    0,  506,  141,  513,
  139,  140,  515,    0,  529,  785,    0,  863,    0,  856,
    0,  860,  521,    0,    0,    0,  357,    0,  519,    0,
    0,  531,  880,    0,  876,  745,  803,    0,  741,  891,
    0,  889,    0,    0,  631,  632,    0,    0,    0,  682,
  683,  681,  689,  609,  615,  608,    0,    0,  337,  604,
    0,    0,    0,  545,  851,  731,  433,  427,  431,  426,
  532,  469,  468,  467,  464,  463,    0,  458,  422,  423,
  434,  435,    0,  589,    0,  613,  612,  917,  893,    0,
  918,    0,  903,  905,  914,    0,  929,    0,  897,  943,
   19,  334,  679,  678,    0,  677,    0,  352,  975,  177,
  970,    0,    0,   54,    0,    0,    0,    0,    0,   80,
   79,    0,  475,    0,    0,    0,    0,  170,  540,    0,
    0,    0,    0,    0,  821,  809,    0,  832,    0,    0,
  871,  499,  498,  449,    0,    0,  954,  955,  438,  444,
    0,  447,    0,  473,    0,    0,    0,    0,    0,  783,
  866,    0,  857,    0,  527,  522,    0,    0,  518,    0,
  879,    0,    0,  802,  892,  890,    0,  536,    0,  617,
  611,  340,  603,  602,  619,  466,    0,  457,  456,  455,
  588,    0,  895,    0,  922,    0,    0,  937,  938,  931,
    0,  355,  354,  974,    0,    0,   62,   56,    0,   64,
   22,   27,   77,    0,    0,  185,  186,    0,    0,    0,
    0,  159,  168,  160,  162,  806,    0,    0,    0,    0,
    0,  830,    0,    0,  448,  450,  451,  445,  439,  443,
    0,  504,    0,  472,  483,  437,  516,  514,    0,  862,
    0,    0,    0,  523,    0,  882,    0,    0,  751,    0,
    0,  630,  622,    0,  465,  894,    0,    0,    0,    0,
  915,    0,  944,  962,    0,    0,    0,   69,   70,   73,
   74,    0,  761,  114,  115,    0,    0,    0,  764,    0,
  183,    0,    0,    0,  804,  884,    0,    0,    0,  756,
    0,  825,    0,    0,  833,  781,  488,  485,  790,    0,
  797,    0,    0,  788,    0,  793,  864,  526,  525,  881,
  877,    0,  767,  750,    0,    0,    0,  620,  896,  919,
    0,  906,    0,    0,  933,    0,   75,   67,    0,    0,
    0,  748,  765,  171,    0,    0,  163,  161,    0,  757,
  874,  822,  810,  818,  817,  812,  814,    0,    0,  784,
  789,    0,  794,    0,    0,    0,  746,  623,    0,  923,
  940,  941,  934,   55,    0,   71,   72,    0,    0,  172,
  182,    0,    0,    0,  834,  796,  795,    0,  684,  865,
  878,    0,    0,    0,    0,   76,    0,    0,    0,   38,
    0,   41,   43,   44,   45,   46,   47,  766,    0,  759,
  875,  813,    0,    0,  827,    0,    0,  920,    0,  935,
  651,  657,  649,  646,  656,  650,  648,  647,  654,  652,
  653,  659,  655,  658,  660,    0,    0,  644,   42,   23,
   40,  173,  816,  815,    0,  768,    0,  924,    0,    0,
  641,    0,  645,  685,    0,    0,    0,  359,    0,  635,
    0,    0,    0,  921,    0,    0,    0,  309,    0,  213,
    0,  103,    0,  927,  925,  325,  315,  314,    0,  636,
  209,   98,    0,  310,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  326,    0,    0,  324,  311,    0,  319,
  375,    0,  373,    0,  637,    0,  666,  210,   99,    0,
    0,  308,    0,    0,  663,    0,    0,    0,  667,    0,
    0,  327,    0,    0,  320,  374,  669,    0,    0,    0,
  100,    0,    0,   30,  312,  674,    0,  675,  672,    0,
  670,   96,    0,   94,    0,    0,   83,   85,   86,   87,
   88,   89,   90,   91,   92,   93,   95,  142,    0,    0,
  226,  218,  219,  220,  221,  222,  223,  224,  225,    0,
    0,  216,    0,  328,  323,    0,    0,    0,  638,   84,
    0,  269,  264,  268,    0,  211,  217,    0,  673,  671,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  278,
    0,    0,  227,    0,    0,  235,    0,  154,  143,  153,
    0,  101,    0,    0,  263,    0,    0,    0,  344,    0,
    0,    0,    0,  262,    0,    0,  147,    0,    0,  346,
  343,  188,    0,    0,    0,    0,  639,  212,    0,  104,
    0,    0,    0,    0,  152,  144,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  192,  347,  230,  229,  228,
    0,  102,    0,  282,    0,  260,    0,  348,    0,    0,
    0,    0,    0,  345,  258,  116,    0,    0,    0,  189,
    0,  233,  113,  111,    0,    0,  286,    0,    0,    0,
    0,    0,    0,  349,    0,  350,    0,    0,  148,    0,
  266,    0,    0,    0,    0,    0,    0,    0,  108,  301,
    0,  283,    0,    0,  295,    0,    0,    0,  290,    0,
  120,    0,    0,    0,    0,    0,  122,    0,    0,  279,
    0,  200,    0,  190,    0,    0,    0,    0,  112,    0,
  105,  109,    0,    0,    0,  297,    0,  298,  287,    0,
    0,  281,  291,  261,  138,    0,    0,    0,    0,  133,
    0,    0,  259,    0,    0,    0,    0,  126,    0,  277,
    0,  267,  271,    0,    0,  197,  199,  193,  234,  110,
  302,  304,  284,    0,    0,  296,  293,    0,    0,  119,
  134,  145,  151,  123,    0,  117,  127,    0,  276,    0,
    0,  201,  203,  191,    0,    0,    0,  295,  137,  135,
    0,  129,    0,  272,  274,    0,    0,  194,  306,  307,
  303,  305,  294,  146,    0,  149,    0,    0,  207,  206,
  205,  202,  204,    0,  130,    0,    0,    0,  195,  150,
  273,  275,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   49,    9,   50,   10,   11,   51,  230,  658,  412,
   12,   13,   52,   22,   23,  306,  647,  818,  982, 1099,
  648, 1519,  816, 1100, 1101, 1244, 1103, 1104, 1105, 1106,
 1107,  233,  640,  427,  641,  642,  906,  643,  644,  910,
  817,  977,  978,  979,  253,  563, 1075,  110,  822, 1245,
 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
 1256, 1257, 1136, 1152, 1319, 1173, 1191, 1187, 1205, 1221,
 1273, 1339,  533, 1385, 1363, 1407, 1408, 1409,  983, 1405,
  984,  712, 1302, 1428, 1398, 1466,  484, 1423, 1391, 1458,
 1023, 1464, 1467, 1468, 1525, 1459, 1460, 1456, 1258, 1309,
 1281, 1331,  660, 1369, 1511, 1352, 1429, 1536, 1137,  254,
  661,  662,  663,  664,  665,  627,  540, 1109,  628,  629,
  827, 1332, 1355, 1434, 1402, 1475, 1333, 1381, 1505, 1534,
 1435, 1436, 1532, 1516, 1517, 1171, 1186, 1220, 1270, 1311,
 1271, 1272, 1303, 1360, 1335, 1304,  309,  221, 1404, 1306,
 1397, 1389, 1259, 1283, 1329, 1472, 1431, 1090, 1473,  564,
 1527, 1528, 1328, 1388, 1365, 1417, 1412, 1386, 1444, 1449,
 1415, 1418, 1419, 1508, 1450, 1413, 1414, 1521, 1506, 1507,
 1168, 1179, 1198, 1189, 1213, 1199, 1200, 1223, 1183, 1210,
 1232,  506,  191,  112,  338,  193,  534,  422,  222, 1323,
  625,  626,  805, 1158,  310,  477,  503,  113, 1202, 1203,
   45,  114,  115,  116,  117,  118,  119,  120,  121,  122,
  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
  133,  134,  135,  136,  242,  781,  707,  945,  479,  697,
  849,  698,  699,  938,  137,  196,  703,  566,  567,  568,
  775,  436,  437,  282,  943,  705,  480,  284,  466,  467,
  468,  469,  472,  714,  297,  730,  731,  866,  250,  442,
  747,  251,  441,  138,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,  151,  788,  152,  543,
  544,  545,  755,  756,  757,  153,  531,  749,  339,  964,
  520, 1027,  154,  461, 1169, 1185, 1218, 1307, 1138, 1206,
 1207, 1240, 1241,  806,  523,  324,  752, 1116,  524,  525,
  255,  256,  257,  157,  158,  159,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  171,  270,
  549,  452,  453,  504,  961,  873, 1025,  915,  824,  987,
 1024,  998,  999, 1000,  988,  989,  271,  172,  173,  174,
 1012,  949, 1013, 1014, 1015, 1062, 1016,  175,  176,  177,
  178,  678,  454,  679, 1003,  931, 1004, 1112, 1084, 1057,
 1113,  680,  930,  681, 1115, 1058,  179,  180,  181,  182,
  183,  184,  291,  493,  494,  951, 1064,  300,  929,  834,
 1083,  958,  872, 1065,  185,  400,  186,  401,  892,  967,
  402,  403,  617,  608,  609,  896,  404,  405,  406,  407,
  408,  897,  603,  894, 1069, 1147, 1164,  969, 1094, 1156,
  797,  611,  798, 1034,  972, 1035, 1095,  901,   17,   19,
   46,   47,  225,  630,  813,  423,  631,  632,
  };
  protected static readonly short [] yySindex = {         -160,
    0, -172, -104,  -32,   95, 4047,    0,  167,    0,    0,
   95,  -32,    0,    0,   43,    0, 5805,   95,    0, -161,
 -145,    0,    0,    0,    0,    0,    0,    0,  205,    0,
  288,    0,    0,    0, 3268,    0,    0,    0,    0,    0,
    0,    0,    0,  506,    0,    0,  661,    0,    0,  167,
  209,   95,    0,  267,    0,  336,  274,  183, -248, -140,
 -251,  310, 5946,    0, -251, -251, -251, -191, -251, -251,
  697,    0, 7475, -251, -251,    0, 7616,    0,  363,    0,
  183,    0, -251, -248, -251,    0,11241,11241,  326, -251,
 -251, -122,10626,    0, 9976,    0,10626,10626,10626,10626,
10626,10626,10626,10626,    0,  317,    0,11384,    0,  212,
    0,  285,  377,  781,    0,    0,    0,  421,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1243,  757,
  136,  744,  507,  777,  387,  468,  441,  462,  482,  577,
    0,    0,    0,    0,    0,    0, 2879,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  176,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  346,  609,  209,    0,  393,  538,
    0,  491,    0,    0,    0,    0,11384,11384,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  557,  567,    0,  554,    0, -224,    0,    0,    0,  209,
  683,  209,    0,    0,  742,  579,10106,    0,    0,    0,
    0, 9976,    0,    0,  630,    0,    0,11384,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -155,
   48,10836,    0,11384, 9976,  636,  646, 9976, 9976, 8307,
  604, -120,  664,11433,    0, -251, -251,10626,  317,    0,
  700,11384, 9976,    0,  729,  477, -251,    0, 9976,  363,
 9456,  662, 9976,  703,  375,  415,  823, -248,    0,  752,
 -246,  834, -248, 9976, 9976, 9976,  310,    0,  810,  893,
  342,    0,    0, 6087, -291,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 8412,    0,    0,11143,  375,
  799,  803, 9976,    0,  769,  252,  428,    0,    0,  773,
 7757, 9326,10626, 9976, 9976, 9976, 9976, 9976, 9976, 9976,
 9976, 9976, 9976, 9976,10626,10626,10626,11384,11384,10626,
10626,10626,10626,10626,10626,10626,10626,10626,10626,10626,
10626,10626,10626,10626,10626, 9976,    0,    0,    0,    0,
    0,    0,11241,11241,    0,    0, -248,    0,    0,    0,
    0,  665,  840,    0,    0,    0,    0,    0,    0,    0,
    0,  209,  785,    0,  795,    0,  769,  557,  557,    0,
  133,    0,  621,  557,  854,    0, -168,    0, -159,    0,
    0,  769,    0,    0,  851,  616,    0,  874,10836,  889,
  123,  363,    0, -251,    0,    0,    0,  703,  457,  781,
 -246, -248,  752, 7063, -176,    0,  861,    0,    0,    0,
  -97,   80,    0,  474,    0,  882,    0,  900,    0,    0,
    0,  655,    0, 7193,  681, 9976,  664, 9326,    0,  752,
 6510,    0,  703,    0,    0,    0,  904,   97,    0,    0,
  183,  363,  331,    0,  979,  908,    0,  135, -248,10836,
  151,    0,    0,  703,    0,    0,    0, 9976,  992,    0,
    0,    0, 9976,  999,  919,    0,  927,  932,    0,11143,
    0,    0, -306, 6087,    0,    0,    0,    0,    0,    0,
  363,    0,    0, -253,    0,    0,    0,  703,  375, -248,
11459,    0,  923,    0,  941,10626,    0,  949, 6087,    0,
 -296,    0,  362,    0,  769,    0,  109, 9976, 9976,  955,
 1077,    0,    0,    5,   74,    0,    0,    0,  757,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  757,  757,  136,  136,  744,
  744,  744,  744,  507,  507,  777,  387,  468,  441,  462,
    0, -199, 7898, 1037, -248, 1038, -248, 7898, 7898,  956,
 9976,    0,    0,  840,    0, -248,    0,  581,  769,    0,
    0,    0,    0,  592,  207,    0,11459,  621,    0,  960,
  962,    0,    0,    0,    0,    0,    0,  375,  965,    0,
  964,  969,    0,    0,    0,    0,    0,  971,    0,  334,
    0,10106,    0,    0,    0,    0,    0,  556,  134,  973,
    0,  974,  978,  983,    0,    0, 9976,    0,    0,    0,
    0,    0,    0,    0,    0, -248,    0,    0,  977,    0,
  984,    0, -165,    0,    0, 5946,    0, 5946, 7334,    0,
 8307,    0,    0, 9586,  485,    0, -269,  115,    0,  934,
  943,    0,  126,    0,    0,  995,  990,    0,    0,    0,
    0,    0,    0,  994,    0,    0, 1002,    0, 8457,    0,
  363,    0,    0,  703,  475,  952,    0,  177,    0,  998,
 1003,    0,    0, 5946,    0,    0,    0, 5946,    0,    0,
 9976,    0, 9976,11384,    0,    0,  363, 1000,  363,    0,
    0,    0,    0,    0,    0,    0, 7898,11384,    0,    0,
 -248,11143, 1034,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 9196,    0,    0,    0,
    0,    0, 6651,    0, 7898,    0,    0,    0,    0, 1086,
    0, 1100,    0,    0,    0,  833,    0, 1013,    0,    0,
    0,    0,    0,    0,  975,    0,  133,    0,    0,    0,
    0,  621,  621,    0,  785, 1024, 1027, 1028,  981,    0,
    0, 9976,    0, 1022,  556,  986,11384,    0,    0,  408,
 1155, 1156,  152, 1026,    0,    0, 9976,    0, 9976, 1134,
    0,    0,    0,    0,  -51, 9716,    0,    0,    0,    0,
 6781,    0, 1159,    0,  752, 9976, 1043, 7334, 1045,    0,
    0, -248,    0,  206,    0,    0,  769,  952,    0, -248,
    0, -170, -166,    0,    0,    0, 1039,    0, 1071,    0,
    0,    0,    0,    0,    0,    0,  676,    0,    0,    0,
    0, 7898,    0, 7898,    0, 1064, 7898,    0,    0,    0,
  548,    0,    0,    0, 1047,  785,    0,    0,10236,    0,
    0,    0,    0, 9846, 1050,    0,    0, 1046, -157, 1054,
 1055,    0,    0,    0,    0,    0, 1058, 7334, 1056, -166,
 9976,    0, 1059, 5946,    0,    0,    0,    0,    0,    0,
 1065,    0,  664,    0,    0,    0,    0,    0, -189,    0,
 1066,  769,  952,    0,  952,    0, 1056, 1067,    0, 6922,
 1056,    0,    0,  363,    0,    0, 7898, 1089, 7898, 7898,
    0, 9976,    0,    0,  969,  607,  718,    0,    0,    0,
    0,  -32,    0,    0,    0, -248, 1061, 1050,    0, 8506,
    0, 1062, 1190, 1196,    0,    0, -248, 1056, 1075,    0,
 1056,    0, 5946,  559,    0,    0,    0,    0,    0, 9976,
    0, 1083, -185,    0, -185,    0,    0,    0,    0,    0,
    0,11433,    0,    0, 1076, 1056,  363,    0,    0,    0,
 1108,    0,  899, 1082,    0, 1087,    0,    0,10236,   95,
 1078,    0,    0,    0, 1079, 9976,    0,    0, 1081,    0,
    0,    0,    0,    0,    0,    0,    0, 5946, -158,    0,
    0, 6087,    0, 1091, 5946, 1042,    0,    0, 7898,    0,
    0,    0,    0,    0, 9976,    0,    0,  209, 9846,    0,
    0, 6922, 5946, 9976,    0,    0,    0, 6087,    0,    0,
    0, 9976, 1113, 7898, 9976,    0,12272,  887, 1102,    0,
  209,    0,    0,    0,    0,    0,    0,    0, 9976,    0,
    0,    0,  179,  984,    0, 6087, 1101,    0, 1126,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -169,12272,    0,    0,    0,
    0,    0,    0,    0, 1109,    0, 7898,    0,11508, 1060,
    0,  390,    0,    0, 1120, 7898, 1060,    0, 1104,    0,
 1231, 1234, -248,    0, 1120, 1118, 8551,    0, 1060,    0,
 1060,    0, 1060,    0,    0,    0,    0,    0, 1124,    0,
    0,    0,  123,    0, 1214, 1214, 1214, 1121,  209,11384,
 1158, 1158, 1158,    0, 1088,  910,    0,    0, 1127,    0,
    0,  117,    0, 1090,    0, 1158,    0,    0,    0, 1158,
    0,    0, 1130,  209,    0,11384,  -98, 1133,    0, 1142,
 1145,    0, 1132, 1138,    0,    0,    0,11220,  148,  209,
    0, 1141, 9976,    0,    0,    0, 1123,    0,    0, 1146,
    0,    0,12272,    0, 1153,  148,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   13,12272,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1154,
  209,    0,  148,    0,    0, 1151,11220,11098,    0,    0,
  439,    0,    0,    0, 8581,    0,    0, 1157,    0,    0,
11384,11384,  124, 1106, 9113,  280, 1111,  703, 1240,    0,
  375, -210,    0, 1224,    0,    0, 1138,    0,    0,    0,
 1138,    0, 1112, 1116,    0,11384, 1178,  375,    0,   75,
 9113, 1136, 1137,    0,11384, 1182,    0, 1140, 1188,    0,
    0,    0, 1193, -205,  562, 3268,    0,    0, 1138,    0,
 1197, 1192,11433, 1198,    0,    0, 1194,  769, 1152, 1199,
11508, 1116, 1202,  123, 1211,    0,    0,    0,    0,    0,
 1208,    0,  -82,    0, 1200,    0, 1319,    0,  123,  123,
 1209, 8382, 1210,    0,    0,    0, 1213, 1215, 1216,    0,
  123,    0,    0,    0, 1212,  153,    0, 1220,  123, 1221,
 1229, 1217, 1218,    0,    0,    0,  123, 1204,    0,  439,
    0,  169, 1230,  123, 9846, 1184, 1228, 1212,    0,    0,
12272,    0,  209,  209,    0, 1187, 1237, 1220,    0, 1242,
    0, 1365, 1244, 1245, 1247, 1255,    0, 1254,  123,    0,
  -93,    0,12272,    0,  169,  169, 1252, 1257,    0,  -82,
    0,    0,  142, 1262,12272,    0,12272,    0,    0, 7334,
 1250,    0,    0,    0,    0, 9976, 1223, 1256, 1244,    0,
11508,11508,    0, 7334, 1226, 1259, 1254,    0, 1264,    0,
  315,    0,    0,  918, 1270,    0,    0,    0,    0,    0,
    0,    0,    0, 1328, 1399,    0,    0, 1287, 1229,    0,
    0,    0,    0,    0, 1277,    0,    0, 1284,    0, 1289,
 1293,    0,    0,    0,  169,  575,  575,    0,    0,    0,
 1158,    0, 1329,    0,    0,   68,   68,    0,    0,    0,
    0,    0,    0,    0, 7334,    0, 9326, 9326,    0,    0,
    0,    0,    0, 1297,    0, 1158, 1295, 1296,    0,    0,
    0,    0,
  };
  protected static readonly short [] yyRindex = {           36,
    0,    0, 6228,   36,    0,    0,    0, 1677,    0,    0,
   37, 1080,    0,    0,    0,    0,    0,   37,    0,    0,
   47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1678,    0,    0, 1678,    0,    0, 1677,
   51, 1301,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1306,    0,    0,    0,    0,    0,    0,    0,    0,
11557,    0, 1298,    0,    0,    0, 1298,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  253,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4088,    0,    0,    0,    0,
    0,    0,    0, 4039,    0,    0,    0, 3874,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4253, 4321,
 1956, 3639, 1411, 5034, 5170, 4182, 5374, 5510, 1343, 2128,
    0,    0,    0,    0,    0,    0,   47,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,    0,  637,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1678,  145,    0,    0,    0,    0,    0,    0,    0,   50,
    0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1307,
    0,    0,    0,    0,    0,    0,    0,    0, 2965,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2600,  423, 2300,    0,    0,    0, 2516,
 2300,    0,    0,    0,    0,    0, 1306,    0,    0,    0,
 2965,    0,    0, -267,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1304, 2192,
    0,    0, 1298,    0, 2965,    0,    0,    0,    0,    0,
    0,  160,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3330,    0,    0,    0,    0,    0,    0,    0,
    0, 2771,    0,    0,    0,    0, 2040, 1678, 1678,    0,
 -216,    0,11304, 1678, 1683,    0,    0,    0, 1311,    0,
    0, 2965,    0,    0,    0,    0,    0,    0,    0,    0,
  330,    0,    0,    0,    0,    0,    0, -186,  125,    0,
 5639,    0,   41, 1303,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1052, 1095,    0,    0, 1313,    0,    0,
    0,    0,    0, -263,    0,    0, 3379, 1312,    0, 1868,
    0,    0,  170,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1609,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2408,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1304,
    0,    0,    0,  -57,    0,    0,    0,    0,    0,    0,
 8039,    0,    0,    0,    0,    0,    0,  707,  929,    0,
    0,    0, 1314,    0,    0,    0,    0,    0,    0,    0,
 2965,    0, 2965,    0, 3544,    0,    0,    0,    0, -181,
    0,    0,    0,    0,  187,    0,    0,    0, 4405,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4473, 4541, 3060, 3474, 3804,
 4609, 4677, 4745, 4898, 4966, 5102, 5238, 5306, 5442, 5578,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3330,    0,    0,    0,    0, 2040,    0,
    0,    0,    0, 1265,    0,    0,    0,11583,    0,    0,
  741,    0,    0,    0,    0,    0,    0,  841,  669,    0,
    0, 1315,    0,    0,    0,    0,    0, 1321,    0,10366,
    0,    0,    0,    0,    0,    0,    0, 1282,  323,    0,
    0,  760,  764,  778,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1325,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1334,    0,    0,    0, 4807,    0,    0,   44,    0,   71,
 3130,    0,    0,    0,    0,    0, 1332,    0,    0,    0,
    0,    0,    0, 1337,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  455, -244,    0,    0,    0,    0,    0,
 1335,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 8039,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -143,    0,  770,    0,    0,
    0,    0,    0,    0,    0,    0, -216,    0,    0,    0,
    0,11632,11325,    0, 1336,    0,  708,    0,    0,    0,
    0,    0,    0,  793,11681,    0,    0,    0,    0,  440,
    0,    0,    0,  796,    0,    0,    0,    0,    0, 1782,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3214,    0, 3709, 1340,    0,    0,
    0, 1338,    0,    0,    0,    0, -260,    0,    0,    0,
    0,  796,  806,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  846,    0,
    0,    0,    0,    0, 1333,    0,    0,    0,    0,  863,
  864,    0,    0,    0,    0,    0,    0,    0, 1342,  806,
  631,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3379,    0,    0,    0,    0,    0, 1348,    0,
    0, -260,    0,    0,  915,    0, 1342,    0,    0,    0,
 1344,    0,    0, 8039,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1315, 8555,    0,    0,    0,    0,
    0,11677,    0,    0,    0,    0,    0, 1345,    0,    0,
    0,  693,    0,    0,    0,    0,    0, 1350,    0,    0,
 1344,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1355,    0, 6369,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1349, 8039,    0,    0,    0,
    0,    0,  501,  856,    0,    0,    0,    0,    0,11762,
    0,    0,    0,    0,  713,    0,    0,    0,  721,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  726,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,11899,    0,    0,
    0,    0,    0,  397,    0,    0,    0, -197,    0,    0,
    0,    0,    0,    0,    0,    0,  809,12214,    0,    0,
11963,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  736,    0, 1356,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  392,10756,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  878,    0,    0,    0, 1359,    0,
 1309, 1310,    0,    0,  878,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  330,    0,  414,  414,  414,    0,  196,    0,
 1363, 1363, 1363,    0,    0, 8895,    0,    0, 1364,    0,
    0,  418,    0,    0,    0,  589,    0,    0,    0, 1358,
  504,    0,    0,  202,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8205,    0,    0,    0,    0, 8715, 8985,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
    0,    0,10942,    0,    0, 8805,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,11019,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 9069,    0, 8715,    0,    0,    0,    0,  392,    0,    0,
    0,    0,    0,    0,  392,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   58,  395,    0,
  350,    0,    0,    0,  154,    0, 8205,    0,    0,    0,
 8205,    0,    0,    0,    0,    0,    0,  237,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 8205,    0,
  558,    0,    0,    0,    0,    0,    0, 1362,  437,    0,
    0,    0,    0,  330,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  865,    0, 1367,    0,  330,  330,
    0,  632,    0,    0,    0,    0,    0,    0,    0,    0,
  355,    0,    0,    0, 1361,12233,    0, 1366,  330,    0,
    0,    0,    0,    0,  275,    0,  330,  868,    0,    0,
    0,12167,    0,  330,    0,    0,    0, 1370,    0,    0,
  254,    0,12098,12132,    0,    0,    0, 1371,    0,    0,
    0,10496, 1372,    0,    0,    0,    0, 1373,  330,    0,
  593,    0,  925,    0,11998,12032,    0,    0,    0,    0,
    0,    0,    0,    0, 1417,    0, 1481,    0,    0,    0,
  871,    0,    0,    0,    0,    0,    0,    0, 1375,    0,
    0,    0,    0,    0,    0,    0, 1376,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  875,    0,    0,    0,    0,    0,
    0,    0,    0,    0,12167,11781,11828,    0,    0,    0,
  597,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1312, 1312,    0,    0,
    0,    0,    0,    0,    0,  597,    0,    0,    0,    0,
    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1695,    0,    0,    0,    7,   -6, 1559,  -46,  -42,
    0, 1737, 1754,  394,    0,   -7,    0,    0,    0,    0,
    0, -756, -659,    0,  659,-1020,    0,    0,    0,    0,
    0, -222,    0,    0,    0,  869,    0,  947,    0,    0,
    0,    0,  735,  737,  -17, -221,    0,  -39,    0,  508,
    0,  531,-1107, -738, -625, -561, -559, -552, -536, -523,
    0,-1054,-1167,    0,   -2,    0,  137,    0,-1151,    0,
    0,    0,  306,  339,    0,    0,    0,  372,-1041,    0,
 -261, -282,-1110,    0,    0,    0, -982,  294,    0,    0,
 -462,    0,    0,  319,    0,    0,  325,    0,    0,  388,
    0, -713, -766,    0,    0,    0,    0,    0,  495,  -15,
    0,    0,  968,  970,  982, 1147, -517,    0,    0, -314,
  988,  480,    0,-1033,    0,    0,    0,    0,    0,    0,
    0,    0,  278,    0,    0,    0,    0,    0,    0,    0,
    0,  528,    0,    0,    0,    0, -309,  467,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  549,    0, -460,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  301,
    0,    0,  401,    0,    0,  406,  409,  316,    0,    0,
    0,    0,    0,    0,    0,    0,  610,    0,    0,    0,
    0, -174,    0,  519, -183,    0,    0,  476,    0,  524,
    0, 1020,    0, 1339, -277, -288, -278,  289,    0,  612,
    0, -211, -209,    0,    0,  825,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -249,    0,  916,    0, -320,    0, -105,    0,
    0,    0,  980,    0, -287, -131, 1135,    0, 1049,    0,
 1278, 1485, 1186,    0,    0,  896, 1770,    0,    0,    0,
    0, 1160,    0,    0,    0,    0,    0, -484, 1525,    0,
    0,    0,    0,    0, 1172,  473,  944,  787,  951, 1463,
 1464, 1465, 1466, 1468,    0, 1469,    0, -535,    0,    0,
 1093, 1330, -705,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -280,    0,    0,    0,    0,-1085,    0,
  642,    0,  576,    0,  740,    0,    0,    0,  797, -503,
  -14, -289,   -9,    0, 1700,    0,   72,    0,   83,  111,
  122,  130,  139,  144,  163,  164,  168,  171,    0, -584,
    0, -236,    0,    0,  928,    0,  859,    0,    0,    0,
  779, -852,  906, -153,    0,  876, -437,    0,    0,    0,
    0,    0,    0,  877,    0,    0,  852,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  788,    0,    0,    0,    0,    0,    0,
    0,    0,  -43,    0, 1385,    0,    0,    0,  997,    0,
    0,    0,    0,    0,    0, -171,    0,    0,    0,    0,
    0, 1479, 1279,    0,    0,    0, 1490,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  731,    0,    0,    0,
    0,    0,    0,    0,    0,  811,    0,    0,    0,    0,
    0,    0,   25, 1092,    0,    0,    0, 1097,
  };
  protected static readonly short [] yyTable = {           109,
  482,  111,  155,   43,  231,  414,  485,  156,  232,  430,
   18,  187,  190,  457,  410,  434,  677,  706,  713,  245,
  753,  510,  501,  761,  541,  387,  515,  507,  277,  542,
  465,  565,  512,  295,  527,   35,   33, 1108, 1157, 1066,
 1208, 1209,  241,  880,  302,  766,  952,  307,  312,   48,
    5, 1153,  319,  950,  859,  290,  784, 1102, 1222,  290,
  450,    7,  451,  296,  499,  298, 1009,  750,  450,  739,
  792,  227,  793,  794,  629, 1278,  275,  325, 1010,  682,
 1102,   48, 1010,   14,  276,  956,  529,  635,  160,  959,
  838,  451, 1285,   48,  188,    1,  645, 1086,  991,  161,
  443,  840,  336,  841,  847,  425,  686, 1149, 1026,  809,
  440, 1150,  936,  636,  336,  246,  505,  336,  336, 1330,
  243,  414, 1262,  336, 1357,  239,  758,  162,  751,  434,
  329,  336,  839,  329, 1197,  473,  511,  767,  163,  109,
  231,  111,  155,  530,  351,  502,  164,  156, 1026,  871,
  637,   20,   16,  874,  317,  165,  414, 1227,  685, 1197,
  166,  550, 1470, 1262,  674,  848,  743,  686,  759,  668,
  670,  440,  672, 1383,  240,  244,  792,  243, 1151,  167,
  168,  785,  739,  428,  169,  727,  700,  170,  739,  430,
  444,  708,  243,  739,  704,  739,  629,  435,  629,   42,
  739,  936,  654,    2,  854,  541,  936,   48,  936, 1261,
  542,  936,  936, 1318,  936,  936,  928,  676, 1349,  433,
  960,  881, 1087,  426,  438,  739,  842,  450,  160,  451,
  792,  542,  244,  620,  527, 1153,  936,  739, 1011,  161,
 1376,  247, 1011, 1443,  451,  420,  243,  244,  649,  891,
 1261,   15,  474,  629,  475,  638,  239,  456, 1028,  527,
  460,  462,  189,  736,  646, 1474,  992,  162,  509,    3,
    4,    5,    6,  514,  669,  488,  671, 1484,  163, 1485,
  686,  496, 1228,  498,  497,  460,  164, 1471,  450,  194,
  451,  936,   35,   33,   44,  165,  732,  517,  518,  548,
  166,  244,  318,  952, 1384,  240,   48,    5,  476,  526,
  950,  435,  435,  810,  528, 1036,  687,  542,    7,  167,
  168, 1068,  935, 1529,  169,  290,  952,  170,  856,  782,
 1345,    2,   35,  433,  562,  687,  570,  571,  572,  573,
  574,  575,  576,  577,  578,  579,  580,   35,   33, 1006,
 1492, 1493,  716,  604,  606,  414,  966,  610,  968, 1524,
 1367,  971,   48, 1439,  772,   48,  232,  768,  602,  770,
  850,  771, 1215,   49,  624,  311,  311,  687,  656, 1315,
  329,  854,  779,  954, 1540, 1089,  833,  358,  623,  828,
  733,   20,  308,  313, 1282,  947,  311,  368,  659,  932,
  351, 1476, 1477, 1242, 1481,  618,  737,  926, 1410,  732,
   35,   33,  673,  341,  195,  683, 1188,  441, 1053,  639,
  732,  445,  732,   48, 1432,  363,  666,  732,  351,  446,
  434, 1029, 1316, 1031, 1032,  802,  430,  369,  435,  780,
   94,  465,  621,  622,  952,  195,  507,  541,  633, 1530,
  952, 1346,  542,  783,  414,  726,  887,  688,  702,  735,
  562, 1482,  231,  711,  732,  996,   54, 1235, 1018,  657,
 1019, 1518, 1045, 1085,  717,  718,  720,  342,  441,  450,
 1091,  358,  447,  357,  773,  311,  311,  725,  652,  351,
  740, 1263,  341,  329,  851,  742, 1216,  229, 1111,  329,
  760,  855,  418,  419,  329,  856,  329,  229,  229,  526,
  916,  329,  734,  197,  528,  754,  642,  351,  744,  370,
  371,  351,  229,  351,  351,  351,  351,  229,  738,  927,
  343,  351, 1263, 1093,  526, 1324,  311,  452,  192,  528,
  774,  774,  363,  229,  363,  243,  363,  363,  329,  363,
 1337,  363, 1143,  440, 1338,   94, 1144,  389, 1119,  239,
  449,  889,  311,  700,  453,  790,  942,  792,  852,  316,
 1499,  744,  311,  642,  243,  318,  800,  357, 1500,  455,
  311, 1320, 1362,  229,  753,  787,  807, 1379, 1325,  449,
  787,  787,  344,  796,  452,  363,  198,  487,  363,  491,
  867,  391, 1392, 1393, 1264,  192,  192, 1347,  240,  341,
  390, 1155,  435,  341, 1403,  336,  341,  721,  341,   48,
 1165,  453, 1420,  341,  311,   48,  192,  311,  808,  952,
 1426,  985,   49,  744,  433,   49,  835, 1438, 1377,   48,
   49,  668,   48,  820, 1501, 1264,  677,   48,  234,  460,
 1002,  821,   49,  338,  356,  238,  311,  311,  336,   48,
  704, 1160, 1469,  640,   48,  334,  641,   48, 1265,  668,
 1266,  711,   48,  584,  585,  551,  702, 1267,  668,  336,
  542,  311,  311,  620,   48,  552,  249,  981,  868, 1161,
  392,  640,  351, 1268,  641,  393,  356,  394,  605,  607,
  395,  396,  314,  397,  398,  863, 1269,  155,  345, 1265,
  235, 1266,  336,  335,  236,  192,  192, 1162, 1267,  640,
  743,  883,  641,  875,  336,  876,  265,  449,  336,  973,
  155,  878,  490,  754, 1268,   94,  336,  435,  335,  787,
  937,  336,  449,  435,  485,  491,   49, 1269, 1059,   48,
  337,  946,   48,   48,  920,  346,  939,   48,  661,  562,
  624,  336,  662,  492,  237,  562,  192,  787,  802,   48,
  826,  335,  527,  336,  826,  337,  380,  505,   48,  413,
  399,  336,  229,  311, 1081,  336,  661,  659,  449,  335,
  662,  336,  192,  415,  336,  769,  985,  336,  527,  358,
  336,  336,  192,  391,  913,  353,  502,  639,  311,  351,
  192,   94,  336,  351,  336,  336,  351,  981,  351,  505,
 1308,  933,  950,  351,  953,  569,  527,  358,  936,  311,
  955,  382,  358,  334,  358,  346,  358,  505,  944,  727,
  711,  358,  586,  587, 1050,  939,  336, 1142,  502,  743,
  939,  553,  939,  864,  192,  939,  939,  192,  939,  939,
  689,  554,  381,   48,  391,  535,  502,  383,  825,  435,
  335,  846, 1050,  536,  787,  430,  787,  321,  358,  787,
  939,  335,  223,  321,  224,  537,  192,  192,  384,  803,
  322,  980,  392,  336,  374,  375,  456,  393,  639,  394,
  385,  804,  395,  396,  336,  397,  398,  337,  376,  377,
  711,  192,  192,  460,  417,  311,  415,  322,  337,  416,
  612,  322,  322,  322,  322,  322,  322,  322,  322,   48,
  535,  192, 1054,  223,   94,  939, 1055,  280,  536,  280,
 1056,   48,  711, 1358,  280,  192, 1041,   94,  754,  787,
  537,  787,  787,  392, 1033,  334, 1234, 1049,  393,  415,
  394,  665,  801,  395,  396,  270,  397,  398, 1305,  664,
  665, 1275,  386,  430,  270, 1305,  248,  424,  664,  470,
  272,  273,  274,  471,  278,  279,  421, 1486, 1040,  292,
  293,  651,  456, 1037,  429,  652,  299,  431,  301,  435,
  303, 1494,  432,  335,  824,  315,  316,  311,  824,  392,
  439,  754,  824,  728,  393,  336,  394,  458,  336,  395,
  396,  980,  397,  398,  862,  930,  336,  459,  456,  352,
  692, 1097,  311, 1078,  693, 1098,  481,  223,  192,  226,
  337,  727,  500,  409,   65,   65,  311,  526,   65,  877,
  311,  787,  528,  965, 1097,  783,  701, 1096, 1098,  192,
  471,  456, 1535,  882,  711,  485, 1537, 1538,  181,  280,
  181,  281,  181,  526, 1117,  365,  787, 1033,  528,   36,
  642,  486,  365,   66,  365,  642,  365,   66,  169,  642,
  169,  456,  169,  365,  502, 1038,  322, 1039,  758,  613,
  758,  526,  758,  769,  322,  769,  528,  769,  642,  828,
  489,  932,  322,  828,  930,  311,  972,  414,  972,  930,
  508,  930,  985, 1174,  930,  930,  281,  930,  930,  787,
  365,  513,  919,  926, 1344,  157,  642,  157,  787,  164,
  659,  164, 1195,  372,  373,  192, 1196, 1159,  365,  366,
  367,  727,  727,  165, 1166,  165,  642,  239,  521,  347,
  590,  591,  592,  593, 1371, 1373, 1180, 1195, 1181,  317,
 1182, 1196,  760,  883,  760,  883,  546,  322,  348,  349,
  378,  379, 1243, 1260,  547,  749, 1196,  749,  336,  322,
  322,  322,  898,  899,  322,  322,  555,  478,  350, 1243,
  932,  616,  299, 1196,  930,  932,  240,  932,  340,  351,
  932,  932,  495,  932,  932,  456,  336,  336,  619,  336,
  336,   57,  926,   68, 1260,   68, 1243,  926,  634,  926,
 1196,  650,  926,  926,  723,  926,  926,  192,  187,  158,
  187,  158,  684,   24,  285,   25,  285,  121,   26,  121,
  292,  653,  292,   27,  128,  690,  128,   28, 1071, 1072,
 1139,  229,  192,  322,  323, 1310,  655,   30,  326,  327,
  328,  329,  330,  331,  332,  333,  192,   32,  311,  691,
  192,  715,   33, 1212,  229,  732,   34, 1502, 1503,  741,
  932,  336,  524,  524,  642,  642,  743,  336,  744,   36,
   34,   37,  762,  336,  745,   38,  605,  336,  605,  746,
  311,  659,  926,   39,   40,  588,  589,   41,  763, 1359,
  336,  724, 1192, 1193,  322,  624,  659,  659,  594,  595,
  765,  777,  778,  192,  789,  791,   36,  811,  659, 1411,
   36,  812,  795,  415,  814,  192,  659,  243,  815,  819,
  829,   36,  336,  830,  659, 1433,   36,  831,  836,  667,
   36,  659,  832,  837,   36,  352, 1445, 1447,  194,  783,
  322,  853,  857,  858,  860,  869,   36,  879,  865,   36,
   36,  870,  885,  893, 1310,   36,  659,  456, 1433, 1433,
   36,   36,  900,   36,   36,   36,   36,  895,  902,  908,
  911,   36,  305,  909,  912,   36,  719,   36,  914,  918,
  924,  925,  928,  934,  941,  474,  962,   36,  948,  963,
  970,   36,  974,   36,  192,  500,  990,   36,  336,  986,
  336,  500,  711,  993,  994,  997, 1005,  311, 1488,  995,
 1007, 1030, 1042, 1017, 1021, 1047,  711,   36, 1046,  336,
  336, 1048, 1051,   36,   36,  311, 1060, 1067, 1433,  323,
 1070, 1073, 1074, 1089, 1079, 1080, 1118, 1082,  501,  336,
 1092,  414, 1178,  414,  501, 1140, 1146,  336,  311, 1148,
  336, 1163, 1154,   42, 1167,  516, 1170,  435,  435, 1172,
 1520, 1520,  414,  414, 1176, 1201, 1184, 1190, 1194, 1276,
 1531, 1531, 1204, 1224,  311, 1229, 1214,  711,  192,  562,
  562, 1211,  414, 1217, 1230,  322,  311, 1231, 1233, 1234,
  414, 1201, 1274,  414,  516, 1277, 1279, 1286, 1289, 1317,
 1312, 1327, 1336, 1239, 1326, 1340,  581,  582,  583, 1318,
  192,  516,  516,  516,  516,  516,  516,  516,  516,  516,
  516,  516,  516,  516,  516,  516,  516,   34, 1343, 1348,
 1349,   34, 1351, 1353, 1354,  311,  311, 1356, 1366, 1364,
 1370, 1372,   34,  311, 1390, 1375, 1368,   34, 1378,  311,
  311,   34, 1239, 1380, 1382,   34, 1387, 1394, 1396, 1399,
 1427, 1406, 1400, 1401, 1424, 1425, 1313, 1314,  585, 1416,
   34,   34, 1421, 1422,  311, 1437,   34, 1440,  855, 1441,
 1451,   34,   34,  311,   34,   34,   34,   34, 1452, 1454,
 1455, 1342,   34, 1457, 1478, 1461,   34, 1462,   34,  354,
 1350,  311, 1463, 1465, 1479, 1483, 1487, 1490,   34,  311,
 1496, 1498,   34, 1504,   34,  516, 1489, 1482,   34, 1495,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  311, 1481, 1509, 1512, 1513, 1514,  572,  192,   34, 1515,
 1539, 1526, 1541, 1542,   34,   34,    9,  968,  537,  853,
  495,  606,  960,   24,  819,  192,  496,  585,  676,  452,
   31,  607,  585,   25,  585,  585,  585,  585,  585,  585,
  585,  585,  585,  585,  585,  174,  823,  494,  192,  453,
   31,   32,  520,   32,  762,  861,  585,  764,  585,  754,
  585,  786,  585,  585,  585,  752,  763,  755,  787,  686,
  753,  313,  208,   97,  192,  664,  642,  317,  585,  664,
  336,  118,  106,  642,  228,  411,  192,  288,   53,  311,
  311,  107,  289,  131,  124,  572,  132,  125,   21, 1141,
  572,  907,  572,  572,  572,  572,  572,  572,  572,  572,
  572,  572,  572, 1076,  975, 1077, 1280,  585, 1480, 1442,
 1288,  780, 1510, 1491,  572, 1497,  572, 1430,  572, 1321,
  572,  572,  572, 1341, 1533,  192,  192,  921, 1287,  922,
  572,  572, 1361,  192,  826,  572,  572, 1284, 1523,  192,
  192,  923,  917, 1322,  572,  572,  572,  572, 1453, 1448,
 1322, 1446, 1522, 1225, 1374, 1334,  903, 1226,  845,  572,
  940,  890, 1322,  729,  192,  557,  776,  823, 1008, 1322,
  283,  519,  596,  192,  597,  572,  598, 1219,  599,  748,
  843,  600, 1290,  601,  884, 1145,  388, 1001, 1088, 1052,
 1110,  192, 1020, 1043,  855,  855, 1063,  505,  957,  192,
 1322, 1114,  855,  855,  855,  855,  855,  722,  855,  855,
  614,  855,  855,  855,  855,  855,  855,  855,  855, 1061,
  192,  615,  799,    0,  855, 1175,  855,  855,  855,  855,
    0,  855,  855,    0,  905, 1120,    0,  855,  904,    0,
    0,  855,  855,    0,  855,  855,  855,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  855,    0,  855,
    0,  855,  855,    0,    0,  855,    0,  855,  855,  855,
  855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
    0,    0,    0,    0,  855,  855,    0,    0,  855,  855,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  855,  855,  855,  855,  855,    0,  192,
  192,  855,  855,    0,    0,  855,    0,    0,    0,    0,
  855,  855,  855,  855,  855,    0,    0,    0,  855,    0,
  855,    0,    0,    0,    0,    0,  855,  855,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  516,    0,    0,    0,    0,    0,    0,    0,
    0,  855,  855,  855,  855,    0,  855,  780,  780,  336,
    0,    0,    0,  855,    0,  780,  780,  780,  780,  780,
    0,  780,  780,    0,  780,  780,  780,  780,  780,  780,
  780,    0,    0,    0,    0,    0,    0,  780,    0,  780,
  780,  780,  780,    0,  780,  780,    0,    0,    0,    0,
  780,    0,    0,    0,  780,  780,    0,  780,  780,  780,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  780,    0,  780,    0,  780,  780,    0,    0,  780,    0,
  780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
  780,  780,  780,  505,    0,    0,    0,  780,  780,  505,
    0,  780,  780,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  780,  780,  780,  780,
  780,    0,    0,    0,  780,  780,    0,    0,  780,    0,
    0,    0,    0,  780,  780,  780,  780,  780,    0,  505,
    0,  780,    0,  780,    0,    0,  505,    0,    0,  780,
  780,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  336,    0,    0,    0,    0,    0,  505,    0,    0,
    0,    0,    0,    0,  780,  780,  780,  780,    0,  780,
    0,  564,  505,    0,    0,    0,  780,  505,    0,  505,
  505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
    0,    0,    0,    0,    0,    0,  505,    0,    0,    0,
  505,  505,    0,  505,  505,  505,  505,  505,  505,  505,
    0,  505,  505,    0,  505,  505,  505,  505,  505,  505,
  505,  505,  505,  505,    0,  505,  505,  505,  505,  505,
  505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
  505,  505,  505,  505,  505,  505,  505,    0,    0,  505,
    0,  505,    0,  505,    0,  336,  505,    0,    0,  329,
  564,  336,  505,    0,    0,  564,    0,  564,  564,  564,
  564,  564,  564,  564,  564,  564,  564,  564,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  564,
    0,  564,    0,  564,    0,  564,  564,  564,    0,    0,
    0,  336,    0,  564,  564,  564,  564,    0,  336,    0,
  564,  564,    0,    0,    0,  564,  564,  564,  564,  564,
  564,  564,  564,    0,    0,    0,    0,    0,    0,  336,
    0,    0,    0,    0,  564,    0,    0,    0,    0,    0,
    0,    0,    0,  587,  336,    0,    0,    0,    0,  336,
  564,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,    0,    0,    0,    0,  740,  336,    0,
    0,    0,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,    0,  336,  336,    0,  336,  336,  336,  336,
  336,  336,    0,    0,  336,  336,    0,    0,    0,  336,
  336,  336,  336,  336,  336,  336,  336,  336,    0,    0,
    0,    0,    0,  336,    0,    0,    0,    0,  336,    0,
    0,  336,    0,  336,    0,  336,    0,    0,  336,    0,
    0,    0,  587,    0,  336,    0,    0,  587,    0,  587,
  587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
    0,    0,    0,  336,    0,    0,    0,    0,    0,    0,
    0,  587,    0,  587,    0,  587,    0,  587,  587,  587,
    0,    0,    0,    0,    0,  366,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  336,    0,    0,    0,
    0,  336,    0,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  329,    0,    0,    0,    0,
  336,  329,  587,    0,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,    0,  336,  336,    0,  336,  336,
  336,  336,  336,  336,    0,    0,  336,  336,    0,    0,
    0,  336,  336,  336,  336,  336,  336,  336,  336,  361,
    0,  329,    0,    0,    0,    0,    0,    0,  329,    0,
  336,    0,    0,  336,    0,  336,    0,  336,    0,    0,
  336,    0,    0,    0,    0,    0,  336,    0,    0,  329,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  329,    0,    0,    0,    0,  329,
    0,  329,  329,  329,  329,  329,  329,  329,  329,  329,
  329,  329,    0,  740,    0,    0,    0,    0,  329,  740,
    0,    0,  329,  329,  329,  329,  329,  329,    0,  329,
  329,  329,    0,  329,  329,    0,  329,  329,  329,  329,
  329,    0,    0,    0,  329,  329,    0,    0,    0,  329,
  329,  329,  329,  329,  329,  329,  329,    0,    0,  740,
    0,    0,    0,    0,    0,    0,  740,    0,  329,    0,
    0,  329,    0,  329,    0,  329,    0,    0,  329,    0,
    0,    0,    0,    0,  329,    0,    0,  740,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  740,    0,    0,    0,    0,  740,    0,  740,
  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
   49,  366,    0,    0,    0,    0,  740,  366,    0,    0,
  740,  740,  740,  740,  740,  740,    0,  740,  740,  740,
    0,  740,  740,    0,  740,  740,  740,  740,  740,    0,
    0,    0,  740,  740,    0,    0,    0,  740,  740,  740,
  740,  740,  740,  740,  740,    0,    0,  366,    0,    0,
    0,    0,    0,    0,  366,    0,  740,    0,    0,  740,
    0,  740,    0,  740,    0,    0,  740,    0,    0,    0,
    0,    0,  740,    0,    0,  366,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  361,    0,    0,    0,    0,
  366,  361,    0,    0,    0,  366,    0,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,    0,    0,
    0,    0,    0,    0,  366,    0,    0,    0,  366,  366,
    0,  366,  366,  366,    0,  366,  366,  366,    0,  366,
  366,  361,  366,  366,  366,  366,  366,    0,    0,    0,
  366,  366,    0,    0,    0,  366,  366,  366,  366,  366,
  366,  366,  366,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  366,    0,    0,  366,    0,  366,
    0,    0,    0,    0,  361,    0,    0,    0,    0,  361,
  366,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,    0,    0,    0,    0,    0,    0,  361,    0,
    0,    0,  361,  361,    0,  361,  361,  361,    0,  361,
  361,  361,    0,  361,  361,    0,    0,  361,  361,  361,
  361,    0,    0,    0,  361,  361,    0,    0,    0,  361,
  361,  361,  361,  361,  361,  361,  361,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  361,    0,
    0,  361,    0,  361,    0,    0,    0,   49,    0,    0,
    0,   49,    0,   49,  361,   49,    0,   49,    0,    0,
   49,    0,   49,   49,    0,   49,    0,   49,    0,   49,
    0,   49,   49,   49,    0,   49,    0,    0,   49,   49,
    0,    0,   49,    0,    0,   49,    0,    0,   49,   49,
   49,   49,    0,    0,   49,    0,   49,    0,   49,    0,
   49,   49,   49,    0,   49,   49,   49,   49,    0,    0,
   49,   49,   49,   49,    0,    0,   49,   49,   49,    0,
    0,    0,    0,    0,    0,   49,   49,    0,   49,   49,
    0,   49,   49,   49,   49,    0,    0,    0,   49,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   55,    0,    0,    0,   49,    0,
   49,   49,   56,   24,   57,   25,    0,    0,   26,   58,
    0,   59,   60,   27,   61,   62,   63,   28,    0,    0,
    0,    0,    0,    0,   64,    0,   65,   30,   66,   67,
    0,   68,   69,    0,    0,    0,    0,   32,    0,    0,
    0,   70,   33,    0,   71,   72,   34,    0,    0,    0,
    0,    0,    0,    0,   49,    0,    0,   73,    0,   36,
    0,   37,   74,    0,    0,   38,    0,   75,   76,   77,
   78,   79,   80,   39,   40,   81,   82,   41,   83,   84,
  336,    0,    0,    0,   85,   86,  336,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,   93,    0,    0,
    0,   94,    0,    0,    0,   95,    0,    0,    0,    0,
   96,   97,   98,   99,  100,    0,  336,    0,  101,    0,
  102,    0,    0,    0,    0,    0,  103,  104,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,    0,    0,  336,
    0,    0,    0,  194,  336,  565,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,    0,    0,
    0,    0,    0,  336,    0,    0,    0,    0,  336,  336,
  336,  336,  336,  336,  336,  336,  336,    0,  336,  336,
    0,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,    0,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,    0,  507,    0,    0,  336,    0,
  336,  507,    0,  336,    0,    0,    0,    0,    0,  336,
    0,    0,    0,    0,  565,    0,    0,    0,    0,  565,
    0,  565,  565,  565,  565,  565,  565,  565,  565,  565,
  565,  565,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  507,    0,  565,    0,  565,    0,  565,    0,  565,
  565,  565,    0,    0,    0,    0,    0,  565,  565,  565,
  565,    0,    0,    0,  565,  565,    0,    0,    0,  565,
  565,  565,  565,  565,  565,  565,  565,    0,    0,  503,
    0,    0,    0,    0,  507,  503,    0,    0,  565,  507,
    0,  507,  507,  507,  507,  507,  507,  507,  507,  507,
  507,  507,    0,    0,  565,    0,    0,    0,    0,    0,
    0,    0,  507,  507,  507,  507,  507,  507,  507,  507,
  507,  507,    0,  507,  507,  503,  507,  507,  507,  507,
  507,  507,  507,  507,  507,  507,    0,  507,  507,  507,
  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
  507,  507,  507,  507,  507,  507,  507,  507,  507,    0,
    0,    0,    0,  199,    0,  507,    0,    0,  503,    0,
    0,    0,    0,  503,  507,  503,  503,  503,  503,  503,
  503,  503,  503,  503,  503,  503,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  942,  503,  503,    0,  503,
  503,  503,  503,  503,  503,  503,    0,  503,  503,  200,
  503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
    0,  503,  503,  503,  503,  503,  503,  503,  503,  503,
  503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
  503,  503,  503,    0,  511,    0,    0,    0,    0,  503,
  511,    0,  503,    0,    0,    0,    0,    0,  503,    0,
  201,  202,  203,  204,    0,  205,  206,  207,  208,  209,
  210,  211,  212,    0,    0,  213,  214,  215,  216,  217,
  218,  219,  220,    0,  942,    0,    0,    0,    0,  942,
  511,  942,  942,  942,  942,  942,  942,  942,  942,  942,
  942,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  942,    0,  942,    0,  942,    0,  942,
  942,  942,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  511,    0,    0,    0,    0,  511,  566,
  511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
  511,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  511,    0,  511,  511,  511,  511,  511,  511,
  511,    0,  511,  511,  942,  511,  511,  511,  511,  511,
  511,  511,  511,  511,  511,    0,  511,  511,  511,  511,
  511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
  511,  511,  511,  511,  511,  511,  511,  511,    0,  336,
    0,    0,    0,    0,  511,  336,    0,  511,    0,    0,
    0,    0,    0,  511,    0,    0,    0,    0,  566,    0,
    0,    0,    0,  566,    0,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  336,    0,  566,    0,  566,
    0,  566,    0,  566,  566,  566,    0,    0,    0,    0,
    0,  566,  566,  566,  566,    0,    0,    0,  566,  566,
    0,    0,    0,  566,  566,  566,  566,  566,  566,  566,
  566,    0,    0,    0,    0,    0,    0,    0,  336,    0,
    0,    0,  566,  336,  567,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,    0,    0,  566,    0,
    0,    0,    0,    0,    0,    0,    0,  336,    0,  336,
  336,  336,  336,  336,  336,  336,    0,  336,  336,    0,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
    0,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,    0,  436,    0,    0,    0,    0,  336,
  436,    0,  336,    0,    0,    0,    0,    0,  336,    0,
    0,    0,    0,  567,    0,    0,    0,    0,  567,    0,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  436,    0,  567,    0,  567,    0,  567,    0,  567,  567,
  567,    0,    0,    0,    0,    0,  567,  567,  567,  567,
    0,    0,    0,  567,  567,    0,    0,    0,    0,    0,
  567,  567,  567,  567,  567,  567,    0,    0,    0,    0,
    0,    0,    0,  436,    0,    0,    0,  567,  436,  568,
  436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
  436,    0,    0,  567,    0,    0,    0,    0,    0,    0,
    0,    0,  436,    0,  436,  436,  436,  436,  436,  436,
  436,    0,  436,  436,    0,  436,  436,  436,  436,  436,
  436,  436,  436,  436,  436,    0,  436,  436,  436,  436,
  436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
  436,  436,  436,  436,  436,  436,  436,  436,    0,  395,
    0,    0,    0,    0,  436,  395,    0,  436,    0,    0,
    0,    0,    0,  436,    0,    0,    0,    0,  568,    0,
    0,    0,    0,  568,    0,  568,  568,  568,  568,  568,
  568,  568,  568,  568,  568,  568,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  395,    0,  568,    0,  568,
    0,  568,    0,  568,  568,  568,    0,    0,    0,    0,
    0,  568,  568,  568,  568,    0,    0,    0,  568,  568,
    0,    0,    0,    0,    0,  568,  568,  568,  568,  568,
  568,    0,    0,    0,    0,    0,    0,    0,  395,    0,
    0,    0,  568,  395,    0,  395,  395,  395,  395,  395,
  395,  395,  395,  395,  395,  395,    0,    0,  568,    0,
    0,    0,    0,    0,    0,    0,    0,  395,    0,  395,
  395,  395,  395,  395,  395,  395,    0,  395,    0,    0,
  395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
    0,  395,  395,  395,  395,  395,  395,  395,  395,  395,
  395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
  395,  395,  395,    0,  542,    0,    0,    0,    0,  395,
  542,    0,  395,    0,    0,    0,    0,    0,  395,    0,
    0,   24,    0,   25,    0,    0,   26,    0,    0,    0,
    0,   27,    0,    0,    0,   28,    0,    0,    0,   29,
    0,    0,    0,    0,    0,   30,    0,    0,    0,    0,
  542,   31,    0,  336,    0,   32,    0,    0,    0,  336,
   33,    0,    0,  743,   34,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
    0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
    0,   39,   40,  542,    0,   41,    0,    0,  542,  336,
  542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
  542,    0,    0,    0,    0,    0,  743,    0,    0,    0,
    0,    0,  542,    0,  542,    0,  542,    0,  542,  542,
  542,    0,  542,  542,    0,  542,  542,  542,  542,  542,
  542,  542,  542,  542,  542,    0,    0,  579,  542,  542,
  542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
  542,  542,  542,  542,  542,  542,    0,  542,    0,    0,
    0,  336,    0,  336,  336,  336,  336,  336,  743,  336,
   42,  336,  336,  542,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,    0,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,    0,  554,    0,
    0,    0,    0,  336,  554,    0,  336,    0,    0,    0,
    0,    0,  336,    0,    0,    0,  579,    0,    0,    0,
    0,  579,    0,  579,  579,  579,  579,  579,  579,  579,
  579,  579,  579,  579,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  554,  579,    0,  579,    0,  579,
    0,  579,  579,  579,    0,    0,    0,    0,    0,    0,
    0,    0,  579,    0,    0,    0,  558,  579,    0,    0,
    0,    0,  558,    0,    0,    0,    0,  579,  579,    0,
    0,    0,    0,    0,    0,    0,    0,  554,    0,    0,
  579,    0,  554,    0,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,    0,  579,    0,    0,    0,
    0,    0,  558,    0,    0,    0,  554,    0,  554,    0,
  554,    0,  554,  554,  554,    0,  554,  554,    0,    0,
  554,  554,  554,  554,  554,  554,  554,  554,  554,    0,
    0,    0,  554,  554,  554,  554,  554,  554,  554,  554,
  561,    0,    0,    0,    0,  558,  561,    0,    0,    0,
  558,  554,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,    0,    0,    0,    0,  554,    0,    0,
    0,    0,    0,    0,  558,    0,  558,    0,  558,    0,
  558,  558,  558,    0,  558,  558,  561,    0,  558,  558,
  558,  558,    0,    0,    0,  558,  558,    0,    0,    0,
  558,  558,  558,  558,  558,  558,  558,  558,  559,    0,
    0,    0,    0,    0,  559,    0,    0,    0,    0,  558,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  561,
    0,    0,    0,    0,  561,  558,  561,  561,  561,  561,
  561,  561,  561,  561,  561,  561,  561,    0,    0,    0,
    0,    0,    0,    0,  559,    0,    0,    0,  561,    0,
  561,    0,  561,    0,  561,  561,  561,    0,  561,  561,
    0,    0,  561,  561,  561,  561,  560,    0,    0,  561,
  561,    0,  560,    0,  561,  561,  561,  561,  561,  561,
  561,  561,    0,    0,    0,    0,    0,  559,    0,    0,
    0,    0,  559,  561,  559,  559,  559,  559,  559,  559,
  559,  559,  559,  559,  559,    0,    0,    0,    0,  561,
    0,    0,  560,    0,    0,    0,  559,    0,  559,    0,
  559,    0,  559,  559,  559,    0,  559,  559,    0,    0,
  559,  559,  559,  559,  569,    0,    0,  559,  559,    0,
    0,    0,  559,  559,  559,  559,  559,  559,  559,  559,
    0,    0,    0,    0,    0,  560,    0,    0,    0,    0,
  560,  559,  560,  560,  560,  560,  560,  560,  560,  560,
  560,  560,  560,    0,    0,    0,    0,  559,    0,    0,
    0,    0,    0,    0,  560,    0,  560,    0,  560,    0,
  560,  560,  560,    0,  560,  560,    0,    0,  560,  560,
  560,  560,  570,    0,    0,  560,  560,    0,    0,    0,
  560,  560,  560,  560,  560,  560,  560,  560,    0,    0,
    0,    0,    0,  569,    0,    0,    0,    0,  569,  560,
  569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
  569,    0,    0,    0,    0,  560,    0,    0,    0,    0,
    0,    0,  569,    0,  569,    0,  569,    0,  569,  569,
  569,    0,    0,    0,    0,    0,  569,  569,  569,  569,
  571,    0,    0,  569,  569,    0,    0,    0,    0,    0,
  569,  569,  569,  569,  569,  569,    0,    0,    0,    0,
    0,  570,    0,    0,    0,    0,  570,  569,  570,  570,
  570,  570,  570,  570,  570,  570,  570,  570,  570,    0,
    0,    0,    0,  569,    0,    0,    0,    0,    0,    0,
  570,    0,  570,    0,  570,    0,  570,  570,  570,    0,
    0,    0,  336,    0,  570,  570,  570,  570,  336,    0,
    0,  570,  570,    0,    0,    0,    0,    0,  570,  570,
  570,  570,  570,  570,    0,    0,    0,    0,    0,  571,
    0,    0,    0,    0,  571,  570,  571,  571,  571,  571,
  571,  571,  571,  571,  571,  571,  571,    0,  336,    0,
    0,  570,    0,    0,    0,    0,    0,    0,  571,    0,
  571,    0,  571,    0,  571,  571,  571,    0,    0,    0,
    0,    0,  571,  571,  571,  571,    0,    0,    0,  571,
  571,    0,    0,    0,    0,    0,  571,  571,  571,  571,
  571,  571,    0,  573,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  571,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  571,
  336,    0,    0,  336,    0,  336,  336,    0,    0,    0,
  336,  336,    0,    0,  336,  336,  336,  336,  336,  336,
  336,  336,  336,    0,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,    0,    0,    0,    0,    0,    0,
    0,  574,    0,    0,  336,  336,    0,    0,    0,    0,
    0,    0,  336,    0,    0,  336,    0,    0,    0,    0,
    0,  336,  573,    0,    0,    0,    0,  573,    0,  573,
  573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  573,    0,  573,    0,  573,    0,  573,  573,  573,
    0,    0,    0,    0,    0,    0,    0,  573,  573,  575,
    0,    0,  573,  573,    0,    0,    0,    0,    0,    0,
    0,  573,  573,  573,  573,    0,    0,    0,    0,    0,
  574,    0,    0,    0,    0,  574,  573,  574,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,    0,    0,
    0,    0,  573,    0,    0,    0,    0,    0,    0,  574,
    0,  574,    0,  574,    0,  574,  574,  574,    0,    0,
    0,    0,    0,    0,    0,  574,  574,  576,    0,    0,
  574,  574,    0,    0,    0,    0,    0,    0,    0,  574,
  574,  574,  574,    0,    0,    0,    0,    0,  575,    0,
    0,    0,    0,  575,  574,  575,  575,  575,  575,  575,
  575,  575,  575,  575,  575,  575,    0,    0,    0,    0,
  574,    0,    0,    0,    0,    0,    0,  575,    0,  575,
    0,  575,    0,  575,  575,  575,    0,    0,    0,    0,
    0,    0,    0,  575,  575,  577,    0,    0,  575,  575,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  575,
  575,    0,    0,    0,    0,    0,  576,    0,    0,    0,
    0,  576,  575,  576,  576,  576,  576,  576,  576,  576,
  576,  576,  576,  576,    0,    0,    0,    0,  575,    0,
    0,    0,    0,    0,    0,  576,    0,  576,    0,  576,
    0,  576,  576,  576,    0,    0,    0,    0,    0,    0,
    0,  576,  576,  578,    0,    0,  576,  576,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  576,  576,    0,
    0,    0,    0,    0,  577,    0,    0,    0,    0,  577,
  576,  577,  577,  577,  577,  577,  577,  577,  577,  577,
  577,  577,    0,    0,    0,    0,  576,    0,    0,    0,
    0,    0,    0,  577,    0,  577,    0,  577,    0,  577,
  577,  577,    0,    0,    0,    0,    0,    0,    0,    0,
  577,  580,    0,    0,  577,  577,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  577,  577,    0,    0,    0,
    0,    0,  578,    0,    0,    0,    0,  578,  577,  578,
  578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
    0,    0,    0,    0,  577,    0,    0,    0,    0,    0,
    0,  578,    0,  578,    0,  578,    0,  578,  578,  578,
    0,    0,    0,    0,    0,    0,    0,    0,  578,  581,
    0,    0,  578,  578,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  578,  578,    0,    0,    0,    0,    0,
  580,    0,    0,    0,    0,  580,  578,  580,  580,  580,
  580,  580,  580,  580,  580,  580,  580,  580,    0,    0,
    0,    0,  578,    0,    0,    0,    0,    0,    0,  580,
    0,  580,    0,  580,    0,  580,  580,  580,    0,    0,
    0,    0,    0,    0,    0,    0,  580,  582,    0,    0,
    0,  580,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  580,  580,    0,    0,    0,    0,    0,  581,    0,
    0,    0,    0,  581,  580,  581,  581,  581,  581,  581,
  581,  581,  581,  581,  581,  581,    0,    0,    0,    0,
  580,    0,    0,    0,    0,    0,    0,  581,    0,  581,
    0,  581,    0,  581,  581,  581,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  583,    0,    0,    0,  581,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  581,
  581,    0,    0,    0,    0,    0,  582,    0,    0,    0,
    0,  582,  581,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,  582,    0,    0,    0,    0,  581,    0,
    0,    0,    0,    0,    0,  582,    0,  582,    0,  582,
    0,  582,  582,  582,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  584,    0,    0,    0,  582,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  582,  582,    0,
    0,    0,    0,    0,  583,    0,    0,    0,    0,  583,
  582,  583,  583,  583,  583,  583,  583,  583,  583,  583,
  583,  583,    0,    0,    0,    0,  582,    0,    0,    0,
    0,    0,    0,  583,    0,  583,    0,  583,    0,  583,
  583,  583,    0,    0,  329,    0,    0,    0,    0,    0,
  392,    0,    0,    0,    0,  583,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  583,    0,    0,    0,
    0,    0,  584,    0,    0,    0,    0,  584,  583,  584,
  584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
  392,    0,    0,    0,  583,    0,    0,    0,    0,    0,
    0,  584,    0,  584,    0,  584,    0,  584,  584,  584,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  584,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  584,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  584,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  329,    0,    0,
    0,    0,  584,  329,    0,  392,  392,  392,  329,    0,
  329,    0,  392,  392,    0,  329,  392,  392,  392,  392,
    0,  392,  392,  392,  392,    0,  392,  392,  392,  392,
  392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
  392,  392,  392,  392,  392,  392,  392,  392,    0,    0,
   55,    0,  329,    0,  392,    0,    0,  392,   56,   24,
   57,   25,    0,    0,   26,   58,    0,   59,   60,   27,
   61,   62,   63,   28,    0,    0,    0,    0,    0,    0,
   64,    0,   65,   30,   66,   67,    0,   68,   69,    0,
    0,    0,    0,   32,    0,    0,    0,   70,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   73,    0,   36,    0,   37,   74,    0,
    0,   38,    0,   75,   76,   77,   78,   79,   80,   39,
   40,   81,   82,   41,   83,   84,    0,    0,    0,    0,
   85,   86,    0,    0,   87,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
   90,   91,   92,   93,    0,    0,    0,   94,    0,    0,
    0,   95,    0,    0,    0,    0,   96,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,    0,    0,
    0,  252,  103,  104,    0,    0,    0,    0,    0,   56,
   24,   57,   25,    0,    0,   26,   58,    0,   59,   60,
   27,   61,   62,   63,   28,    0,    0,  105,  106,  107,
  108,   64,    0,   65,   30,   66,   67,    0,   68,   69,
    0,    0,    0,    0,   32,    0,    0,    0,   70,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   73,    0,   36,    0,   37,   74,
    0,    0,   38,    0,   75,   76,   77,   78,   79,   80,
   39,   40,   81,   82,   41,   83,   84,    0,    0,    0,
    0,   85,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,   94,    0,
    0,    0,   95,    0,    0,    0,    0,   96,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,  522,  103,  104,    0,    0,    0,    0,    0,
   56,   24,   57,   25,    0,    0,   26,   58,    0,   59,
   60,   27,   61,   62,   63,   28,    0,    0,  105,  106,
  107,  108,   64,    0,   65,   30,   66,   67,    0,   68,
   69,    0,    0,    0,    0,   32,    0,    0,    0,   70,
   33,    0,   71,   72,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,   36,    0,   37,
   74,    0,    0,   38,    0,   75,   76,   77,   78,   79,
   80,   39,   40,   81,   82,   41,   83,   84,    0,    0,
    0,    0,   85,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,   93,    0,    0,    0,   94,
    0,    0,    0,   95,    0,    0,    0,    0,   96,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
    0,    0,    0,  947,  103,  104,    0,    0,    0,    0,
    0,  947,  947,  947,  947,    0,    0,  947,  947,    0,
  947,  947,  947,  947,  947,  947,  947,    0,    0,  105,
  106,  107,  108,  947,    0,  947,  947,  947,  947,    0,
  947,  947,    0,    0,    0,    0,  947,    0,    0,    0,
  947,  947,    0,  947,  947,  947,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  947,    0,  947,    0,
  947,  947,    0,    0,  947,    0,  947,  947,  947,  947,
  947,  947,  947,  947,  947,  947,  947,  947,  947,    0,
    0,    0,    0,  947,  947,    0,    0,  947,  947,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  947,  947,  947,  947,  947,    0,    0,    0,
  947,    0,    0,    0,  947,    0,    0,    0,    0,  947,
  947,  947,  947,  947,    0,    0,    0,  947,    0,  947,
    0,    0,    0,    0,  791,  947,  947,    0,    0,    0,
    0,    0,  791,  791,  791,  791,    0,    0,  791,  791,
    0,  791,  791,  791,  791,  791,  791,  791,    0,    0,
  947,  947,  947,  947,  791,    0,  791,  791,  791,  791,
    0,  791,  791,    0,    0,    0,    0,  791,    0,    0,
    0,  791,  791,    0,  791,  791,  791,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  791,    0,  791,
    0,  791,  791,    0,    0,  791,    0,  791,  791,  791,
  791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
    0,    0,    0,    0,  791,  791,    0,    0,  791,  791,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  791,  791,  791,  791,  791,    0,    0,
    0,  791,    0,    0,    0,  791,    0,    0,    0,    0,
  791,  791,  791,  791,  791,    0,    0,    0,  791,    0,
  791,    0,    0,    0,    0,  709,  791,  791,    0,    0,
    0,    0,    0,   56,   24,    0,   25,    0,    0,   26,
  286,    0,    0,    0,   27,   61,   62,    0,   28,    0,
    0,  791,  791,  791,  791,   64,    0,    0,   30,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   74,    0,    0,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  287,    0,   41,    0,
    0,    0,    0,    0,    0,    0,   86,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,  288,    0,
    0,    0,  481,  710,    0,    0,   95,    0,    0,    0,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,    0,    0,    0,  888,  103,  104,    0,
    0,    0,    0,    0,   56,   24,    0,   25,    0,    0,
   26,  286,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,  105,  289,  107,  108,   64,    0,    0,   30,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
  558,    0,    0,    0,    0,    0,    0,    0,  559,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  287,    0,   41,
    0,    0,    0,    0,    0,    0,    0,  560,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,   93,
    0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,   56,   24,    0,   25,  103,  104,
   26,  286,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,    0,    0,    0,   64,    0,    0,   30,
    0,    0,    0,  105,  106,  107,  108,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  287,    0,   41,
    0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  288,
    0,    0,    0,  694,  939,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,    0,  709,  103,  104,
    0,    0,    0,    0,    0,   56,   24,    0,   25,    0,
    0,   26,  286,    0,    0,    0,   27,   61,   62,    0,
   28,    0,    0,  105,  695,  107,  108,   64,    0,    0,
   30,    0,    0,    0,  696,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   71,   72,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74, 1022,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  287,    0,
   41,    0,    0,    0,    0,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
  288,    0,    0,    0,  481,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,    0,    0,    0,  675,  103,
  104,    0,    0,    0,    0,    0,   56,   24,    0,   25,
    0,    0,   26,  286,    0,    0,    0,   27,   61,   62,
    0,   28,    0,    0,  105,  289,  107,  108,   64,    0,
    0,   30,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  287,
    0,   41,    0,    0,    0,  448,    0,    0,    0,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,  288,    0,    0,    0,    0,    0,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,   56,   24,    0,   25,
  103,  104,   26,  286,    0,    0,    0,   27,   61,   62,
    0,   28,    0,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,    0,  105,  289,  107,  108,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  287,
    0,   41,    0,    0,    0,    0,    0,    0,    0,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,  288,    0,    0,    0,  694,    0,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,    0,    0,    0,  709,
  103,  104,    0,    0,    0,    0,    0,   56,   24,    0,
   25,    0,    0,   26,  286,    0,    0,    0,   27,   61,
   62,    0,   28,    0,    0,  105,  695,  107,  108,   64,
    0,    0,   30,    0,    0,    0,  696,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  287,    0,   41,    0,    0,    0,    0,    0,    0,    0,
   86,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,  288,    0,    0,    0,  481,    0,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,  102,    0,    0,    0,    0,
  285,  103,  104,    0,    0,    0,    0,    0,   56,   24,
    0,   25,    0,    0,   26,  286,    0,    0,    0,   27,
   61,   62,    0,   28,    0,    0,  105,  289,  107,  108,
   64,    0,    0,   30,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  287,    0,   41,    0,    0,    0,    0,    0,    0,
    0,   86,    0,    0,   87,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
   90,   91,   92,  288,    0,    0,    0,    0,    0,    0,
    0,   95,    0,    0,    0,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,    0,    0,
    0,  294,  103,  104,    0,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,  105,  289,  107,
  108,   64,    0,    0,   30,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  288,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,  556,  103,  104,    0,    0,    0,    0,    0,
   56,   24,    0,   25,    0,    0,   26,  286,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,  105,  289,
  107,  108,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   71,   72,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  287,    0,   41,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,   93,    0,    0,    0,    0,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
    0,    0,    0,  786,  103,  104,    0,    0,    0,    0,
    0,   56,   24,    0,   25,    0,    0,   26,  286,    0,
    0,    0,   27,   61,   62,    0,   28,    0,    0,  105,
  106,  107,  108,   64,    0,    0,   30,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   74,    0,    0,   38,    0,    0,   76,    0,   78,
    0,   80,   39,   40,  287,    0,   41,    0,    0,    0,
    0,    0,    0,    0,   86,    0,    0,   87,   88,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   89,   90,   91,   92,  288,    0,    0,    0,
    0,    0,    0,    0,   95,    0,    0,    0,    0,    0,
   97,   98,   99,  100,    0,    0,    0,  101,    0,  102,
    0,    0,    0,    0,  610,  103,  104,    0,    0,    0,
    0,    0,  610,  610,    0,  610,    0,    0,  610,  610,
    0,    0,    0,  610,  610,  610,    0,  610,    0,    0,
  105,  289,  107,  108,  610,    0,    0,  610,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  610,    0,    0,
    0,    0,  610,    0,  610,  610,  610,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  610,
    0,  610,  610,    0,    0,  610,    0,    0,  610,    0,
  610,    0,  610,  610,  610,  610,    0,  610,    0,    0,
    0,    0,    0,    0,    0,  610,    0,    0,  610,  610,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  610,  610,  610,  610,  610,    0,    0,
    0,    0,    0,    0,    0,  610,    0,    0,    0,    0,
    0,  610,  610,  610,  610,    0,    0,    0,  610,    0,
  610,    0,    0,    0,    0,    0,  610,  610,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   29,  610,  610,  610,  610,   29,    0,    0,    0,   29,
    0,   29,    0,    0,   29,    0,   29,   29,    0,   29,
    0,   29,    0,   29,    0,   29,   29,   29,    0,   29,
    0,    0,   29,   29,    0,    0,   29,    0,    0,   29,
    0,    0,    0,   29,   29,   29,    0,    0,   29,    0,
   29,    0,   29,    0,    0,   29,    0,    0,   29,   29,
   29,   29,    0,    0,    0,   29,   29,   29,    0,    0,
   29,   29,   29,    0,    0,    0,    0,    0,    0,   29,
   29,    0,   29,   29,    0,   29,   29,   29,   29,    0,
    0,    0,   29,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  463,    0,    0,    0,    0,    0,    0,    0,
   56,   24,   29,   25,    0,    0,   26,  286,   29,   29,
    0,   27,   61,   62,    0,   28,    0,   29,    0,    0,
    0,    0,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   71,   72,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,   29,   37,
   74,    0,    0,   38,    0,    0,   76, 1395,   78,    0,
   80,   39,   40,  287,    0,   41,   24,    0,   25,    0,
    0,   26,    0,    0,    0,    0,   27,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,  532,    0,    0,
   30,   89,   90,   91,  320,    0,   24,    0,   25,    0,
   32,   26,    0,   95,    0,   33,   27,    0,    0,   34,
   28,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   30,    0,   36,    0,   37,    0,    0,    0,   38,    0,
   32,    0,  861,    0,    0,   33,   39,   40,    0,   34,
   41,   24,    0,   25,  304,    0,   26,    0,    0,  105,
  464,   27,   36,    0,   37,   28,    0,    0,   38,    0,
    0,    0,    0,    0,    0,   30,   39,   40,    0,    0,
   41,    0,    0,    0,  304,   32,  229,    0,    0,    0,
   33, 1044,    0,    0,   34,    0,    0,    0,    0,    0,
   24,    0,   25,    0,    0,   26,    0,   36,    0,   37,
   27,    0,    0,   38,   28,    0,    0,    0,    0,    0,
    0,   39,   40,    0,   30,   41,    0,    0,    0,  304,
    0,    0,    0,    0,   32,  340, 1177,    0,    0,   33,
    0,    0,    0,   34,    0,   24,  336,   25,    0,    0,
   26,    0,    0,    0,    0,   27,   36,    0,   37,   28,
    0,    0,   38,    0,    0,  340,    0,    0,    0,   30,
   39,   40,    0,    0,   41,   24,    0,   25,  538,   32,
   26,    0,    0, 1291,   33,   27,  336, 1149,   34,   28,
    0, 1150, 1292, 1293,    0,    0,    0,    0, 1294,   30,
    0,   36, 1295,   37,    0, 1296,    0,   38,    0,   32,
  340,    0,    0,    0,   33,   39,   40,    0,   34,   41,
    0,    0,    0,  304,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,    0,    0,    0,   38,    0,    0,
    0,    0,    0,    0,    0,   39,   40,    0,    0,   41,
    0, 1297,    0, 1298,    0,    0,    0,    0, 1299,  340,
    0,  336,  336,  336,  336,  743,    0,    0,  336,  336,
    0,    0,  336,  336,  336,  336,  336,  336,  336,  336,
  336,    0,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  340,   48,    0,    0,    0,   48,
  336,   48,    0,  336,   48,    0,   48,   48,    0,   48,
    0,   48,    0,   48,    0,   48,   48,   48,    0,   48,
    0,    0,   48,   48, 1301,    0,   48,    0,    0,   48,
    0,    0,    0,   48,   48,   48,    0,    0,   48,    0,
   48,    0,   48,    0,    0,   48,    0,    0,   48,   48,
   48,   48,    0,    0,    0,   48,   48,   48,    0,    0,
   48,   48,   48,    0,    0,    0,    0,    0,    0,   48,
   48,    0,   48,   48,    0,   48,   48,   48,   48,    0,
    0,    0,   48,    0,    0,   48,    0,    0,    0,   48,
    0,   48,    0,    0,   48,    0,   48,   48,    0,   48,
    0,   48,   48,   48,    0,   48,   48,   48,   81,   48,
    0,    0,   48,   48,    0,    0,   48,   48,    0,   48,
    0,    0,    0,   48,   48,   48,    0,    0,   48,    0,
   48,    0,   48,    0,    0,   48,    0,    0,   48,   48,
   48,   48,    0,    0,    0,   48,   48,   48,    0,    0,
   48,   48,   48,    0,    0,    0,    0,    0,   48,   48,
   48,    0,   48,   48,    0,   48,   48,   48,   48,    0,
    0,    0,   48,    0,    0,   49,    0,    0,    0,   49,
    0,   49,    0,    0,   49,    0,   49,   49,    0,   49,
    0,   49,   48,   49,    0,   49,   49,   49,   82,   49,
    0,    0,   49,   49,    0,    0,   49,   48,    0,   49,
    0,    0,    0,   49,   49,   49,    0,    0,   49,    0,
   49,    0,   49,    0,    0,   49,    0,    0,   49,   49,
   49,   49,    0,    0,    0,   49,   49,   49,    0,    0,
   49,   49,   49,    0,    0,    0,    0,    0,   48,   49,
   49,    0,   49,   49,    0,   49,   49,   49,   49,    0,
    0,    0,   49,    0,    0,   48,    0,    0,    0,   48,
    0,   48,    0,    0,   48,    0,   48,   48,    0,   48,
    0,   48,   49,   48,    0,   48,   48,   48,    0,   48,
    0,    0,   48,   48,    0,    0,   48,   49,    0,   48,
    0,    0,    0,   48,   48,   48,    0,    0,   48,    0,
   48,    0,   48,    0,    0,   48,    0,    0,   48,   48,
   48,   48,    0,    0,    0,   48,   48,   48,    0,    0,
   48,   48,   48,    0,    0,    0,    0,    0,   49,   48,
   48,    0,   48,   48,    0,   48,   48,   48,   48,   48,
    0,    0,   48,   48,    0,   48,    0,    0,   48,    0,
   48,   48,    0,   48,    0,   48,    0,   48,    0,   48,
   48,   48,   48,   48,    0,    0,   48,   48,  214,    0,
   48,    0,    0,   48,    0,    0,    0,   48,   48,   48,
    0,    0,   48, 1121,   48,    0,   48,    0,    0,   48,
    0,    0,   48,   48,   48,   48,    0,    0,    0,   48,
   48,   48,    0,    0,   48,   48,   48, 1122,    0,    0,
    0,    0,    0,   48,   48,    0,   48,   48,   48,   48,
   48,   48,   48, 1123,    0,    0,   48,    0, 1124,    0,
    0,    0,    0, 1125,    0,    0, 1126, 1127, 1128, 1129,
    0,    0,    0,    0, 1130,    0,   48,    0, 1131,    0,
    0,    0,  215,    0,    0,    0,    0,    0,    0,    0,
 1132,    0,    0,    0, 1133,    0, 1134,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
 1135,   64,    0,    0,   30,    0,    0,    0,    0,    0,
    0,    0,   48,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,  558,    0,    0,    0,    0,
    0,    0,    0,  559,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0, 1318,    0,    0,    0,
    0,    0,  560,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,    0,    0,
    0,    0,   95,  886,    0,  561,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   56,
   24,    0,   25,  103,  104,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  105,  106,
  107,  108,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,  558,    0,    0,    0,    0,
    0,    0,    0,  559,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,  560,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,  561,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   56,
   24,    0,   25,  103,  104,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  105,  106,
  107,  108,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,  448,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  288,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   56,
   24,    0,   25,  103,  104,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  105,  289,
  107,  108,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  288,    0,    0,    0,    0,  844,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   56,
   24,    0,   25,  103,  104,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  105,  289,
  107,  108,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  288,    0,    0,    0,  474,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   56,
   24,    0,   25,  103,  104,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  105,  289,
  107,  108,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  288,    0,    0,    0,  481,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   56,
   24,    0,   25,  103,  104,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  105,  289,
  107,  108,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  288,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   56,
   24,    0,   25,  103,  104,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  105,  289,
  107,  108,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   56,
   24,    0,   25,  103,  104,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  105,  106,
  107,  108,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,   78,
   78,    0,   78,  103,  104,   78,   78,    0,    0,    0,
   78,   78,   78,    0,   78,    0,    0,    0,    0,    0,
    0,   78,    0,    0,   78,    0,    0,    0,  105,  976,
  107,  108,    0,    0,   78,    0,    0,    0,    0,   78,
    0,   78,   78,   78,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   78,    0,   78,   78,
    0,    0,   78,    0,    0,   78,    0,   78,    0,   78,
   78,   78,   78,    0,   78,    0,    0,    0,    0,    0,
    0,    0,   78,    0,    0,   78,   78,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   78,   78,   78,   78,   78,    0,    0,    0,    0,    0,
    0,    0,   78,    0,    0,    0,    0,    0,   78,   78,
   78,   78,    0,    0,    0,   78,    0,   78,    0,  136,
  136,    0,  136,   78,   78,  136,  136,    0,    0,    0,
  136,  136,  136,    0,  136,    0,    0,    0,    0,    0,
    0,  136,    0,    0,  136,    0,    0,    0,   78,   78,
   78,   78,    0,    0,  136,    0,    0,    0,    0,  136,
    0,  136,  136,  136,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  136,    0,  136,  136,
    0,    0,  136,    0,    0,  136,    0,  136,    0,  136,
  136,  136,  136,    0,  136,    0,    0,    0,    0,    0,
    0,    0,  136,    0,    0,  136,  136,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  136,  136,  136,  136,  136,    0,    0,    0,    0,    0,
    0,    0,  136,    0,    0,    0,    0,    0,  136,  136,
  136,  136,    0,    0,    0,  136,    0,  136,    0,   56,
   24,    0,   25,  136,  136,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,    0,    0,    0,  136,  136,
  136,  136,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,  320,  288,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,  643,    0,
  643,    0,  643,  103,  104,  643,    0,  643,  643,    0,
  643,    0,  643,    0,  643,    0,  643,  643,  643,    0,
    0,    0,    0,  643,  643,    0,    0,  643,  105,  321,
  643,  108,    0,    0,  643,  643,    0,    0,    0,  643,
    0,    0,    0,  643,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  643,  643,    0,  643,    0,
    0,    0,  643,  643,    0,    0,    0,    0,    0,    0,
  643,  643,    0,    0,  643,    0,  643,    0,  643,   56,
   24,    0,   25,  643,    0,   26,  286,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   30,  643,  643,    0,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,  643,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  287,    0,   41,    0,    0,    0,  448,  643,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,  320,    0,    0,  642,    0,  642,    0,
    0,  642,   95,  642,  642,    0,  642,    0,  642,    0,
  642,    0,  642,  642,  642,    0,    0,    0,    0,  642,
  642,    0,    0,  642,    0,    0,  642,    0,    0,    0,
  642,  642,    0,    0,    0,  642,    0,    0,    0,  642,
    0,    0,    0,    0,    0,    0,    0,    0,  105,  321,
    0,    0,  642,    0,  642,    0,    0,    0,  642,  642,
    0,    0,    0,    0,    0,    0,  642,  642,    0,    0,
  642,    0,  642,  642,  642,  642,    0,    0,  642,  642,
  642,  642,    0,  642,    0,  642,    0,  642,    0,  642,
  642,  642,    0,    0,    0,    0,  642,  642,    0,    0,
  642,    0,    0,  642,    0,    0,    0,  642,  642,    0,
    0,    0,  642,    0,  642,    0,  642,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  642,
    0,  642,    0,    0,    0,  642,  642,    0,    0,    0,
    0,    0,    0,  642,  642,    0,    0,  642,    0,  642,
    0,  642,   24,    0,   25,  642,  642,   26,    0,    0,
 1291,    0,   27,    0, 1149,    0,   28,    0, 1150, 1292,
 1293,    0,    0,    0,    0, 1294,   30,    0,    0, 1295,
    0,    0, 1296,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,    0,    0,   34,    0,   24,    0,   25,
    0,    0,   26,    0,    0,    0,    0,   27,   36,    0,
   37,   28,    0,    0,   38,    0,    0,    0,    0,    0,
    0,   30,   39,   40,    0,    0,   41,    0, 1297,    0,
 1298,   32,  642,    0,    0, 1299,   33,    0,    0,    0,
   34,    0,  535,    0,    0,    0,    0,    0,    0,    0,
  536,    0,    0,   36,    0,   37,    0,    0,    0,   38,
    0,    0,  537,    0,    0,    0,    0,   39,   40,    0,
 1300,   41,    0,    0,   24,  538,   25,    0,    0,   26,
    0, 1236,    0,    0,   27,    0,    0,    0,   28,    0,
    0,    0,    0,    0,    0,   24,    0,   25,   30,    0,
   26,    0,    0,    0,    0,   27,    0,    0,   32,   28,
    0, 1301,    0,   33,    0, 1237,    0,   34,    0,   30,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
   36,    0,   37,    0,   33,    0,   38, 1238,   34,    0,
    0,    0,    0,    0,   39,   40,    0,    0,   41,    0,
    0,   36,  304,   37,    0,    0,  539,   38,  174,    0,
  174,    0,    0,  174,    0,   39,   40,    0,  174,   41,
    0,    0,  174,  304,    0,    0,    0,    0,    0,  174,
    0,  174,  174,    0,  174,    0,    0,    0,    0,  174,
    0,    0,  174,  174,    0,    0,    0,  174,    0,  243,
    0,  174,    0,  174,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  174,  174,    0,  174,    0,  174,    0,
  174,    0,  174,    0,    0,    0,    0,    0,  174,  174,
    0,    0,  174,  340,    0,  174,  174,  174,   24,    0,
   25,  174,    0,   26,    0,    0,    0,    0,   27,  174,
  174,    0,   28,  174,  305,    0,    0,  174,    0,    0,
    0,    0,   30,    0,    0,    0,    0,    0,    0,    0,
    0,  971,   32,    0,    0,    0,    0,   33,    0,    0,
    0,   34,    0,    0,    0,    0,    0,   24,    0,   25,
  971,    0,   26,    0,   36,    0,   37,   27,    0,    0,
   38,   28,    0,    0,    0,    0,    0,    0,   39,   40,
    0,   30,   41,   24,    0,   25,  304,  174,   26,    0,
    0,   32,    0,   27,    0,    0,   33,   28,    0,    0,
   34,    0,    0,    0,    0,    0,    0,   30,  174,    0,
    0,    0,    0,   36,    0,   37,    0,   32,    0,   38,
    0,    0,   33,    0,    0,    0,   34,   39,   40,    0,
    0,   41,   24,    0,   25,  483,    0,   26,    0,   36,
    0,   37,   27,    0,    0,   38,   28,    0,    0,    0,
    0,    0,    0,   39,   40,    0,   30,   41,    0,    0,
    0,  538,    0,    0,    0,    0,   32,  340,    0,    0,
    0,   33,    0,    0,    0,   34,    0,    0,    0,    0,
    0,  490,    0,  490,    0,    0,  490,    0,   36,    0,
   37,  490,    0,    0,   38,  490,    0,    0,    0,    0,
    0,    0,   39,   40,    0,  490,   41,  175,    0,  175,
  724,    0,  175,    0,    0,  490,  340,  175,    0,    0,
  490,  175,    0,    0,  490,    0,    0,    0,    0,    0,
    0,  175,    0,    0,    0,    0,    0,  490,    0,  490,
    0,  175,  340,  490,    0,    0,  175,    0,    0,    0,
  175,  490,  490,    0,    0,  490,  174,    0,  174,  490,
    0,  174,    0,  175,    0,  175,  174,    0,    0,  175,
  174,    0,    0,    0,    0,    0,    0,  175,  175,    0,
  174,  175,    0,    0,    0,  175,    0,    0,    0,    0,
  174,  340,    0,    0,    0,  174,    0,   35,    0,  174,
    0,    0,    0,    0,    0,  184,    0,  184,   35,    0,
  184,    0,  174,   35,  174,  184,    0,   35,  174,  184,
    0,   35,    0,    0,    0,    0,  174,  174,    0,  184,
  174,    0,    0,   35,  174,    0,   35,   35,    0,  184,
  490,    0,   35,    0,  184,    0,    0,   35,  184,    0,
   35,   35,   35,   35,    0,    0,    0,    0,   35,    0,
    0,  184,   35,  184,   35,    0,  175,  184,    0,    0,
    0,    0,    0,    0,   35,  184,  184,    0,   35,  184,
   35,    0,   33,  184,   35,    0,    0,    0,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   33,    0,
    0,   29,   33,    0,   35,    0,   33,    0,    0,    0,
   35,   35,    0,    0,    0,  174,    0,    0,    0,    0,
    0,   33,   33,    0,    0,   29,    0,   33,    0,    0,
    0,    0,   33,    0,    0,   33,   33,   33,   33,    0,
    0,   29,    0,   33,    0,    0,   29,   33,   29,   33,
   29,   29,    0,    0,   29,   29,   29,   29,    0,   33,
   29,    0,   29,   33,  184,   33,   29,    0,    0,   33,
    0,    0,   29,    0,    0,    0,    0,    0,   29,    0,
    0,    0,   29,    0,   29,    0,    0,    0,   29,   33,
    0,    0,    0,   29,    0,   33,   33,    0,   29,    0,
    0,   29,   29,   29,   29,    0,    0,    0,   29,   29,
    0,    0,    0,   29,   29,   29,    0,    0,    0,   48,
    0,    0,    0,    0,    0,   29,    0,    0,    0,   29,
   48,   29,    0,    0,    0,   48,    0,    0,    0,   48,
    0,    0,    0,   48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   29,    0,    0,   48,   48,
    0,   29,   29,    0,   48,    0,    0,    0,    0,   48,
    0,    0,   48,   48,   48,   48,    0,    0,    0,    0,
   48,    0,    0,   48,   48,    0,   48,    0,    0,    0,
    0,    0,    0,    0,   48,    0,   48,    0,    0,   48,
   48,    0,   48,   48,    0,    0,   48,   48,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
    0,    0,   48,   48,    0,    0,   48,    0,   48,    0,
    0,    0,   37,   48,    0,    0,   48,   48,   48,   48,
    0,    0,   48,    0,   48,    0,    0,    0,   48,    0,
   48,    0,   48,    0,    0,    0,    0,    0,   48,    0,
   48,    0,    0,   48,   48,    0,   48,    0,   48,    0,
   48,   48,   48,   48,   48,    0,   48,    0,    0,   48,
    0,    0,    0,   48,    0,    0,    0,    0,    0,    0,
   48,    0,   48,    0,    0,   48,   39,   48,    0,   48,
    0,   48,   48,    0,    0,   48,   48,   48,   48,    0,
    0,    0,    0,   48,    0,    0,    0,   48,   48,    0,
    0,    0,    0,    0,    0,   48,    0,   48,   48,   48,
    0,  196,    0,   48,    0,   48,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,    0,   48,    0,    0,    0,   48,   48,
    0,   48,   48,   48,    0,  198,    0,    0,   48,    0,
    0,   48,   48,   48,   48,    0,   48,   48,    0,   48,
    0,    0,    0,   48,    0,    0,    0,   48,    0,    0,
    0,    0,   48,    0,    0,   48,    0,   48,    0,   48,
    0,   48,   48,    0,    0,   48,   48,   48,   48,    0,
    0,   48,    0,   48,    0,    0,    0,   48,    0,    0,
    0,    0,    0,    0,    0,   48,    0,   48,    0,   48,
    0,  299,   48,   48,   49,   48,    0,   48,    0,    0,
   48,   48,   48,   48,    0,   49,    0,    0,   48,    0,
   49,    0,   48,   48,   49,   48,    0,    0,   49,   48,
    0,    0,    0,    0,   48,  300,    0,    0,   48,    0,
   48,    0,    0,   49,   49,    0,    0,   48,    0,   49,
    0,    0,    0,    0,   49,    0,    0,   49,   49,   49,
   49,    0, 1121,   48,   48,   49,   48,   48,   48,   49,
    0,   49,    0,   48,    0,    0,   48,   48,   48,   48,
    0,   49,   48,    0,   48,   49, 1122,   49,   48,    0,
    0,   49,    0,    0,    0,    0,    0,    0,    0,    0,
   48,    0, 1123,    0,   48,    0,   48, 1124,    0,    0,
    0,   49, 1125,    0,    0, 1126, 1127, 1128, 1129,    0,
    0,    0,    0, 1130,    0,    0,    0, 1131,    0,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0, 1132,
    0,    0,    0, 1133,    0, 1134,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1135,
  };
  protected static readonly short [] yyCheck = {            17,
  283,   17,   17,    6,   51,  189,  284,   17,   51,  232,
    4,   18,   20,  275,  186,  237,  454,  478,  481,   59,
  524,  310,  303,  541,  339,  157,  314,  306,   68,  339,
  280,  352,  311,   77,  324,    0,    0, 1079, 1149, 1022,
 1192, 1193,   58,  749,   84,  549,    0,   87,   88,    0,
    0, 1137,   92,    0,  714,   73,  256, 1078, 1210,   77,
  272,    0,  272,   79,  301,   81,  256,  374,  280,  256,
  268,   47,  608,  609,  256, 1243,  268,   95,  268,  256,
 1101,  298,  268,  256,  276,  256,  378,  256,   17,  256,
  256,  301, 1260,  310,  256,  256,  256,  256,  256,   17,
  256,  686,  363,  688,  374,  330,  374,  277,  961,  627,
  374,  281,  256,  282,  375,  256,  363,  378,  379,  330,
  369,  305, 1230,  420,  330,  377,  380,   17,  435,  351,
  375,  392,  298,  378, 1189,  256,  311,  434,   17,  157,
  187,  157,  157,  435,    0,  392,   17,  157, 1001,  734,
  319,  297,  257,  738,  277,   17,  340,  256,  256, 1214,
   17,  345,  256, 1271,  453,  435,  427,  435,  422,  448,
  449,  435,  451,  256,  426,  424,  374,  369,  348,   17,
   17,  381,  369,  230,   17,  495,  474,   17,  375,  412,
  346,  480,  369,  380,  477,  382,  378,  237,  380,  424,
  387,  345,  439,  364,  256,  520,  350,  424,  352, 1230,
  520,  355,  356,  424,  358,  359,  387,  454,  424,  237,
  387,  757,  381,  226,  242,  504,  689,  439,  157,  439,
  428,  541,  424,  417,  524, 1321,  380,  424,  428,  157,
 1351,  382,  428, 1411,  454,  221,  369,  424,  432,  785,
 1271,  424,  373,  435,  375,  424,  377,  275,  964,  549,
  278,  279,  424,  500,  424, 1433,  424,  157,  308,  430,
  431,  432,  433,  313,  449,  293,  451, 1445,  157, 1447,
  378,  299,  381,  301,  300,  303,  157,  381,  500,  435,
  500,  435,  257,  257,    6,  157,  256,  315,  316,  343,
  157,  424,  425,  257,  387,  426,  257,  257,  429,  324,
  257,  351,  352,  628,  324,  975,  374,  627,  257,  157,
  157, 1027,  374,  256,  157,  343,  256,  157,  380,  256,
  256,  364,  297,  351,  352,  256,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  312,  312,  934,
 1461, 1462,  256,  393,  394,  539,  892,  397,  894, 1511,
 1343,  897,  312, 1405,  256,  312,  309,  551,  386,  553,
  256,  555,  256,  312,  421,   87,   88,  435,  256,  256,
  256,  256,  378,  868, 1536,  373,  667,  330,  256,  256,
  256,  297,   87,   88,  382,  858,  108,  262,  441,  837,
  256, 1435, 1436,  256,  263,  413,  256,  256,  256,  369,
  375,  375,  452,  108,   21,  455, 1183,  374, 1003,  427,
  380,  374,  382,  257,  256,  256,  442,  387,  284,  382,
  652,  967,  309,  969,  970,  619,  659,  302,  478,  435,
  373,  691,  418,  419,  374,   52,  725,  762,  424,  382,
  380,  377,  762,  380,  638,  495,  777,  378,  476,  499,
  478,  320,  309,  481,  424,  928,  424, 1224,  953,  347,
  955, 1505,  990, 1058,  378,  491,  492,  266,  435,  691,
 1065,  424,  435,  330,  376,  197,  198,  495,  380,  345,
  508, 1230,  256,  369,  380,  513,  380,  375, 1083,  375,
  540,  376,  197,  198,  380,  380,  382,  375,  375,  524,
  825,  387,  378,  309,  524,  531,  263,  373,  266,  384,
  385,  377,  375,  379,  380,  381,  382,  375,  378,  378,
  319,  387, 1271, 1069,  549,  256,  248,  378,   20,  549,
  558,  559,  373,  375,  375,  369,  377,  378,  424,  380,
 1307,  382,  374,  248, 1311,  373,  378,  382, 1094,  377,
  272,  783,  274,  851,  378,  605,  855,  607,  700,  374,
  256,  319,  284,  320,  369,  374,  616,  424,  264,  274,
  292, 1295, 1339,  375, 1088,  603,  380, 1354,  309,  301,
  608,  609,  381,  611,  435,  426,  309,  292,  429,  269,
  424,  256, 1369, 1370, 1230,   87,   88, 1321,  426,  373,
  435, 1147,  652,  377, 1381,  379,  380,  287,  382,  424,
 1156,  435, 1389,  387,  336,  424,  108,  339,  422,  424,
 1397,  914,  310,  381,  652,  313,  676, 1404, 1352,  310,
  318,  345,  313,  310,  330, 1271, 1084,  318,  382,  667,
  931,  318,  330,  379,  380,  382,  368,  369,  309,  330,
  943,  272, 1429,  272,  310,  349,  272,  313, 1230,  373,
 1230,  689,  318,  368,  369,  424,  694, 1230,  382,  330,
  990,  393,  394,  867,  330,  434,  377,  909,  728,  300,
  345,  300,  256, 1230,  300,  350,  422,  352,  393,  394,
  355,  356,  377,  358,  359,  721, 1230,  378,  424, 1271,
  375, 1271,  363,  397,  379,  197,  198,  328, 1271,  328,
  298,  761,  328,  741,  375,  743,  377,  439,  379,  901,
  376,  747,  256,  749, 1271,  373,  420,  777,  397,  757,
  846,  392,  454,  783, 1022,  269,  424, 1271, 1010,  310,
  434,  857,  313,  424,  347,  379,  256,  318,  345,  777,
  807,  420,  345,  287,  429,  783,  248,  785,  952,  330,
  374,  397, 1062,  424,  378,  434,  390,  363,  424,  387,
  435,  420,  375,  495, 1046,  363,  373,  830,  500,  397,
  373,  369,  274,  379,  420,  434, 1079,  375, 1088,  345,
  378,  379,  284,  256,  822,  385,  392,  815,  520,  373,
  292,  373,  420,  377,  392,  379,  380, 1039,  382,  363,
  382,  839,  862,  387,  864,  353, 1116,  373,  846,  541,
  870,  391,  378,  349,  380,  379,  382,  363,  856, 1149,
  858,  387,  370,  371,  998,  345,  424, 1109,  392,  427,
  350,  424,  352,  379,  336,  355,  356,  339,  358,  359,
  387,  434,  395,  424,  256,  310,  392,  406,  313,  909,
  397,  387, 1026,  318,  892, 1098,  894,  374,  424,  897,
  380,  397,  377,  380,  379,  330,  368,  369,  407,  298,
  387,  909,  345,  420,  388,  389,  914,  350,  906,  352,
  419,  310,  355,  356,  420,  358,  359,  434,  402,  403,
  928,  393,  394,  931,  424,  627,  379,   93,  434,  382,
  256,   97,   98,   99,  100,  101,  102,  103,  104,  298,
  310,  413,  374,  377,  373,  435,  378,  380,  318,  382,
  382,  310,  960,  382,  387,  427,  986,  373,  964,  967,
  330,  969,  970,  345,  972,  349,  382,  997,  350,  379,
  352,  373,  382,  355,  356,  373,  358,  359, 1278,  373,
  382, 1233,  396, 1196,  382, 1285,   61,  424,  382,  376,
   65,   66,   67,  380,   69,   70,  420, 1450,  982,   74,
   75,  376, 1010,  387,  312,  380,   81,  256,   83, 1039,
   85, 1464,  424,  397,  374,   90,   91,  719,  378,  345,
  381, 1027,  382,  495,  350,  379,  352,  382,  382,  355,
  356, 1039,  358,  359,  719,  256,  420,  382, 1046,  114,
  376, 1078,  744, 1040,  380, 1078,  373,  377,  520,  379,
  434, 1351,  381,  435,  376,  377,  758, 1062,  380,  744,
  762, 1069, 1062,  378, 1101,  380,  376, 1075, 1101,  541,
  380, 1079, 1525,  758, 1082, 1343, 1527, 1528,  376,  373,
  378,  375,  380, 1088, 1092,  369, 1094, 1095, 1088,    0,
  272,  382,  376,  376,  378,  277,  380,  380,  376,  281,
  378, 1109,  380,  387,  392,  378,  272,  380,  378,  435,
  380, 1116,  382,  378,  280,  380, 1116,  382,  300,  374,
  382,  256,  288,  378,  345,  827,  376, 1301,  378,  350,
  298,  352, 1405, 1163,  355,  356,  375,  358,  359, 1147,
  424,  298,  827,  256, 1318,  376,  328,  378, 1156,  376,
 1183,  378, 1189,  400,  401,  627, 1189, 1150,  392,  393,
  394, 1461, 1462,  376, 1157,  378,  348,  377,  349,  379,
  374,  375,  376,  377, 1348, 1349, 1169, 1214, 1171,  277,
 1173, 1214,  380,  378,  382,  380,  378,  353,  398,  399,
  404,  405, 1229, 1230,  382,  380, 1229,  382,  420,  365,
  366,  367,  360,  361,  370,  371,  424,  282,  418, 1246,
  345,  362,  287, 1246,  435,  350,  426,  352,  424,  429,
  355,  356,  297,  358,  359, 1233,  376,  377,  424,  379,
  380,  381,  345,  378, 1271,  380, 1273,  350,  375,  352,
 1273,  381,  355,  356,  256,  358,  359,  719,  376,  376,
  378,  378,  382,  265,  380,  267,  382,  380,  270,  382,
  380,  378,  382,  275,  380,  374,  382,  279,  360,  361,
  374,  375,  744,  439,   93, 1281,  378,  289,   97,   98,
   99,  100,  101,  102,  103,  104,  758,  299,  990,  380,
  762,  378,  304,  374,  375,  378,  308,  370,  371,  298,
  435,  363,  378,  379,  370,  371,  298,  369,  380,  321,
    0,  323,  380,  375,  378,  327,  378,  379,  380,  378,
 1022, 1354,  435,  335,  336,  372,  373,  339,  378, 1335,
  392,  343, 1186, 1187,  500, 1372, 1369, 1370,  378,  379,
  382,  377,  256,  815,  298,  298,  257,  378, 1381, 1386,
  261,  380,  387,  379,  381,  827, 1389,  369,  380,  379,
  378,  272,  424,  380, 1397, 1402,  277,  380,  382,  444,
  281, 1404,  380,  380,  285,  450, 1413, 1414,  435,  380,
  546,  429,  378,  380,  373,  378,  297,  378,  427,  300,
  301,  379,  349,  298, 1400,  306, 1429, 1405, 1435, 1436,
  311,  312,  380,  314,  315,  316,  317,  298,  424,  376,
  373,  322,  424,  377,  424,  326,  491,  328,  387,  424,
  256,  256,  387,  280,  256,  373,  378,  338,  374,  349,
  357,  342,  376,  344,  906,  374,  381,  348,  377,  380,
  379,  380, 1450,  380,  380,  380,  378, 1149, 1456,  382,
  376,  353,  382,  378,  378,  256, 1464,  368,  387,  398,
  399,  256,  378,  374,  375, 1167,  374,  382, 1505,  288,
  353,  380,  376,  373,  387,  387,  354,  387,  374,  418,
  429,  377, 1167,  379,  380,  374,  376,  426, 1190,  354,
  429,  362,  374,  424,  381,  314,  256, 1527, 1528,  256,
 1506, 1507,  398,  399,  377, 1190,  373,  284,  378,  377,
 1516, 1517,  345,  374, 1216,  373,  380, 1525,  990, 1527,
 1528,  424,  418,  424,  373,  691, 1228,  373,  387,  382,
  426, 1216,  382,  429,  353,  380,  374,  374,  378,  424,
  374,  292,  309, 1228,  424,  424,  365,  366,  367,  424,
 1022,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,  381,  382,  383,  384,  385,  257,  381,  424,
  424,  261,  381,  424,  377, 1277, 1278,  375,  377,  373,
  377,  420,  272, 1285,  256,  377,  379,  277,  377, 1291,
 1292,  281, 1277,  373,  377,  285,  387,  379,  379,  377,
  387,  380,  378,  378,  378,  378, 1291, 1292,  256,  380,
  300,  301,  382,  375, 1316,  376,  306,  424,    0,  382,
  424,  311,  312, 1325,  314,  315,  316,  317,  382,  378,
  256, 1316,  322,  380,  373,  381,  326,  381,  328,  387,
 1325, 1343,  378,  380,  378,  374,  387,  382,  338, 1351,
  382,  378,  342,  374,  344,  474,  424,  320,  348,  424,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
 1372,  263,  376,  387,  381,  377,  256, 1149,  368,  377,
  374,  343,  378,  378,  374,  375,    0,    0,  373,  382,
  374,  378,    0,  373,  382, 1167,  374,  345,  424,  378,
  376,  378,  350,  373,  352,  353,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  424,  382,  374, 1190,  378,
  374,  376,  378,  374,  382,  378,  374,  546,  376,  378,
  378,  374,  380,  381,  382,  382,  382,  378,  374,  374,
  382,  373,  424,  424, 1216,  373,  320,  374,  396,  382,
  379,  375,  382,  263,   50,  187, 1228,  382,   12, 1461,
 1462,  382,  382,  382,  382,  345,  382,  382,    5, 1101,
  350,  815,  352,  353,  354,  355,  356,  357,  358,  359,
  360,  361,  362, 1039,  906, 1039, 1246,  435, 1440, 1408,
 1273,    0, 1489, 1459,  374, 1467,  376, 1400,  378, 1295,
  380,  381,  382, 1314, 1517, 1277, 1278,  830, 1271,  830,
  390,  391, 1336, 1285,  658,  395,  396, 1259, 1508, 1291,
 1292,  830,  825, 1295,  404,  405,  406,  407, 1418, 1414,
 1302, 1413, 1507, 1214, 1349, 1302,  807, 1216,  694,  419,
  851,  783, 1314,  495, 1316,  351,  559,  652,  943, 1321,
   71,  317,  380, 1325,  381,  435,  382, 1206,  383,  520,
  691,  384, 1277,  385,  762, 1116,  157,  930, 1062, 1001,
 1082, 1343,  957,  988,  256,  257, 1015,    0,  872, 1351,
 1352, 1084,  264,  265,  266,  267,  268,  493,  270,  271,
  402,  273,  274,  275,  276,  277,  278,  279,  280, 1013,
 1372,  402,  614,   -1,  286, 1165,  288,  289,  290,  291,
   -1,  293,  294,   -1,  813, 1095,   -1,  299,  812,   -1,
   -1,  303,  304,   -1,  306,  307,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,
   -1,  323,  324,   -1,   -1,  327,   -1,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,   -1,   -1,   -1,  346,  347,   -1,   -1,  350,  351,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,  366,  367,  368,  369,   -1, 1461,
 1462,  373,  374,   -1,   -1,  377,   -1,   -1,   -1,   -1,
  382,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  851,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  423,  424,  425,  426,   -1,  428,  256,  257,    0,
   -1,   -1,   -1,  435,   -1,  264,  265,  266,  267,  268,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,  288,
  289,  290,  291,   -1,  293,  294,   -1,   -1,   -1,   -1,
  299,   -1,   -1,   -1,  303,  304,   -1,  306,  307,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,  321,   -1,  323,  324,   -1,   -1,  327,   -1,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  256,   -1,   -1,   -1,  346,  347,  262,
   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,  367,  368,
  369,   -1,   -1,   -1,  373,  374,   -1,   -1,  377,   -1,
   -1,   -1,   -1,  382,  383,  384,  385,  386,   -1,  302,
   -1,  390,   -1,  392,   -1,   -1,  309,   -1,   -1,  398,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,  330,   -1,   -1,
   -1,   -1,   -1,   -1,  423,  424,  425,  426,   -1,  428,
   -1,  256,  345,   -1,   -1,   -1,  435,  350,   -1,  352,
  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,
  373,  374,   -1,  376,  377,  378,  379,  380,  381,  382,
   -1,  384,  385,   -1,  387,  388,  389,  390,  391,  392,
  393,  394,  395,  396,   -1,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,   -1,   -1,  422,
   -1,  424,   -1,  426,   -1,  256,  429,   -1,   -1,    0,
  345,  262,  435,   -1,   -1,  350,   -1,  352,  353,  354,
  355,  356,  357,  358,  359,  360,  361,  362,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,   -1,
   -1,  302,   -1,  388,  389,  390,  391,   -1,  309,   -1,
  395,  396,   -1,   -1,   -1,  400,  401,  402,  403,  404,
  405,  406,  407,   -1,   -1,   -1,   -1,   -1,   -1,  330,
   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  345,   -1,   -1,   -1,   -1,  350,
  435,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,    0,  369,   -1,
   -1,   -1,  373,  374,  375,  376,  377,  378,  379,  380,
  381,  382,   -1,  384,  385,   -1,  387,  388,  389,  390,
  391,  392,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,  256,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,  419,   -1,
   -1,  422,   -1,  424,   -1,  426,   -1,   -1,  429,   -1,
   -1,   -1,  345,   -1,  435,   -1,   -1,  350,   -1,  352,
  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,
   -1,  350,   -1,  352,  353,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  256,   -1,   -1,   -1,   -1,
  369,  262,  435,   -1,  373,  374,  375,  376,  377,  378,
  379,  380,  381,  382,   -1,  384,  385,   -1,  387,  388,
  389,  390,  391,  392,   -1,   -1,  395,  396,   -1,   -1,
   -1,  400,  401,  402,  403,  404,  405,  406,  407,    0,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,
  419,   -1,   -1,  422,   -1,  424,   -1,  426,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,  330,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,
   -1,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,   -1,  256,   -1,   -1,   -1,   -1,  369,  262,
   -1,   -1,  373,  374,  375,  376,  377,  378,   -1,  380,
  381,  382,   -1,  384,  385,   -1,  387,  388,  389,  390,
  391,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,  419,   -1,
   -1,  422,   -1,  424,   -1,  426,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,  330,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,   -1,  352,
  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
    0,  256,   -1,   -1,   -1,   -1,  369,  262,   -1,   -1,
  373,  374,  375,  376,  377,  378,   -1,  380,  381,  382,
   -1,  384,  385,   -1,  387,  388,  389,  390,  391,   -1,
   -1,   -1,  395,  396,   -1,   -1,   -1,  400,  401,  402,
  403,  404,  405,  406,  407,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   -1,  419,   -1,   -1,  422,
   -1,  424,   -1,  426,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,  435,   -1,   -1,  330,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
  345,  262,   -1,   -1,   -1,  350,   -1,  352,  353,  354,
  355,  356,  357,  358,  359,  360,  361,  362,   -1,   -1,
   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,  373,  374,
   -1,  376,  377,  378,   -1,  380,  381,  382,   -1,  384,
  385,  302,  387,  388,  389,  390,  391,   -1,   -1,   -1,
  395,  396,   -1,   -1,   -1,  400,  401,  402,  403,  404,
  405,  406,  407,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  419,   -1,   -1,  422,   -1,  424,
   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,
  435,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,
   -1,   -1,  373,  374,   -1,  376,  377,  378,   -1,  380,
  381,  382,   -1,  384,  385,   -1,   -1,  388,  389,  390,
  391,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,
   -1,  422,   -1,  424,   -1,   -1,   -1,  257,   -1,   -1,
   -1,  261,   -1,  263,  435,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,   -1,  285,   -1,   -1,  288,  289,
   -1,   -1,  292,   -1,   -1,  295,   -1,   -1,  298,  299,
  300,  301,   -1,   -1,  304,   -1,  306,   -1,  308,   -1,
  310,  311,  312,   -1,  314,  315,  316,  317,   -1,   -1,
  320,  321,  322,  323,   -1,   -1,  326,  327,  328,   -1,
   -1,   -1,   -1,   -1,   -1,  335,  336,   -1,  338,  339,
   -1,  341,  342,  343,  344,   -1,   -1,   -1,  348,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  368,   -1,
  370,  371,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,  288,  289,  290,  291,
   -1,  293,  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,
   -1,  303,  304,   -1,  306,  307,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  424,   -1,   -1,  319,   -1,  321,
   -1,  323,  324,   -1,   -1,  327,   -1,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  256,   -1,   -1,   -1,  346,  347,  262,   -1,  350,  351,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,  366,  367,  368,  369,   -1,   -1,
   -1,  373,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
  382,  383,  384,  385,  386,   -1,  302,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  423,  424,  425,  426,   -1,   -1,   -1,   -1,  345,
   -1,   -1,   -1,  435,  350,  256,  352,  353,  354,  355,
  356,  357,  358,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,  379,  380,  381,  382,   -1,  384,  385,
   -1,  387,  388,  389,  390,  391,  392,  393,  394,  395,
  396,   -1,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,   -1,  256,   -1,   -1,  424,   -1,
  426,  262,   -1,  429,   -1,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,
   -1,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  302,   -1,  374,   -1,  376,   -1,  378,   -1,  380,
  381,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,
  391,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,   -1,   -1,  256,
   -1,   -1,   -1,   -1,  345,  262,   -1,   -1,  419,  350,
   -1,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  373,  374,  375,  376,  377,  378,  379,  380,
  381,  382,   -1,  384,  385,  302,  387,  388,  389,  390,
  391,  392,  393,  394,  395,  396,   -1,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,   -1,
   -1,   -1,   -1,  286,   -1,  426,   -1,   -1,  345,   -1,
   -1,   -1,   -1,  350,  435,  352,  353,  354,  355,  356,
  357,  358,  359,  360,  361,  362,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  373,  374,   -1,  376,
  377,  378,  379,  380,  381,  382,   -1,  384,  385,  332,
  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,   -1,  256,   -1,   -1,   -1,   -1,  426,
  262,   -1,  429,   -1,   -1,   -1,   -1,   -1,  435,   -1,
  383,  384,  385,  386,   -1,  388,  389,  390,  391,  392,
  393,  394,  395,   -1,   -1,  398,  399,  400,  401,  402,
  403,  404,  405,   -1,  345,   -1,   -1,   -1,   -1,  350,
  302,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,  256,
  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,  377,  378,  379,  380,  381,
  382,   -1,  384,  385,  435,  387,  388,  389,  390,  391,
  392,  393,  394,  395,  396,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,   -1,  256,
   -1,   -1,   -1,   -1,  426,  262,   -1,  429,   -1,   -1,
   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,  345,   -1,
   -1,   -1,   -1,  350,   -1,  352,  353,  354,  355,  356,
  357,  358,  359,  360,  361,  362,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,  374,   -1,  376,
   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,  396,
   -1,   -1,   -1,  400,  401,  402,  403,  404,  405,  406,
  407,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  345,   -1,
   -1,   -1,  419,  350,  256,  352,  353,  354,  355,  356,
  357,  358,  359,  360,  361,  362,   -1,   -1,  435,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
  377,  378,  379,  380,  381,  382,   -1,  384,  385,   -1,
  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,   -1,  256,   -1,   -1,   -1,   -1,  426,
  262,   -1,  429,   -1,   -1,   -1,   -1,   -1,  435,   -1,
   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,   -1,
  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,
  402,  403,  404,  405,  406,  407,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  345,   -1,   -1,   -1,  419,  350,  256,
  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
  362,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,  377,  378,  379,  380,  381,
  382,   -1,  384,  385,   -1,  387,  388,  389,  390,  391,
  392,  393,  394,  395,  396,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,   -1,  256,
   -1,   -1,   -1,   -1,  426,  262,   -1,  429,   -1,   -1,
   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,  345,   -1,
   -1,   -1,   -1,  350,   -1,  352,  353,  354,  355,  356,
  357,  358,  359,  360,  361,  362,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,  374,   -1,  376,
   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,  396,
   -1,   -1,   -1,   -1,   -1,  402,  403,  404,  405,  406,
  407,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  345,   -1,
   -1,   -1,  419,  350,   -1,  352,  353,  354,  355,  356,
  357,  358,  359,  360,  361,  362,   -1,   -1,  435,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
  377,  378,  379,  380,  381,  382,   -1,  384,   -1,   -1,
  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,   -1,  256,   -1,   -1,   -1,   -1,  426,
  262,   -1,  429,   -1,   -1,   -1,   -1,   -1,  435,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,
   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  302,  295,   -1,  256,   -1,  299,   -1,   -1,   -1,  262,
  304,   -1,   -1,  266,  308,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,
   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  335,  336,  345,   -1,  339,   -1,   -1,  350,  302,
  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
  362,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,
  382,   -1,  384,  385,   -1,  387,  388,  389,  390,  391,
  392,  393,  394,  395,  396,   -1,   -1,  256,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,   -1,  419,   -1,   -1,
   -1,  374,   -1,  376,  377,  378,  379,  380,  381,  382,
  424,  384,  385,  435,  387,  388,  389,  390,  391,  392,
  393,  394,  395,  396,   -1,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,   -1,  256,   -1,
   -1,   -1,   -1,  426,  262,   -1,  429,   -1,   -1,   -1,
   -1,   -1,  435,   -1,   -1,   -1,  345,   -1,   -1,   -1,
   -1,  350,   -1,  352,  353,  354,  355,  356,  357,  358,
  359,  360,  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  374,   -1,  376,   -1,  378,
   -1,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  391,   -1,   -1,   -1,  256,  396,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  406,  407,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  345,   -1,   -1,
  419,   -1,  350,   -1,  352,  353,  354,  355,  356,  357,
  358,  359,  360,  361,  362,   -1,  435,   -1,   -1,   -1,
   -1,   -1,  302,   -1,   -1,   -1,  374,   -1,  376,   -1,
  378,   -1,  380,  381,  382,   -1,  384,  385,   -1,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  396,   -1,
   -1,   -1,  400,  401,  402,  403,  404,  405,  406,  407,
  256,   -1,   -1,   -1,   -1,  345,  262,   -1,   -1,   -1,
  350,  419,  352,  353,  354,  355,  356,  357,  358,  359,
  360,  361,  362,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,
  380,  381,  382,   -1,  384,  385,  302,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,
  400,  401,  402,  403,  404,  405,  406,  407,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,  419,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  345,
   -1,   -1,   -1,   -1,  350,  435,  352,  353,  354,  355,
  356,  357,  358,  359,  360,  361,  362,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,  374,   -1,
  376,   -1,  378,   -1,  380,  381,  382,   -1,  384,  385,
   -1,   -1,  388,  389,  390,  391,  256,   -1,   -1,  395,
  396,   -1,  262,   -1,  400,  401,  402,  403,  404,  405,
  406,  407,   -1,   -1,   -1,   -1,   -1,  345,   -1,   -1,
   -1,   -1,  350,  419,  352,  353,  354,  355,  356,  357,
  358,  359,  360,  361,  362,   -1,   -1,   -1,   -1,  435,
   -1,   -1,  302,   -1,   -1,   -1,  374,   -1,  376,   -1,
  378,   -1,  380,  381,  382,   -1,  384,  385,   -1,   -1,
  388,  389,  390,  391,  256,   -1,   -1,  395,  396,   -1,
   -1,   -1,  400,  401,  402,  403,  404,  405,  406,  407,
   -1,   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,
  350,  419,  352,  353,  354,  355,  356,  357,  358,  359,
  360,  361,  362,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,
  380,  381,  382,   -1,  384,  385,   -1,   -1,  388,  389,
  390,  391,  256,   -1,   -1,  395,  396,   -1,   -1,   -1,
  400,  401,  402,  403,  404,  405,  406,  407,   -1,   -1,
   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,  419,
  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
  362,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
  256,   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,
  402,  403,  404,  405,  406,  407,   -1,   -1,   -1,   -1,
   -1,  345,   -1,   -1,   -1,   -1,  350,  419,  352,  353,
  354,  355,  356,  357,  358,  359,  360,  361,  362,   -1,
   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,
   -1,   -1,  256,   -1,  388,  389,  390,  391,  262,   -1,
   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,  405,  406,  407,   -1,   -1,   -1,   -1,   -1,  345,
   -1,   -1,   -1,   -1,  350,  419,  352,  353,  354,  355,
  356,  357,  358,  359,  360,  361,  362,   -1,  302,   -1,
   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,
  376,   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,
  396,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,  405,
  406,  407,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
  374,   -1,   -1,  377,   -1,  379,  380,   -1,   -1,   -1,
  384,  385,   -1,   -1,  388,  389,  390,  391,  392,  393,
  394,  395,  396,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  418,  419,   -1,   -1,   -1,   -1,
   -1,   -1,  426,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,  435,  345,   -1,   -1,   -1,   -1,  350,   -1,  352,
  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,  391,  256,
   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  404,  405,  406,  407,   -1,   -1,   -1,   -1,   -1,
  345,   -1,   -1,   -1,   -1,  350,  419,  352,  353,  354,
  355,  356,  357,  358,  359,  360,  361,  362,   -1,   -1,
   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,  374,
   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,  391,  256,   -1,   -1,
  395,  396,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  404,
  405,  406,  407,   -1,   -1,   -1,   -1,   -1,  345,   -1,
   -1,   -1,   -1,  350,  419,  352,  353,  354,  355,  356,
  357,  358,  359,  360,  361,  362,   -1,   -1,   -1,   -1,
  435,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,  391,  256,   -1,   -1,  395,  396,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,
  407,   -1,   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,
   -1,  350,  419,  352,  353,  354,  355,  356,  357,  358,
  359,  360,  361,  362,   -1,   -1,   -1,   -1,  435,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,
   -1,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,  391,  256,   -1,   -1,  395,  396,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,   -1,
   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,
  419,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  391,  256,   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  406,  407,   -1,   -1,   -1,
   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,  419,  352,
  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,
   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,  256,
   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  406,  407,   -1,   -1,   -1,   -1,   -1,
  345,   -1,   -1,   -1,   -1,  350,  419,  352,  353,  354,
  355,  356,  357,  358,  359,  360,  361,  362,   -1,   -1,
   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,  374,
   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  391,  256,   -1,   -1,
   -1,  396,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  406,  407,   -1,   -1,   -1,   -1,   -1,  345,   -1,
   -1,   -1,   -1,  350,  419,  352,  353,  354,  355,  356,
  357,  358,  359,  360,  361,  362,   -1,   -1,   -1,   -1,
  435,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  396,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,
  407,   -1,   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,
   -1,  350,  419,  352,  353,  354,  355,  356,  357,  358,
  359,  360,  361,  362,   -1,   -1,   -1,   -1,  435,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,
   -1,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  396,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,   -1,
   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,
  419,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,
  381,  382,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,  396,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,
   -1,   -1,  345,   -1,   -1,   -1,   -1,  350,  419,  352,
  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
  302,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,
   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  396,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,  435,  375,   -1,  377,  378,  379,  380,   -1,
  382,   -1,  384,  385,   -1,  387,  388,  389,  390,  391,
   -1,  393,  394,  395,  396,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,   -1,   -1,
  256,   -1,  424,   -1,  426,   -1,   -1,  429,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,  288,  289,  290,  291,   -1,  293,  294,   -1,
   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,  304,   -1,
  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,  321,   -1,  323,  324,   -1,
   -1,  327,   -1,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,   -1,   -1,   -1,
  346,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
  366,  367,  368,  369,   -1,   -1,   -1,  373,   -1,   -1,
   -1,  377,   -1,   -1,   -1,   -1,  382,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,  256,  398,  399,   -1,   -1,   -1,   -1,   -1,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,  423,  424,  425,
  426,  286,   -1,  288,  289,  290,  291,   -1,  293,  294,
   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,   -1,   -1,   -1,
   -1,  346,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,  373,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,  382,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,  256,  398,  399,   -1,   -1,   -1,   -1,   -1,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,  423,  424,
  425,  426,  286,   -1,  288,  289,  290,  291,   -1,  293,
  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,
  304,   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,   -1,  323,
  324,   -1,   -1,  327,   -1,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,   -1,
   -1,   -1,  346,  347,   -1,   -1,  350,  351,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,  366,  367,  368,  369,   -1,   -1,   -1,  373,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,  382,  383,
  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,   -1,   -1,  256,  398,  399,   -1,   -1,   -1,   -1,
   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,   -1,  423,
  424,  425,  426,  286,   -1,  288,  289,  290,  291,   -1,
  293,  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,
  303,  304,   -1,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,   -1,
  323,  324,   -1,   -1,  327,   -1,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,   -1,
   -1,   -1,   -1,  346,  347,   -1,   -1,  350,  351,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,  366,  367,  368,  369,   -1,   -1,   -1,
  373,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,  382,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,  256,  398,  399,   -1,   -1,   -1,
   -1,   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
  423,  424,  425,  426,  286,   -1,  288,  289,  290,  291,
   -1,  293,  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,
   -1,  303,  304,   -1,  306,  307,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,
   -1,  323,  324,   -1,   -1,  327,   -1,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,   -1,   -1,   -1,  346,  347,   -1,   -1,  350,  351,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,  366,  367,  368,  369,   -1,   -1,
   -1,  373,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
  382,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,  256,  398,  399,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,  423,  424,  425,  426,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,
   -1,   -1,   -1,  304,   -1,  306,  307,  308,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  321,   -1,  323,  324,   -1,   -1,  327,   -1,   -1,  330,
   -1,  332,   -1,  334,  335,  336,  337,   -1,  339,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,  350,
  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,  366,  367,  368,  369,   -1,
   -1,   -1,  373,  374,   -1,   -1,  377,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,  256,  398,  399,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,  423,  424,  425,  426,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
   -1,   -1,   -1,   -1,  304,   -1,  306,  307,  308,   -1,
  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,   -1,  323,  324,   -1,   -1,  327,   -1,   -1,
  330,   -1,  332,   -1,  334,  335,  336,  337,   -1,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,
  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,  366,  367,  368,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,  264,  265,   -1,  267,  398,  399,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,  423,  424,  425,  426,   -1,   -1,  299,
   -1,   -1,   -1,   -1,  304,   -1,  306,  307,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  321,   -1,  323,  324,   -1,   -1,  327,   -1,   -1,
  330,   -1,  332,   -1,  334,  335,  336,  337,   -1,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,
  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,  366,  367,  368,  369,
   -1,   -1,   -1,  373,  374,   -1,   -1,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,   -1,   -1,  256,  398,  399,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,  423,  424,  425,  426,  286,   -1,   -1,
  289,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,
  299,   -1,   -1,   -1,   -1,  304,   -1,  306,  307,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  321,   -1,  323,  324,  325,   -1,  327,   -1,
   -1,  330,   -1,  332,   -1,  334,  335,  336,  337,   -1,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,
   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,  367,  368,
  369,   -1,   -1,   -1,  373,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,  256,  398,
  399,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,  423,  424,  425,  426,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  299,   -1,   -1,   -1,   -1,  304,   -1,  306,  307,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  321,   -1,  323,  324,   -1,   -1,  327,
   -1,   -1,  330,   -1,  332,   -1,  334,  335,  336,  337,
   -1,  339,   -1,   -1,   -1,  343,   -1,   -1,   -1,  347,
   -1,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,  367,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,   -1,  392,   -1,  264,  265,   -1,  267,
  398,  399,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,  423,  424,  425,  426,   -1,
   -1,  299,   -1,   -1,   -1,   -1,  304,   -1,  306,  307,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  321,   -1,  323,  324,   -1,   -1,  327,
   -1,   -1,  330,   -1,  332,   -1,  334,  335,  336,  337,
   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,
   -1,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,  367,
  368,  369,   -1,   -1,   -1,  373,   -1,   -1,   -1,  377,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,  256,
  398,  399,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  423,  424,  425,  426,  286,
   -1,   -1,  289,   -1,   -1,   -1,  434,   -1,   -1,   -1,
   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,   -1,  306,
  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  321,   -1,  323,  324,   -1,   -1,
  327,   -1,   -1,  330,   -1,  332,   -1,  334,  335,  336,
  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  347,   -1,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,
  367,  368,  369,   -1,   -1,   -1,  373,   -1,   -1,   -1,
  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
  256,  398,  399,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,  423,  424,  425,  426,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,   -1,
  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,   -1,
   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,  335,
  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,  256,  398,  399,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,  423,  424,  425,
  426,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,  256,  398,  399,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  423,  424,
  425,  426,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,
  304,   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,
  324,   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,
  334,  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,   -1,   -1,  256,  398,  399,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,  423,
  424,  425,  426,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,
   -1,  304,   -1,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,
  323,  324,   -1,   -1,  327,   -1,   -1,  330,   -1,  332,
   -1,  334,  335,  336,  337,   -1,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  347,   -1,   -1,  350,  351,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,  366,  367,  368,  369,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,  256,  398,  399,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
  423,  424,  425,  426,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,
   -1,   -1,  304,   -1,  306,  307,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,
   -1,  323,  324,   -1,   -1,  327,   -1,   -1,  330,   -1,
  332,   -1,  334,  335,  336,  337,   -1,  339,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,  350,  351,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,  366,  367,  368,  369,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  423,  424,  425,  426,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,  285,
   -1,   -1,  288,  289,   -1,   -1,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,  301,   -1,   -1,  304,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,  314,  315,
  316,  317,   -1,   -1,   -1,  321,  322,  323,   -1,   -1,
  326,  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,  335,
  336,   -1,  338,  339,   -1,  341,  342,  343,  344,   -1,
   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,  368,  267,   -1,   -1,  270,  271,  374,  375,
   -1,  275,  276,  277,   -1,  279,   -1,  383,   -1,   -1,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,
  304,   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,  424,  323,
  324,   -1,   -1,  327,   -1,   -1,  330,  256,  332,   -1,
  334,  335,  336,  337,   -1,  339,  265,   -1,  267,   -1,
   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  289,  365,  366,  367,  368,   -1,  265,   -1,  267,   -1,
  299,  270,   -1,  377,   -1,  304,  275,   -1,   -1,  308,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  289,   -1,  321,   -1,  323,   -1,   -1,   -1,  327,   -1,
  299,   -1,  256,   -1,   -1,  304,  335,  336,   -1,  308,
  339,  265,   -1,  267,  343,   -1,  270,   -1,   -1,  423,
  424,  275,  321,   -1,  323,  279,   -1,   -1,  327,   -1,
   -1,   -1,   -1,   -1,   -1,  289,  335,  336,   -1,   -1,
  339,   -1,   -1,   -1,  343,  299,  375,   -1,   -1,   -1,
  304,  256,   -1,   -1,  308,   -1,   -1,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  321,   -1,  323,
  275,   -1,   -1,  327,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  335,  336,   -1,  289,  339,   -1,   -1,   -1,  343,
   -1,   -1,   -1,   -1,  299,  424,  256,   -1,   -1,  304,
   -1,   -1,   -1,  308,   -1,  265,  262,  267,   -1,   -1,
  270,   -1,   -1,   -1,   -1,  275,  321,   -1,  323,  279,
   -1,   -1,  327,   -1,   -1,  424,   -1,   -1,   -1,  289,
  335,  336,   -1,   -1,  339,  265,   -1,  267,  343,  299,
  270,   -1,   -1,  273,  304,  275,  302,  277,  308,  279,
   -1,  281,  282,  283,   -1,   -1,   -1,   -1,  288,  289,
   -1,  321,  292,  323,   -1,  295,   -1,  327,   -1,  299,
  424,   -1,   -1,   -1,  304,  335,  336,   -1,  308,  339,
   -1,   -1,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  321,   -1,  323,   -1,   -1,   -1,  327,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  335,  336,   -1,   -1,  339,
   -1,  341,   -1,  343,   -1,   -1,   -1,   -1,  348,  424,
   -1,  377,  378,  379,  380,  381,   -1,   -1,  384,  385,
   -1,   -1,  388,  389,  390,  391,  392,  393,  394,  395,
  396,   -1,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  424,  261,   -1,   -1,   -1,  265,
  426,  267,   -1,  429,  270,   -1,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,  285,
   -1,   -1,  288,  289,  424,   -1,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,  301,   -1,   -1,  304,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,  314,  315,
  316,  317,   -1,   -1,   -1,  321,  322,  323,   -1,   -1,
  326,  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,  335,
  336,   -1,  338,  339,   -1,  341,  342,  343,  344,   -1,
   -1,   -1,  348,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,  368,  279,   -1,  281,  282,  283,  374,  285,
   -1,   -1,  288,  289,   -1,   -1,  292,  383,   -1,  295,
   -1,   -1,   -1,  299,  300,  301,   -1,   -1,  304,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,  314,  315,
  316,  317,   -1,   -1,   -1,  321,  322,  323,   -1,   -1,
  326,  327,  328,   -1,   -1,   -1,   -1,   -1,  424,  335,
  336,   -1,  338,  339,   -1,  341,  342,  343,  344,   -1,
   -1,   -1,  348,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,  368,  279,   -1,  281,  282,  283,  374,  285,
   -1,   -1,  288,  289,   -1,   -1,  292,  383,   -1,  295,
   -1,   -1,   -1,  299,  300,  301,   -1,   -1,  304,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,  314,  315,
  316,  317,   -1,   -1,   -1,  321,  322,  323,   -1,   -1,
  326,  327,  328,   -1,   -1,   -1,   -1,   -1,  424,  335,
  336,   -1,  338,  339,   -1,  341,  342,  343,  344,   -1,
   -1,   -1,  348,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,  368,  279,   -1,  281,  282,  283,   -1,  285,
   -1,   -1,  288,  289,   -1,   -1,  292,  383,   -1,  295,
   -1,   -1,   -1,  299,  300,  301,   -1,   -1,  304,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,  314,  315,
  316,  317,   -1,   -1,   -1,  321,  322,  323,   -1,   -1,
  326,  327,  328,   -1,   -1,   -1,   -1,   -1,  424,  335,
  336,   -1,  338,  339,   -1,  341,  342,  343,  344,  261,
   -1,   -1,  348,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  368,  285,   -1,   -1,  288,  289,  374,   -1,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,  301,
   -1,   -1,  304,  261,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,  314,  315,  316,  317,   -1,   -1,   -1,  321,
  322,  323,   -1,   -1,  326,  327,  328,  285,   -1,   -1,
   -1,   -1,   -1,  335,  336,   -1,  338,  339,  424,  341,
  342,  343,  344,  301,   -1,   -1,  348,   -1,  306,   -1,
   -1,   -1,   -1,  311,   -1,   -1,  314,  315,  316,  317,
   -1,   -1,   -1,   -1,  322,   -1,  368,   -1,  326,   -1,
   -1,   -1,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  368,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  424,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,  310,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,  424,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,  378,   -1,  380,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,  310,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,  380,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,  343,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,  374,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,  373,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,  373,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  347,   -1,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  264,
  265,   -1,  267,  398,  399,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,  263,   -1,
  265,   -1,  267,  398,  399,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,   -1,   -1,  288,  289,   -1,   -1,  292,  423,  424,
  295,  426,   -1,   -1,  299,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  320,  321,   -1,  323,   -1,
   -1,   -1,  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,
  335,  336,   -1,   -1,  339,   -1,  341,   -1,  343,  264,
  265,   -1,  267,  348,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,  370,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,  383,  304,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,  324,
   -1,   -1,  327,   -1,   -1,  330,   -1,  332,   -1,  334,
  335,  336,  337,   -1,  339,   -1,   -1,   -1,  343,  424,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,  377,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,   -1,   -1,   -1,   -1,  288,
  289,   -1,   -1,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  423,  424,
   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,  327,  328,
   -1,   -1,   -1,   -1,   -1,   -1,  335,  336,   -1,   -1,
  339,   -1,  341,  265,  343,  267,   -1,   -1,  270,  348,
  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,   -1,   -1,   -1,   -1,  288,  289,   -1,   -1,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
   -1,   -1,  304,   -1,  383,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,
   -1,  323,   -1,   -1,   -1,  327,  328,   -1,   -1,   -1,
   -1,   -1,   -1,  335,  336,   -1,   -1,  339,   -1,  341,
   -1,  343,  265,   -1,  267,  424,  348,  270,   -1,   -1,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,   -1,   -1,   -1,   -1,  288,  289,   -1,   -1,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,  308,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,  321,   -1,
  323,  279,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,  289,  335,  336,   -1,   -1,  339,   -1,  341,   -1,
  343,  299,  424,   -1,   -1,  348,  304,   -1,   -1,   -1,
  308,   -1,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,  327,
   -1,   -1,  330,   -1,   -1,   -1,   -1,  335,  336,   -1,
  383,  339,   -1,   -1,  265,  343,  267,   -1,   -1,  270,
   -1,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,  289,   -1,
  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,  299,  279,
   -1,  424,   -1,  304,   -1,  306,   -1,  308,   -1,  289,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
  321,   -1,  323,   -1,  304,   -1,  327,  328,  308,   -1,
   -1,   -1,   -1,   -1,  335,  336,   -1,   -1,  339,   -1,
   -1,  321,  343,  323,   -1,   -1,  424,  327,  265,   -1,
  267,   -1,   -1,  270,   -1,  335,  336,   -1,  275,  339,
   -1,   -1,  279,  343,   -1,   -1,   -1,   -1,   -1,  265,
   -1,  267,  289,   -1,  270,   -1,   -1,   -1,   -1,  275,
   -1,   -1,  299,  279,   -1,   -1,   -1,  304,   -1,  369,
   -1,  308,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  299,  321,   -1,  323,   -1,  304,   -1,
  327,   -1,  308,   -1,   -1,   -1,   -1,   -1,  335,  336,
   -1,   -1,  339,  424,   -1,  321,  343,  323,  265,   -1,
  267,  327,   -1,  270,   -1,   -1,   -1,   -1,  275,  335,
  336,   -1,  279,  339,  424,   -1,   -1,  343,   -1,   -1,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  378,  299,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,  308,   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,
  376,   -1,  270,   -1,  321,   -1,  323,  275,   -1,   -1,
  327,  279,   -1,   -1,   -1,   -1,   -1,   -1,  335,  336,
   -1,  289,  339,  265,   -1,  267,  343,  424,  270,   -1,
   -1,  299,   -1,  275,   -1,   -1,  304,  279,   -1,   -1,
  308,   -1,   -1,   -1,   -1,   -1,   -1,  289,  424,   -1,
   -1,   -1,   -1,  321,   -1,  323,   -1,  299,   -1,  327,
   -1,   -1,  304,   -1,   -1,   -1,  308,  335,  336,   -1,
   -1,  339,  265,   -1,  267,  343,   -1,  270,   -1,  321,
   -1,  323,  275,   -1,   -1,  327,  279,   -1,   -1,   -1,
   -1,   -1,   -1,  335,  336,   -1,  289,  339,   -1,   -1,
   -1,  343,   -1,   -1,   -1,   -1,  299,  424,   -1,   -1,
   -1,  304,   -1,   -1,   -1,  308,   -1,   -1,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  321,   -1,
  323,  275,   -1,   -1,  327,  279,   -1,   -1,   -1,   -1,
   -1,   -1,  335,  336,   -1,  289,  339,  265,   -1,  267,
  343,   -1,  270,   -1,   -1,  299,  424,  275,   -1,   -1,
  304,  279,   -1,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,  289,   -1,   -1,   -1,   -1,   -1,  321,   -1,  323,
   -1,  299,  424,  327,   -1,   -1,  304,   -1,   -1,   -1,
  308,  335,  336,   -1,   -1,  339,  265,   -1,  267,  343,
   -1,  270,   -1,  321,   -1,  323,  275,   -1,   -1,  327,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  335,  336,   -1,
  289,  339,   -1,   -1,   -1,  343,   -1,   -1,   -1,   -1,
  299,  424,   -1,   -1,   -1,  304,   -1,  261,   -1,  308,
   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,  272,   -1,
  270,   -1,  321,  277,  323,  275,   -1,  281,  327,  279,
   -1,  285,   -1,   -1,   -1,   -1,  335,  336,   -1,  289,
  339,   -1,   -1,  297,  343,   -1,  300,  301,   -1,  299,
  424,   -1,  306,   -1,  304,   -1,   -1,  311,  308,   -1,
  314,  315,  316,  317,   -1,   -1,   -1,   -1,  322,   -1,
   -1,  321,  326,  323,  328,   -1,  424,  327,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  335,  336,   -1,  342,  339,
  344,   -1,  261,  343,  348,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,  277,   -1,
   -1,  261,  281,   -1,  368,   -1,  285,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,
   -1,  300,  301,   -1,   -1,  285,   -1,  306,   -1,   -1,
   -1,   -1,  311,   -1,   -1,  314,  315,  316,  317,   -1,
   -1,  301,   -1,  322,   -1,   -1,  306,  326,  261,  328,
  263,  311,   -1,   -1,  314,  315,  316,  317,   -1,  338,
  320,   -1,  322,  342,  424,  344,  326,   -1,   -1,  348,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,  338,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,  301,  368,
   -1,   -1,   -1,  306,   -1,  374,  375,   -1,  311,   -1,
   -1,  314,  315,  316,  317,   -1,   -1,   -1,  368,  322,
   -1,   -1,   -1,  326,  374,  375,   -1,   -1,   -1,  261,
   -1,   -1,   -1,   -1,   -1,  338,   -1,   -1,   -1,  342,
  272,  344,   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,  300,  301,
   -1,  374,  375,   -1,  306,   -1,   -1,   -1,   -1,  311,
   -1,   -1,  314,  315,  316,  317,   -1,   -1,   -1,   -1,
  322,   -1,   -1,  261,  326,   -1,  328,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,   -1,  338,   -1,   -1,  277,
  342,   -1,  344,  281,   -1,   -1,  348,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,
   -1,   -1,  300,  301,   -1,   -1,  368,   -1,  306,   -1,
   -1,   -1,  374,  311,   -1,   -1,  314,  315,  316,  317,
   -1,   -1,  285,   -1,  322,   -1,   -1,   -1,  326,   -1,
  328,   -1,  261,   -1,   -1,   -1,   -1,   -1,  301,   -1,
  338,   -1,   -1,  306,  342,   -1,  344,   -1,  311,   -1,
  348,  314,  315,  316,  317,   -1,  285,   -1,   -1,  322,
   -1,   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  301,   -1,   -1,  338,  374,  306,   -1,  342,
   -1,  344,  311,   -1,   -1,  314,  315,  316,  317,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,  326,  261,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,  371,  338,
   -1,  374,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,  263,   -1,   -1,   -1,  301,  368,
   -1,  370,  371,  306,   -1,  374,   -1,   -1,  311,   -1,
   -1,  314,  315,  316,  317,   -1,  285,  320,   -1,  322,
   -1,   -1,   -1,  326,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,  301,   -1,   -1,  338,   -1,  306,   -1,  342,
   -1,  344,  311,   -1,   -1,  314,  315,  316,  317,   -1,
   -1,  285,   -1,  322,   -1,   -1,   -1,  326,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  301,   -1,  338,
   -1,  374,  306,  342,  261,  344,   -1,  311,   -1,   -1,
  314,  315,  316,  317,   -1,  272,   -1,   -1,  322,   -1,
  277,   -1,  326,  261,  281,  263,   -1,   -1,  285,  368,
   -1,   -1,   -1,   -1,  338,  374,   -1,   -1,  342,   -1,
  344,   -1,   -1,  300,  301,   -1,   -1,  285,   -1,  306,
   -1,   -1,   -1,   -1,  311,   -1,   -1,  314,  315,  316,
  317,   -1,  261,  301,  368,  322,  370,  371,  306,  326,
   -1,  328,   -1,  311,   -1,   -1,  314,  315,  316,  317,
   -1,  338,  320,   -1,  322,  342,  285,  344,  326,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,   -1,  301,   -1,  342,   -1,  344,  306,   -1,   -1,
   -1,  368,  311,   -1,   -1,  314,  315,  316,  317,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,  326,   -1,   -1,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  };

#line 6414 "as-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static ActionScriptParser ()
{
	oob_stack = new Stack<object> ();
}

public ActionScriptParser (SeekableStreamReader reader, CompilationSourceFile file)
	: this (reader, file, file.Compiler.Report)
{
}

public ActionScriptParser (SeekableStreamReader reader, CompilationSourceFile file, Report report)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file);

#if FULL_AST
	lbag = new LocationsBag ();
#else
	lbag = null;
#endif
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.SUPER:
		return "super";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return ".<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTENDS = 284;
  public const int EXTERN = 285;
  public const int FALSE = 286;
  public const int FINALLY = 287;
  public const int FIXED = 288;
  public const int FLOAT = 289;
  public const int FOR = 290;
  public const int FOREACH = 291;
  public const int FUNCTION = 292;
  public const int GOTO = 293;
  public const int IF = 294;
  public const int IMPLICIT = 295;
  public const int IMPLEMENTS = 296;
  public const int IMPORT = 297;
  public const int IN = 298;
  public const int INT = 299;
  public const int INTERFACE = 300;
  public const int INTERNAL = 301;
  public const int IS = 302;
  public const int LOCK = 303;
  public const int LONG = 304;
  public const int NAMESPACE = 305;
  public const int NEW = 306;
  public const int NULL = 307;
  public const int OBJECT = 308;
  public const int OPERATOR = 309;
  public const int OUT = 310;
  public const int OVERRIDE = 311;
  public const int PACKAGE = 312;
  public const int PARAMS = 313;
  public const int PRIVATE = 314;
  public const int PROTECTED = 315;
  public const int PUBLIC = 316;
  public const int READONLY = 317;
  public const int REF = 318;
  public const int RETURN = 319;
  public const int REMOVE = 320;
  public const int SBYTE = 321;
  public const int SEALED = 322;
  public const int SHORT = 323;
  public const int SIZEOF = 324;
  public const int STACKALLOC = 325;
  public const int STATIC = 326;
  public const int STRING = 327;
  public const int STRUCT = 328;
  public const int SWITCH = 329;
  public const int THIS = 330;
  public const int THROW = 331;
  public const int TRUE = 332;
  public const int TRY = 333;
  public const int TYPEOF = 334;
  public const int UINT = 335;
  public const int ULONG = 336;
  public const int UNCHECKED = 337;
  public const int UNSAFE = 338;
  public const int USHORT = 339;
  public const int USING = 340;
  public const int VAR = 341;
  public const int VIRTUAL = 342;
  public const int VOID = 343;
  public const int VOLATILE = 344;
  public const int WHERE = 345;
  public const int WHILE = 346;
  public const int ARGLIST = 347;
  public const int PARTIAL = 348;
  public const int ARROW = 349;
  public const int FROM = 350;
  public const int FROM_FIRST = 351;
  public const int JOIN = 352;
  public const int ON = 353;
  public const int EQUALS = 354;
  public const int SELECT = 355;
  public const int GROUP = 356;
  public const int BY = 357;
  public const int LET = 358;
  public const int ORDERBY = 359;
  public const int ASCENDING = 360;
  public const int DESCENDING = 361;
  public const int INTO = 362;
  public const int INTERR_NULLABLE = 363;
  public const int EXTERN_ALIAS = 364;
  public const int REFVALUE = 365;
  public const int REFTYPE = 366;
  public const int MAKEREF = 367;
  public const int ASYNC = 368;
  public const int AWAIT = 369;
  public const int GET = 370;
  public const int SET = 371;
  public const int LAST_KEYWORD = 372;
  public const int OPEN_BRACE = 373;
  public const int CLOSE_BRACE = 374;
  public const int OPEN_BRACKET = 375;
  public const int CLOSE_BRACKET = 376;
  public const int OPEN_PARENS = 377;
  public const int CLOSE_PARENS = 378;
  public const int DOT = 379;
  public const int COMMA = 380;
  public const int COLON = 381;
  public const int SEMICOLON = 382;
  public const int TILDE = 383;
  public const int PLUS = 384;
  public const int MINUS = 385;
  public const int BANG = 386;
  public const int ASSIGN = 387;
  public const int OP_LT = 388;
  public const int OP_GT = 389;
  public const int BITWISE_AND = 390;
  public const int BITWISE_OR = 391;
  public const int STAR = 392;
  public const int PERCENT = 393;
  public const int DIV = 394;
  public const int CARRET = 395;
  public const int INTERR = 396;
  public const int DOUBLE_COLON = 397;
  public const int OP_INC = 398;
  public const int OP_DEC = 399;
  public const int OP_SHIFT_LEFT = 400;
  public const int OP_SHIFT_RIGHT = 401;
  public const int OP_LE = 402;
  public const int OP_GE = 403;
  public const int OP_EQ = 404;
  public const int OP_NE = 405;
  public const int OP_AND = 406;
  public const int OP_OR = 407;
  public const int OP_MULT_ASSIGN = 408;
  public const int OP_DIV_ASSIGN = 409;
  public const int OP_MOD_ASSIGN = 410;
  public const int OP_ADD_ASSIGN = 411;
  public const int OP_SUB_ASSIGN = 412;
  public const int OP_SHIFT_LEFT_ASSIGN = 413;
  public const int OP_SHIFT_RIGHT_ASSIGN = 414;
  public const int OP_AND_ASSIGN = 415;
  public const int OP_XOR_ASSIGN = 416;
  public const int OP_OR_ASSIGN = 417;
  public const int OP_PTR = 418;
  public const int OP_COALESCING = 419;
  public const int OP_GENERICS_LT = 420;
  public const int OP_GENERICS_LT_DECL = 421;
  public const int OP_GENERICS_GT = 422;
  public const int LITERAL = 423;
  public const int IDENTIFIER = 424;
  public const int OPEN_PARENS_LAMBDA = 425;
  public const int OPEN_PARENS_CAST = 426;
  public const int GENERIC_DIMENSION = 427;
  public const int DEFAULT_COLON = 428;
  public const int OPEN_BRACKET_EXPR = 429;
  public const int EVAL_STATEMENT_PARSER = 430;
  public const int EVAL_COMPILATION_UNIT_PARSER = 431;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 432;
  public const int DOC_SEE = 433;
  public const int GENERATE_COMPLETION = 434;
  public const int COMPLETE_COMPLETION = 435;
  public const int UMINUS = 436;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
