// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

//#line 2 "as-parser.jay"
//ipt compiler
//
// as-parser.jay: The Parser for the ActionScr
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//			Ben Cooley		(bcooley@zynga.com) - ActionScript
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using Mono.CSharp;
using Linq = Mono.CSharp.Linq;
using Enum = Mono.CSharp.Enum;
using Attribute = Mono.CSharp.Attribute;
using Delegate = Mono.CSharp.Delegate;
using Nullable = Mono.CSharp.Nullable;

namespace Mono.ActionScript
{
	/// <summary>
	///    The ActionScript Parser
	/// </summary>
	public class ActionScriptParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		const string RootNs = "_root";
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
//#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static readonly string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_extern_alias_directives opt_using_directives",
    "outer_declaration : opt_extern_alias_directives opt_using_directives package_declaration opt_attributes",
    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "extern_alias_directives : extern_alias_directive",
    "extern_alias_directives : extern_alias_directives extern_alias_directive",
    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
    "extern_alias_directive : EXTERN_ALIAS error",
    "import_directives : import_directive",
    "import_directives : import_directives import_directive",
    "import_directive : import_package",
    "import_package : IMPORT namespace_or_type_expr DOT STAR SEMICOLON",
    "import_package : IMPORT typeof_type_expression SEMICOLON",
    "import_package : IMPORT IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
    "import_package : IMPORT error",
    "$$2 :",
    "$$3 :",
    "package_declaration : opt_attributes PACKAGE opt_package_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_package_type_declarations CLOSE_BRACE",
    "opt_package_name :",
    "opt_package_name : package_name",
    "package_name : IDENTIFIER",
    "package_name : package_name DOT IDENTIFIER",
    "package_name : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "opt_using_directives :",
    "opt_using_directives : import_directives",
    "opt_extern_alias_directives :",
    "opt_extern_alias_directives : extern_alias_directives",
    "opt_package_type_declarations :",
    "opt_package_type_declarations : package_type_declarations",
    "package_type_declarations : package_type_declaration",
    "package_type_declarations : package_type_declaration package_type_declaration",
    "package_type_declaration : type_declaration",
    "package_type_declaration : attribute_sections CLOSE_BRACE",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$4 :",
    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
    "$$5 :",
    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_target : error",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$6 :",
    "attribute : attribute_name $$6 opt_attribute_arguments",
    "attribute_name : namespace_or_type_expr",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "$$7 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : attributes_without_members",
    "class_member_declaration : error",
    "$$8 :",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$13 :",
    "constant_declaration : opt_attributes opt_modifiers CONST IDENTIFIER COLON type $$13 constant_initializer opt_constant_declarators SEMICOLON",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$14 :",
    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$15 :",
    "field_declaration : opt_attributes opt_modifiers VAR IDENTIFIER COLON member_type $$15 opt_field_initializer opt_field_declarators SEMICOLON",
    "$$16 :",
    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type error SEMICOLON",
    "opt_field_initializer :",
    "$$17 :",
    "opt_field_initializer : ASSIGN $$17 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$18 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
    "opt_fixed_field_declarators :",
    "opt_fixed_field_declarators : fixed_field_declarators",
    "fixed_field_declarators : fixed_field_declarator",
    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
    "$$19 :",
    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
    "fixed_field_size : OPEN_BRACKET error",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$20 :",
    "method_declaration : method_header $$20 method_body",
    "$$21 :",
    "$$22 :",
    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$22 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers FUNCTION_GET method_declaration_name OPEN_PARENS CLOSE_PARENS COLON member_type",
    "$$23 :",
    "method_header : opt_attributes opt_modifiers FUNCTION_SET method_declaration_name OPEN_PARENS $$23 opt_formal_parameter_list CLOSE_PARENS COLON member_type",
    "$$24 :",
    "$$25 :",
    "$$26 :",
    "method_header : opt_attributes opt_modifiers PARTIAL FUNCTION $$24 method_declaration_name OPEN_PARENS $$25 opt_formal_parameter_list CLOSE_PARENS COLON VOID $$26 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers FUNCTION modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS COLON member_type",
    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name error",
    "method_body : block",
    "method_body : SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : arglist_modifier COMMA error",
    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : arglist_modifier",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type",
    "fixed_parameter : attribute_sections error",
    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON error",
    "$$27 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type ASSIGN $$27 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "arglist_modifier : ARGLIST",
    "$$28 :",
    "$$29 :",
    "$$30 :",
    "property_declaration : opt_attributes opt_modifiers PROPERTY member_declaration_name COLON member_type $$28 OPEN_BRACE $$29 accessor_declarations $$30 CLOSE_BRACE",
    "$$31 :",
    "$$32 :",
    "$$33 :",
    "indexer_declaration : opt_attributes opt_modifiers INDEXER indexer_declaration_name COLON member_type OPEN_BRACKET $$31 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$32 accessor_declarations $$33 CLOSE_BRACE",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$34 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$34 accessor_body",
    "$$35 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$35 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$36 :",
    "$$37 :",
    "$$38 :",
    "$$39 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$36 type_declaration_name $$37 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$38 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$39 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : type_declaration",
    "$$40 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$40 operator_body",
    "operator_body : block",
    "operator_body : SEMICOLON",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$41 :",
    "operator_declarator : OPERATOR overloadable_operator OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS COLON operator_type",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "$$42 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS COLON type",
    "$$43 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR OPEN_PARENS $$43 opt_formal_parameter_list CLOSE_PARENS COLON type",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "$$44 :",
    "destructor_declaration : opt_attributes opt_modifiers FUNCTION TILDE $$44 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
    "$$45 :",
    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type $$45 opt_event_initializer opt_event_declarators SEMICOLON",
    "$$46 :",
    "$$47 :",
    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type OPEN_BRACE $$46 event_accessor_declarations $$47 CLOSE_BRACE",
    "opt_event_initializer :",
    "$$48 :",
    "opt_event_initializer : ASSIGN $$48 event_variable_initializer",
    "opt_event_declarators :",
    "opt_event_declarators : event_declarators",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_declarator : COMMA IDENTIFIER",
    "$$49 :",
    "event_declarator : COMMA IDENTIFIER ASSIGN $$49 event_variable_initializer",
    "$$50 :",
    "event_variable_initializer : $$50 variable_initializer",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$51 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$51 event_accessor_block",
    "$$52 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$52 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "attributes_without_members : attribute_sections CLOSE_BRACE",
    "$$53 :",
    "$$54 :",
    "$$55 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$53 OPEN_BRACE $$54 opt_enum_member_declarations $$55 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$56 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$56 ASSIGN constant_expression",
    "enum_member_declaration : attributes_without_members",
    "$$57 :",
    "$$58 :",
    "$$59 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$57 opt_formal_parameter_list CLOSE_PARENS $$58 opt_type_parameter_constraints_clauses $$59 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_expr : member_name",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "member_name : simple_name_expr",
    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
    "simple_name_expr : IDENTIFIER opt_type_argument_list",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$60 :",
    "type_declaration_name : IDENTIFIER $$60 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : VOID",
    "simple_type : type_expression",
    "simple_type : VOID",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_expr opt_nullable",
    "type_expression : namespace_or_type_expr pointer_stars",
    "type_expression : builtin_types opt_nullable",
    "type_expression : builtin_types pointer_stars",
    "type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : DECIMAL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : primary_expression_or_type",
    "primary_expression : literal",
    "primary_expression : array_creation_expression",
    "primary_expression : parenthesized_expression",
    "primary_expression : default_value_expression",
    "primary_expression : invocation_expression",
    "primary_expression : element_access",
    "primary_expression : this_access",
    "primary_expression : base_access",
    "primary_expression : post_increment_expression",
    "primary_expression : post_decrement_expression",
    "primary_expression : object_or_delegate_creation_expression",
    "primary_expression : anonymous_type_expression",
    "primary_expression : typeof_expression",
    "primary_expression : sizeof_expression",
    "primary_expression : checked_expression",
    "primary_expression : unchecked_expression",
    "primary_expression : pointer_member_access",
    "primary_expression : anonymous_method_expression",
    "primary_expression : undocumented_expressions",
    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
    "primary_expression_or_type : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
    "member_access : SUPER DOT IDENTIFIER opt_type_argument_list",
    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "member_access : primary_expression DOT GENERATE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
    "member_access : builtin_types DOT GENERATE_COMPLETION",
    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "invocation_expression : primary_expression open_parens_any argument_list error",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : GENERATE_COMPLETION",
    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA error",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
    "element_access : primary_expression OPEN_BRACKET_EXPR error",
    "expression_list : expression",
    "expression_list : expression_list COMMA expression",
    "expression_list : expression_list error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "base_access : SUPER OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$61 :",
    "new_expr_type : $$61 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
    "anonymous_type_parameter : IDENTIFIER",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "$$62 :",
    "typeof_expression : TYPEOF $$62 open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : unbound_type_name",
    "typeof_type_expression : error",
    "unbound_type_name : identifier_inside_body generic_dimension",
    "unbound_type_name : qualified_alias_member identifier_inside_body generic_dimension",
    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
    "unbound_type_name : namespace_or_type_expr DOT identifier_inside_body generic_dimension",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$63 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$63 block",
    "$$64 :",
    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$64 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$65 :",
    "anonymous_method_signature : OPEN_PARENS $$65 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : AWAIT prefixed_unary_expression",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS type",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression_or_error",
    "conditional_expression : null_coalescing_expression INTERR expression error",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "lambda_expression_body : lambda_expression_body_simple",
    "lambda_expression_body : block",
    "$$66 :",
    "lambda_expression_body_simple : $$66 expression_or_error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$67 :",
    "lambda_expression : IDENTIFIER ARROW $$67 lambda_expression_body",
    "$$68 :",
    "lambda_expression : ASYNC identifier_inside_body ARROW $$68 lambda_expression_body",
    "$$69 :",
    "$$70 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$69 opt_lambda_parameter_list CLOSE_PARENS ARROW $$70 lambda_expression_body",
    "$$71 :",
    "$$72 :",
    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$71 opt_lambda_parameter_list CLOSE_PARENS ARROW $$72 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : query_expression",
    "non_assignment_expression : ARGLIST",
    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
    "constant_expression : expression",
    "boolean_expression : expression",
    "$$73 :",
    "$$74 :",
    "$$75 :",
    "$$76 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$73 type_declaration_name $$74 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$75 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$76 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "modifier : VOLATILE",
    "modifier : UNSAFE",
    "modifier : ASYNC",
    "opt_class_extends :",
    "opt_class_extends : EXTENDS base_type_name",
    "opt_class_extends : EXTENDS base_type_name error",
    "opt_class_implements :",
    "opt_class_implements : IMPLEMENTS type_list",
    "opt_class_implements : IMPLEMENTS type_list error",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "opt_type_parameter_variance :",
    "opt_type_parameter_variance : type_parameter_variance",
    "type_parameter_variance : OUT",
    "type_parameter_variance : IN",
    "$$77 :",
    "block : OPEN_BRACE $$77 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$78 :",
    "block_prepared : OPEN_BRACE $$78 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$79 :",
    "labeled_statement : identifier_inside_body COLON $$79 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : primary_expression_or_type opt_nullable",
    "variable_type_simple : primary_expression_or_type pointer_stars",
    "variable_type_simple : builtin_types opt_nullable",
    "variable_type_simple : builtin_types pointer_stars",
    "variable_type_simple : VOID pointer_stars",
    "variable_type_simple : VOID",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "identifier_inside_body : AWAIT",
    "$$80 :",
    "block_variable_declaration : VAR identifier_inside_body COLON variable_type $$80 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
    "$$81 :",
    "block_variable_declaration : VAR identifier_inside_body $$81 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
    "$$82 :",
    "block_variable_declaration : CONST identifier_inside_body COLON variable_type $$82 const_variable_initializer opt_const_declarators SEMICOLON",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "expression_statement : statement_expression CLOSE_BRACE",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "if_statement : IF open_parens_any boolean_expression error",
    "$$83 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$83 opt_switch_sections CLOSE_BRACE",
    "switch_statement : SWITCH open_parens_any expression error",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "$$84 :",
    "switch_section : switch_labels $$84 statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : CASE constant_expression error",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "do_statement : DO embedded_statement error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
    "$$85 :",
    "for_statement : FOR open_parens_any $$85 for_statement_cont",
    "$$86 :",
    "for_statement_cont : opt_for_initializer SEMICOLON $$86 for_condition_and_iterator_part embedded_statement",
    "for_statement_cont : error",
    "$$87 :",
    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$87 for_iterator_part",
    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
    "close_parens_close_brace : CLOSE_PARENS",
    "close_parens_close_brace : CLOSE_BRACE",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$88 :",
    "for_initializer : variable_type identifier_inside_body $$88 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOR_EACH open_parens_any type error",
    "$$89 :",
    "foreach_statement : FOR_EACH open_parens_any VAR identifier_inside_body COLON type IN expression CLOSE_PARENS $$89 embedded_statement",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "continue_statement : CONTINUE error",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "return_statement : RETURN error",
    "throw_statement : THROW opt_expression SEMICOLON",
    "throw_statement : THROW error",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "catch_clause : CATCH block",
    "$$90 :",
    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$90 block_prepared",
    "catch_clause : CATCH open_parens_any error",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$91 :",
    "unsafe_statement : UNSAFE $$91 block",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
    "lock_statement : LOCK open_parens_any expression error",
    "$$92 :",
    "$$93 :",
    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$92 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$93 embedded_statement",
    "$$94 :",
    "$$95 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$94 using_initialization CLOSE_PARENS $$95 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_statement : USING open_parens_any expression error",
    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
    "using_initialization : error",
    "using_or_fixed_variable_initializer :",
    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
    "query_expression : first_from_clause query_body",
    "query_expression : nested_from_clause query_body",
    "query_expression : first_from_clause COMPLETE_COMPLETION",
    "query_expression : nested_from_clause COMPLETE_COMPLETION",
    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
    "nested_from_clause : FROM identifier_inside_body IN expression",
    "nested_from_clause : FROM type identifier_inside_body IN expression",
    "$$96 :",
    "from_clause : FROM identifier_inside_body IN $$96 expression_or_error",
    "$$97 :",
    "from_clause : FROM type identifier_inside_body IN $$97 expression_or_error",
    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
    "query_body : select_or_group_clause opt_query_continuation",
    "query_body : query_body_clauses COMPLETE_COMPLETION",
    "query_body : query_body_clauses error",
    "query_body : error",
    "$$98 :",
    "select_or_group_clause : SELECT $$98 expression_or_error",
    "$$99 :",
    "$$100 :",
    "select_or_group_clause : GROUP $$99 expression_or_error $$100 BY expression_or_error",
    "query_body_clauses : query_body_clause",
    "query_body_clauses : query_body_clauses query_body_clause",
    "query_body_clause : from_clause",
    "query_body_clause : let_clause",
    "query_body_clause : where_clause",
    "query_body_clause : join_clause",
    "query_body_clause : orderby_clause",
    "$$101 :",
    "let_clause : LET identifier_inside_body ASSIGN $$101 expression_or_error",
    "$$102 :",
    "where_clause : WHERE $$102 expression_or_error",
    "$$103 :",
    "$$104 :",
    "$$105 :",
    "join_clause : JOIN identifier_inside_body IN $$103 expression_or_error ON $$104 expression_or_error EQUALS $$105 expression_or_error opt_join_into",
    "$$106 :",
    "$$107 :",
    "$$108 :",
    "join_clause : JOIN type identifier_inside_body IN $$106 expression_or_error ON $$107 expression_or_error EQUALS $$108 expression_or_error opt_join_into",
    "opt_join_into :",
    "opt_join_into : INTO identifier_inside_body",
    "$$109 :",
    "orderby_clause : ORDERBY $$109 orderings",
    "orderings : order_by",
    "$$110 :",
    "orderings : order_by COMMA $$110 orderings_then_by",
    "orderings_then_by : then_by",
    "$$111 :",
    "orderings_then_by : orderings_then_by COMMA $$111 then_by",
    "order_by : expression",
    "order_by : expression ASCENDING",
    "order_by : expression DESCENDING",
    "then_by : expression",
    "then_by : expression ASCENDING",
    "then_by : expression DESCENDING",
    "opt_query_continuation :",
    "$$112 :",
    "opt_query_continuation : INTO identifier_inside_body $$112 query_body",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER import_directives opt_COMPLETE_COMPLETION",
    "$$113 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$113 interactive_statement_list opt_COMPLETE_COMPLETION",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives package_declaration",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT THIS",
    "$$114 :",
    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$114 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$115 :",
    "opt_doc_method_sig : OPEN_PARENS $$115 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","EACH","ELSE","ENUM","EVENT",
    "EXPLICIT","EXTENDS","EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR",
    "FOR_EACH","FUNCTION","FUNCTION_GET","FUNCTION_SET","GOTO","IF",
    "IMPLICIT","IMPLEMENTS","IMPORT","IN","INDEXER","INT","INTERFACE",
    "INTERNAL","IS","LOCK","LONG","NAMESPACE","NEW","NULL","OBJECT",
    "OPERATOR","OUT","OVERRIDE","PACKAGE","PARAMS","PRIVATE","PROPERTY",
    "PROTECTED","PUBLIC","READONLY","REF","RETURN","REMOVE","SBYTE",
    "SEALED","SHORT","SIZEOF","STACKALLOC","STATIC","STRING","STRUCT",
    "SWITCH","THIS","THROW","TRUE","TRY","TYPEOF","UINT","ULONG",
    "UNCHECKED","UNSAFE","USHORT","USING","VAR","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","GET",
    "SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
//#line 396 "as-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
//#line 397 "as-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
//#line 416 "as-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
//#line 461 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 29:
  case_29();
  break;
case 42:
  case_42();
  break;
case 43:
  case_43();
  break;
case 51:
  case_51();
  break;
case 52:
  case_52();
  break;
case 53:
//#line 690 "as-parser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
//#line 720 "as-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 58:
  case_58();
  break;
case 59:
//#line 729 "as-parser.jay"
  { yyVal = "event"; }
  break;
case 60:
//#line 730 "as-parser.jay"
  { yyVal = "return"; }
  break;
case 61:
  case_61();
  break;
case 62:
//#line 747 "as-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 63:
  case_63();
  break;
case 64:
//#line 761 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 65:
  case_65();
  break;
case 67:
//#line 780 "as-parser.jay"
  { yyVal = null; }
  break;
case 68:
//#line 784 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 69:
//#line 789 "as-parser.jay"
  { yyVal = null; }
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
  case_72();
  break;
case 73:
  case_73();
  break;
case 74:
//#line 831 "as-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 76:
//#line 839 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 77:
  case_77();
  break;
case 78:
  case_78();
  break;
case 79:
//#line 865 "as-parser.jay"
  { yyVal = null; }
  break;
case 80:
//#line 869 "as-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 81:
//#line 873 "as-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 84:
//#line 885 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 85:
//#line 889 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 96:
  case_96();
  break;
case 97:
//#line 920 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 98:
//#line 924 "as-parser.jay"
  { 
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 99:
  case_99();
  break;
case 100:
  case_100();
  break;
case 101:
  case_101();
  break;
case 102:
  case_102();
  break;
case 103:
//#line 960 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 108:
//#line 1001 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 109:
//#line 1005 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 110:
  case_110();
  break;
case 111:
//#line 1021 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 112:
  case_112();
  break;
case 113:
  case_113();
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
  case_119();
  break;
case 120:
//#line 1099 "as-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[0+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 122:
  case_122();
  break;
case 123:
  case_123();
  break;
case 126:
//#line 1128 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 127:
//#line 1132 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 128:
  case_128();
  break;
case 129:
//#line 1145 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 130:
  case_130();
  break;
case 133:
//#line 1164 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 134:
//#line 1168 "as-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 135:
  case_135();
  break;
case 136:
//#line 1184 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 137:
  case_137();
  break;
case 138:
  case_138();
  break;
case 141:
  case_141();
  break;
case 142:
  case_142();
  break;
case 143:
  case_143();
  break;
case 144:
//#line 1271 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 145:
//#line 1275 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 146:
  case_146();
  break;
case 147:
  case_147();
  break;
case 148:
//#line 1355 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 149:
  case_149();
  break;
case 150:
//#line 1419 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 151:
  case_151();
  break;
case 152:
//#line 1429 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 153:
  case_153();
  break;
case 154:
  case_154();
  break;
case 155:
  case_155();
  break;
case 157:
  case_157();
  break;
case 158:
//#line 1505 "as-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 160:
  case_160();
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 164:
  case_164();
  break;
case 165:
  case_165();
  break;
case 166:
  case_166();
  break;
case 167:
//#line 1563 "as-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 168:
//#line 1567 "as-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 169:
  case_169();
  break;
case 170:
  case_170();
  break;
case 171:
  case_171();
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 174:
  case_174();
  break;
case 175:
//#line 1640 "as-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 176:
  case_176();
  break;
case 177:
//#line 1681 "as-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 179:
//#line 1689 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
//#line 1778 "as-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 190:
  case_190();
  break;
case 191:
  case_191();
  break;
case 192:
  case_192();
  break;
case 193:
  case_193();
  break;
case 194:
  case_194();
  break;
case 195:
//#line 1830 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 196:
  case_196();
  break;
case 197:
//#line 1859 "as-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 198:
  case_198();
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 209:
  case_209();
  break;
case 210:
  case_210();
  break;
case 211:
//#line 2004 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 212:
  case_212();
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
//#line 2040 "as-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 219:
//#line 2052 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 220:
//#line 2056 "as-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 221:
//#line 2063 "as-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 222:
//#line 2067 "as-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 227:
//#line 2075 "as-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 228:
//#line 2083 "as-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 229:
//#line 2089 "as-parser.jay"
  {
	  }
  break;
case 230:
  case_230();
  break;
case 232:
//#line 2125 "as-parser.jay"
  { yyVal = null; }
  break;
case 234:
  case_234();
  break;
case 235:
//#line 2141 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 236:
  case_236();
  break;
case 238:
//#line 2187 "as-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 239:
//#line 2188 "as-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 240:
//#line 2189 "as-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 241:
//#line 2190 "as-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 242:
//#line 2191 "as-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 243:
//#line 2192 "as-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 244:
//#line 2194 "as-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 245:
//#line 2195 "as-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 246:
//#line 2197 "as-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 247:
//#line 2198 "as-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 248:
//#line 2199 "as-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 249:
//#line 2200 "as-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 250:
//#line 2201 "as-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 251:
//#line 2202 "as-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 252:
//#line 2203 "as-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 253:
//#line 2204 "as-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 254:
//#line 2205 "as-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 255:
//#line 2206 "as-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 256:
//#line 2207 "as-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 257:
//#line 2208 "as-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 258:
//#line 2209 "as-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 259:
//#line 2210 "as-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 260:
//#line 2217 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 261:
  case_261();
  break;
case 262:
//#line 2236 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 263:
  case_263();
  break;
case 264:
  case_264();
  break;
case 265:
  case_265();
  break;
case 266:
  case_266();
  break;
case 267:
  case_267();
  break;
case 268:
  case_268();
  break;
case 269:
  case_269();
  break;
case 270:
  case_270();
  break;
case 271:
  case_271();
  break;
case 272:
  case_272();
  break;
case 274:
//#line 2491 "as-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 275:
  case_275();
  break;
case 278:
//#line 2508 "as-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 279:
//#line 2512 "as-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 280:
  case_280();
  break;
case 281:
//#line 2525 "as-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 282:
  case_282();
  break;
case 283:
  case_283();
  break;
case 284:
//#line 2550 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 287:
  case_287();
  break;
case 288:
  case_288();
  break;
case 289:
  case_289();
  break;
case 290:
  case_290();
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 306:
//#line 2712 "as-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 310:
  case_310();
  break;
case 311:
  case_311();
  break;
case 313:
//#line 2771 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 314:
  case_314();
  break;
case 315:
//#line 2790 "as-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 316:
  case_316();
  break;
case 318:
  case_318();
  break;
case 320:
  case_320();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 328:
//#line 2885 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 329:
  case_329();
  break;
case 330:
  case_330();
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 339:
  case_339();
  break;
case 340:
  case_340();
  break;
case 341:
  case_341();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 345:
//#line 3003 "as-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 346:
//#line 3010 "as-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 348:
  case_348();
  break;
case 350:
  case_350();
  break;
case 352:
  case_352();
  break;
case 354:
//#line 3048 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 355:
  case_355();
  break;
case 356:
//#line 3067 "as-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 357:
  case_357();
  break;
case 358:
//#line 3076 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 359:
//#line 3080 "as-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 360:
  case_360();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
//#line 3113 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 364:
//#line 3114 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 365:
//#line 3115 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 366:
//#line 3116 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 367:
//#line 3117 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 368:
//#line 3118 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 370:
//#line 3123 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 371:
//#line 3124 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 372:
//#line 3125 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 373:
//#line 3126 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 374:
//#line 3127 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 375:
//#line 3128 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 376:
//#line 3129 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 377:
//#line 3130 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 378:
//#line 3131 "as-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 399:
  case_399();
  break;
case 400:
  case_400();
  break;
case 404:
//#line 3178 "as-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
//#line 3182 "as-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
//#line 3183 "as-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 411:
  case_411();
  break;
case 412:
//#line 3216 "as-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 413:
  case_413();
  break;
case 414:
  case_414();
  break;
case 415:
  case_415();
  break;
case 416:
  case_416();
  break;
case 417:
//#line 3248 "as-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 418:
  case_418();
  break;
case 419:
//#line 3256 "as-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 420:
  case_420();
  break;
case 421:
  case_421();
  break;
case 422:
  case_422();
  break;
case 423:
//#line 3280 "as-parser.jay"
  { yyVal = null; }
  break;
case 425:
  case_425();
  break;
case 426:
  case_426();
  break;
case 427:
//#line 3303 "as-parser.jay"
  { yyVal = null; }
  break;
case 428:
//#line 3307 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 429:
  case_429();
  break;
case 430:
  case_430();
  break;
case 431:
  case_431();
  break;
case 432:
  case_432();
  break;
case 433:
//#line 3339 "as-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 434:
  case_434();
  break;
case 435:
  case_435();
  break;
case 436:
  case_436();
  break;
case 439:
//#line 3367 "as-parser.jay"
  { yyVal = null; }
  break;
case 441:
  case_441();
  break;
case 442:
  case_442();
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
//#line 3418 "as-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 450:
  case_450();
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 455:
  case_455();
  break;
case 456:
  case_456();
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
//#line 3513 "as-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 465:
//#line 3521 "as-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 466:
  case_466();
  break;
case 467:
  case_467();
  break;
case 468:
//#line 3541 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 469:
//#line 3548 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 476:
  case_476();
  break;
case 477:
//#line 3615 "as-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 478:
  case_478();
  break;
case 479:
  case_479();
  break;
case 482:
//#line 3642 "as-parser.jay"
  { yyVal = null; }
  break;
case 484:
  case_484();
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
  case_487();
  break;
case 488:
  case_488();
  break;
case 489:
  case_489();
  break;
case 493:
  case_493();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
//#line 3718 "as-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 497:
//#line 3722 "as-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 498:
//#line 3729 "as-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 499:
//#line 3733 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 503:
  case_503();
  break;
case 504:
//#line 3776 "as-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 505:
  case_505();
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 513:
  case_513();
  break;
case 514:
  case_514();
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
  case_517();
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
//#line 3890 "as-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 521:
//#line 3894 "as-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 522:
//#line 3898 "as-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 523:
//#line 3902 "as-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 524:
//#line 3909 "as-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 526:
//#line 3917 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 530:
//#line 3941 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 531:
//#line 3945 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 535:
//#line 3981 "as-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 536:
//#line 3985 "as-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 537:
//#line 3989 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 538:
//#line 3993 "as-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 539:
//#line 3997 "as-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 540:
//#line 4001 "as-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 542:
  case_542();
  break;
case 543:
  case_543();
  break;
case 544:
  case_544();
  break;
case 546:
  case_546();
  break;
case 547:
//#line 4033 "as-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 548:
  case_548();
  break;
case 549:
//#line 4042 "as-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 550:
//#line 4046 "as-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 552:
  case_552();
  break;
case 553:
  case_553();
  break;
case 555:
  case_555();
  break;
case 556:
  case_556();
  break;
case 557:
  case_557();
  break;
case 558:
  case_558();
  break;
case 560:
  case_560();
  break;
case 561:
  case_561();
  break;
case 563:
  case_563();
  break;
case 565:
  case_565();
  break;
case 567:
  case_567();
  break;
case 569:
  case_569();
  break;
case 571:
  case_571();
  break;
case 573:
  case_573();
  break;
case 575:
  case_575();
  break;
case 576:
  case_576();
  break;
case 577:
//#line 4175 "as-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 582:
  case_582();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 585:
  case_585();
  break;
case 586:
  case_586();
  break;
case 587:
  case_587();
  break;
case 588:
  case_588();
  break;
case 589:
  case_589();
  break;
case 590:
  case_590();
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
//#line 4270 "as-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 594:
  case_594();
  break;
case 597:
//#line 4285 "as-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 598:
  case_598();
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
//#line 4330 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
//#line 4344 "as-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 616:
//#line 4369 "as-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 617:
  case_617();
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 621:
//#line 4398 "as-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 622:
//#line 4411 "as-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 623:
  case_623();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
//#line 4453 "as-parser.jay"
  { yyVal = null; }
  break;
case 628:
//#line 4455 "as-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 629:
  case_629();
  break;
case 630:
//#line 4468 "as-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 632:
  case_632();
  break;
case 633:
  case_633();
  break;
case 634:
  case_634();
  break;
case 635:
  case_635();
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 649:
//#line 4579 "as-parser.jay"
  {
		current_type.AddBaseForPart ((FullNamedExpression) yyVals[0+yyTop]);
	 }
  break;
case 650:
  case_650();
  break;
case 652:
//#line 4593 "as-parser.jay"
  {
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 653:
  case_653();
  break;
case 655:
//#line 4607 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
  case_662();
  break;
case 663:
  case_663();
  break;
case 664:
//#line 4699 "as-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 665:
//#line 4703 "as-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 666:
//#line 4710 "as-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 667:
  case_667();
  break;
case 668:
//#line 4724 "as-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 669:
//#line 4728 "as-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 670:
  case_670();
  break;
case 671:
//#line 4753 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 674:
  case_674();
  break;
case 675:
  case_675();
  break;
case 680:
//#line 4797 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 681:
//#line 4801 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 683:
  case_683();
  break;
case 686:
//#line 4825 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 687:
//#line 4829 "as-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 716:
  case_716();
  break;
case 717:
  case_717();
  break;
case 718:
  case_718();
  break;
case 719:
  case_719();
  break;
case 720:
  case_720();
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
//#line 4973 "as-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 728:
//#line 4977 "as-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 729:
  case_729();
  break;
case 731:
  case_731();
  break;
case 732:
//#line 4998 "as-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
  case_737();
  break;
case 738:
  case_738();
  break;
case 739:
  case_739();
  break;
case 740:
  case_740();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 747:
  case_747();
  break;
case 750:
  case_750();
  break;
case 751:
  case_751();
  break;
case 752:
//#line 5118 "as-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 753:
//#line 5122 "as-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 758:
  case_758();
  break;
case 760:
  case_760();
  break;
case 761:
  case_761();
  break;
case 762:
  case_762();
  break;
case 763:
//#line 5167 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 764:
  case_764();
  break;
case 765:
//#line 5177 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 766:
//#line 5178 "as-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 767:
  case_767();
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 772:
  case_772();
  break;
case 773:
  case_773();
  break;
case 774:
  case_774();
  break;
case 775:
//#line 5253 "as-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 778:
  case_778();
  break;
case 780:
  case_780();
  break;
case 781:
  case_781();
  break;
case 782:
  case_782();
  break;
case 783:
//#line 5304 "as-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 784:
//#line 5308 "as-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
  case_787();
  break;
case 788:
  case_788();
  break;
case 789:
//#line 5342 "as-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 798:
  case_798();
  break;
case 799:
  case_799();
  break;
case 800:
//#line 5402 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 801:
  case_801();
  break;
case 802:
  case_802();
  break;
case 803:
  case_803();
  break;
case 804:
  case_804();
  break;
case 805:
//#line 5443 "as-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 806:
  case_806();
  break;
case 807:
  case_807();
  break;
case 808:
  case_808();
  break;
case 810:
//#line 5471 "as-parser.jay"
  { lexer.putback ('}'); }
  break;
case 811:
//#line 5475 "as-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 813:
  case_813();
  break;
case 814:
  case_814();
  break;
case 816:
//#line 5496 "as-parser.jay"
  { yyVal = null; }
  break;
case 818:
//#line 5501 "as-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 835:
  case_835();
  break;
case 836:
  case_836();
  break;
case 837:
  case_837();
  break;
case 838:
  case_838();
  break;
case 839:
  case_839();
  break;
case 840:
  case_840();
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 846:
//#line 5680 "as-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 854:
//#line 5729 "as-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 855:
  case_855();
  break;
case 856:
//#line 5748 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 857:
  case_857();
  break;
case 858:
//#line 5766 "as-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 859:
//#line 5773 "as-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 860:
  case_860();
  break;
case 861:
//#line 5783 "as-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 862:
  case_862();
  break;
case 863:
  case_863();
  break;
case 864:
  case_864();
  break;
case 865:
  case_865();
  break;
case 866:
  case_866();
  break;
case 867:
  case_867();
  break;
case 868:
  case_868();
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 873:
  case_873();
  break;
case 874:
//#line 5886 "as-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 875:
  case_875();
  break;
case 876:
  case_876();
  break;
case 877:
  case_877();
  break;
case 878:
  case_878();
  break;
case 879:
  case_879();
  break;
case 880:
  case_880();
  break;
case 881:
  case_881();
  break;
case 882:
  case_882();
  break;
case 883:
  case_883();
  break;
case 884:
//#line 5986 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 885:
  case_885();
  break;
case 886:
//#line 6001 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 889:
  case_889();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
//#line 6063 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 894:
  case_894();
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 897:
  case_897();
  break;
case 899:
  case_899();
  break;
case 905:
//#line 6117 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 906:
  case_906();
  break;
case 907:
//#line 6136 "as-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 908:
  case_908();
  break;
case 909:
  case_909();
  break;
case 910:
  case_910();
  break;
case 911:
  case_911();
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 914:
  case_914();
  break;
case 915:
  case_915();
  break;
case 916:
  case_916();
  break;
case 918:
//#line 6280 "as-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 919:
//#line 6287 "as-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 920:
  case_920();
  break;
case 922:
  case_922();
  break;
case 923:
  case_923();
  break;
case 925:
  case_925();
  break;
case 926:
  case_926();
  break;
case 927:
//#line 6333 "as-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 928:
  case_928();
  break;
case 929:
  case_929();
  break;
case 930:
//#line 6350 "as-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 931:
  case_931();
  break;
case 932:
  case_932();
  break;
case 934:
  case_934();
  break;
case 935:
  case_935();
  break;
case 938:
  case_938();
  break;
case 939:
  case_939();
  break;
case 947:
//#line 6472 "as-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 948:
//#line 6479 "as-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 949:
  case_949();
  break;
case 950:
  case_950();
  break;
case 951:
//#line 6496 "as-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 952:
//#line 6500 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 953:
  case_953();
  break;
case 954:
  case_954();
  break;
case 955:
  case_955();
  break;
case 956:
  case_956();
  break;
case 958:
//#line 6536 "as-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 960:
//#line 6544 "as-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 961:
//#line 6548 "as-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 962:
//#line 6555 "as-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 964:
  case_964();
  break;
case 965:
  case_965();
  break;
case 966:
  case_966();
  break;
//#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
//#line 404 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
//#line 418 "as-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
//#line 438 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
//#line 471 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
//#line 479 "as-parser.jay"
{
		var un = new UsingNamespace ((ATypeNameExpression) yyVals[-3+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]));
	  }

void case_19()
//#line 486 "as-parser.jay"
{
		var ut = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing (ut);
		
		lbag.AddLocation (ut, GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
//#line 493 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_21()
//#line 506 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_22()
//#line 519 "as-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = yyVals[0+yyTop] as MemberName;
		if (name == null) {
			name = new MemberName(RootNs);
		}
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
		var un = new UsingNamespace (new SimpleName (RootNs, GetLocation (yyVals[-2+yyTop])), GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing(un);
	  }

void case_23()
//#line 552 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_24()
//#line 557 "as-parser.jay"
{
	  	lbag.AddLocation (current_container, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[0+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_27()
//#line 571 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_28()
//#line 576 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_29()
//#line 581 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_42()
//#line 619 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_43()
//#line 637 "as-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_51()
//#line 670 "as-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }

void case_52()
//#line 675 "as-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_54()
//#line 692 "as-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_55()
//#line 700 "as-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_56()
//#line 707 "as-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }

void case_58()
//#line 725 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_61()
//#line 732 "as-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_63()
//#line 749 "as-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_65()
//#line 763 "as-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_70()
//#line 791 "as-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_71()
//#line 797 "as-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_72()
//#line 803 "as-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_73()
//#line 817 "as-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_77()
//#line 841 "as-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_78()
//#line 851 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_96()
//#line 905 "as-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_99()
//#line 928 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }

void case_100()
//#line 942 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_101()
//#line 947 "as-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_102()
//#line 953 "as-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_104()
//#line 967 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var mod = (Modifiers) yyVals[-4+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[0+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_105()
//#line 980 "as-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-3+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
		current_field = null;
	  }

void case_110()
//#line 1010 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_112()
//#line 1023 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_113()
//#line 1028 "as-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_116()
//#line 1043 "as-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[0+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[0+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-4+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_117()
//#line 1058 "as-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_118()
//#line 1071 "as-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_119()
//#line 1082 "as-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_122()
//#line 1105 "as-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_123()
//#line 1111 "as-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_128()
//#line 1137 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_130()
//#line 1147 "as-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_135()
//#line 1173 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_137()
//#line 1186 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_138()
//#line 1192 "as-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_141()
//#line 1202 "as-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_142()
//#line 1211 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = yyVals[0+yyTop] as Method;
		if (m != null) {
			async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
			current_type.AddMember (m);
		}
	  }

void case_143()
//#line 1223 "as-parser.jay"
{
	 	async_block = false;

		Method method = yyVals[-2+yyTop] as Method;
		if (method != null) {
			if (yyVals[0+yyTop] == null) {
				method.ParameterInfo.CheckParameters (method);
	
				if ((method.ModFlags & Modifiers.ASYNC) != 0) {
					report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
						method.GetSignatureForError ());
				}
			} else {
				method.Block = (ToplevelBlock) yyVals[0+yyTop];
				
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
						method.GetSignatureForError ());
				}
			}
		} else {
			Property.PropertyMethod propMethod = yyVals[-2+yyTop] as Property.PropertyMethod;
			
			if (yyVals[0+yyTop] != null) {
		  		propMethod.Block = (ToplevelBlock) yyVals[0+yyTop];			
		  	
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, propMethod.Block.StartLocation,
						"`{0}': interface members cannot have a definition", propMethod.GetSignatureForError ());
				}
			}
		}

		current_local_parameters = null;
		current_property = null;
	
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_146()
//#line 1277 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		
		if (current_container.Kind == MemberKind.Class && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], modifiers,
				     name, current_local_parameters, (Attributes) yyVals[-11+yyTop], yyVals[0+yyTop] != null);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
				     
		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_147()
//#line 1304 "as-parser.jay"
{
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-4+yyTop];
		var modifiers = (Modifiers) yyVals[-6+yyTop];
		
		if (current_container.Kind == MemberKind.Class && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		} else {
			current_property = null;
		}
		
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-7+yyTop]);
			current_type.AddMember (current_property);
			modifiers = (Modifiers) 0;
		} else {
			current_property.ModFlags |= modifiers & ~Modifiers.AccessibilityMask;
			if (!type.Equals(current_property.TypeExpression)) {
				report.Error (7002, GetLocation (yyVals[0+yyTop]), "Type of property getter and setter must match", current_property.GetSignatureForError ());
			}
			if (current_property.Set != null && !ModifiersExtensions.IsRestrictedModifier (modifiers & Modifiers.AccessibilityMask, current_property.ModFlags & Modifiers.AccessibilityMask)) {
				current_property.Set.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			}
		}
		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[0+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[-5+yyTop]), "Property accessor already defined");
		}
		
		current_property.Get = new Property.GetMethod (current_property,
			modifiers & Modifiers.AccessibilityMask, (Attributes) yyVals[-7+yyTop], GetLocation (yyVals[-5+yyTop]));
	  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_property.Get.ParameterInfo;
		yyVal = current_property.Get;
	  }

void case_149()
//#line 1357 "as-parser.jay"
{
		var void_type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-6+yyTop];
		var modifiers = (Modifiers) yyVals[-8+yyTop];
		var parameters = (ParametersCompiled) yyVals[-3+yyTop];
		
		if (current_container.Kind == MemberKind.Class && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		if (void_type.Type != null && void_type.Type.Kind != MemberKind.Void)
			report.Error (7003, GetLocation (yyVals[0+yyTop]), "Property setter function must not be of type void", current_property.GetSignatureForError ());					
			
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		} else {
			current_property = null;
		}

		FullNamedExpression type; 
		
		if (parameters.Count != 1 || parameters.FixedParameters.Length != parameters.Count) {
			report.Error (7001, GetLocation (yyVals[-3+yyTop]), "Property setter must have a single parameter", current_property.GetSignatureForError ());
			type = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[-3+yyTop]));
		} else {
			type = ((Parameter)parameters.FixedParameters[0]).TypeExpression;	
		}
				
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-9+yyTop]);
			current_type.AddMember (current_property);
			modifiers = (Modifiers) 0;			
		} else {
			current_property.ModFlags |= modifiers & ~Modifiers.AccessibilityMask;		
			if (!type.Equals(current_property.TypeExpression)) {
				report.Error (7002, GetLocation (yyVals[0+yyTop]), "Type of property getter and setter must match", current_property.GetSignatureForError ());
			}
			if (current_property.Get != null && !ModifiersExtensions.IsRestrictedModifier (modifiers & Modifiers.AccessibilityMask, current_property.ModFlags & Modifiers.AccessibilityMask)) {
				current_property.Get.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			}
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[-7+yyTop]), "Property accessor already defined");
		}
		
		current_property.Set = new Property.SetMethod (current_property, 
			modifiers & Modifiers.AccessibilityMask, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop], GetLocation (yyVals[-7+yyTop]));
	  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = parameters;
		yyVal = current_property.Set;
	  }

void case_151()
//#line 1422 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_153()
//#line 1431 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var modifiers = (Modifiers) yyVals[-12+yyTop];
		modifiers |= Modifiers.PARTIAL;

		if ((modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
			modifiers |= Modifiers.VIRTUAL;
			
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-2+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-13+yyTop], yyVals[0+yyTop] != null);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-11+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_154()
//#line 1461 "as-parser.jay"
{
		MemberName name = (MemberName) yyVals[-5+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-6+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-9+yyTop],
					    0, name, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop], false);

		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_155()
//#line 1480 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop], false);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_157()
//#line 1498 "as-parser.jay"
{ 
	  	/* method body.*/
	   	yyVal = null; 
	  }

void case_160()
//#line 1511 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_161()
//#line 1516 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_162()
//#line 1523 "as-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_163()
//#line 1529 "as-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_164()
//#line 1536 "as-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_165()
//#line 1546 "as-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_166()
//#line 1552 "as-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_169()
//#line 1569 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_170()
//#line 1577 "as-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_171()
//#line 1586 "as-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_172()
//#line 1611 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[0+yyTop], lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], lt.Location);
	  }

void case_173()
//#line 1616 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_174()
//#line 1626 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])), lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], l);
	  }

void case_176()
//#line 1642 "as-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-6+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, mod, (Attributes) yyVals[-7+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_180()
//#line 1691 "as-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_181()
//#line 1715 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_182()
//#line 1722 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_183()
//#line 1729 "as-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_184()
//#line 1742 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_185()
//#line 1747 "as-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_186()
//#line 1754 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_187()
//#line 1762 "as-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_188()
//#line 1767 "as-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_190()
//#line 1783 "as-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_191()
//#line 1793 "as-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_192()
//#line 1798 "as-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-2+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-6+yyTop],
			(MemberName) yyVals[-4+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-5+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_193()
//#line 1812 "as-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_194()
//#line 1819 "as-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_196()
//#line 1832 "as-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-7+yyTop], (Modifiers) yyVals[-9+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-10+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-8+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-6+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_198()
//#line 1861 "as-parser.jay"
{
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]));
		current_property = null;		
	  }

void case_203()
//#line 1880 "as-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_204()
//#line 1894 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_205()
//#line 1916 "as-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_206()
//#line 1937 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_207()
//#line 1964 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_209()
//#line 1986 "as-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_210()
//#line 1991 "as-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_212()
//#line 2006 "as-parser.jay"
{
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_213()
//#line 2013 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_214()
//#line 2027 "as-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_215()
//#line 2033 "as-parser.jay"
{
	    lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_230()
//#line 2091 "as-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			var modifiers = (Modifiers) yyVals[-3+yyTop];
			
			if (current_container.Kind == MemberKind.Class && 
				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
					modifiers |= Modifiers.VIRTUAL;			
		
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, modifiers, 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_234()
//#line 2131 "as-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_236()
//#line 2143 "as-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-7+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[0+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_261()
//#line 2219 "as-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-6+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_263()
//#line 2238 "as-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-6+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_264()
//#line 2253 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_265()
//#line 2259 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_266()
//#line 2398 "as-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_267()
//#line 2407 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-7+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-8+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_268()
//#line 2432 "as-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_269()
//#line 2446 "as-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_270()
//#line 2459 "as-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-5+yyTop], (MemberName) yyVals[-3+yyTop], (Attributes) yyVals[-6+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_271()
//#line 2467 "as-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_272()
//#line 2474 "as-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_275()
//#line 2493 "as-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_280()
//#line 2517 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_282()
//#line 2527 "as-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_283()
//#line 2536 "as-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_287()
//#line 2557 "as-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_288()
//#line 2562 "as-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_289()
//#line 2567 "as-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_290()
//#line 2575 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_291()
//#line 2587 "as-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_292()
//#line 2603 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_293()
//#line 2615 "as-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_294()
//#line 2631 "as-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_296()
//#line 2640 "as-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_297()
//#line 2652 "as-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_298()
//#line 2657 "as-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_299()
//#line 2669 "as-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_300()
//#line 2675 "as-parser.jay"
{
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_302()
//#line 2692 "as-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
		}
		yyVal = yyVals[0+yyTop];
	 }

void case_303()
//#line 2700 "as-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_308()
//#line 2718 "as-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_309()
//#line 2726 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_310()
//#line 2739 "as-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_311()
//#line 2747 "as-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_314()
//#line 2773 "as-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_316()
//#line 2792 "as-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_318()
//#line 2811 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_320()
//#line 2822 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_322()
//#line 2834 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_323()
//#line 2843 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_325()
//#line 2855 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_326()
//#line 2865 "as-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_327()
//#line 2871 "as-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_329()
//#line 2887 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_330()
//#line 2896 "as-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_332()
//#line 2907 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_333()
//#line 2916 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_334()
//#line 2921 "as-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_335()
//#line 2929 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_336()
//#line 2935 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_337()
//#line 2943 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_339()
//#line 2953 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_340()
//#line 2964 "as-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_341()
//#line 2970 "as-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_342()
//#line 2980 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop]);
  	  }

void case_343()
//#line 2985 "as-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, Variance.None);
  	  }

void case_348()
//#line 3019 "as-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_350()
//#line 3028 "as-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_352()
//#line 3037 "as-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_355()
//#line 3053 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_357()
//#line 3069 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_360()
//#line 3085 "as-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_361()
//#line 3091 "as-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_362()
//#line 3100 "as-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_399()
//#line 3164 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_400()
//#line 3168 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_411()
//#line 3209 "as-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_413()
//#line 3221 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_414()
//#line 3227 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_415()
//#line 3233 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_416()
//#line 3239 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_418()
//#line 3249 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_420()
//#line 3257 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_421()
//#line 3265 "as-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_422()
//#line 3270 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_425()
//#line 3286 "as-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_426()
//#line 3296 "as-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_429()
//#line 3312 "as-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_430()
//#line 3318 "as-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_431()
//#line 3323 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_432()
//#line 3331 "as-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_434()
//#line 3340 "as-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_435()
//#line 3348 "as-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_436()
//#line 3355 "as-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_441()
//#line 3373 "as-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_442()
//#line 3379 "as-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_443()
//#line 3388 "as-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_444()
//#line 3402 "as-parser.jay"
{
	  	lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_445()
//#line 3408 "as-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_450()
//#line 3429 "as-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_451()
//#line 3434 "as-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_452()
//#line 3439 "as-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_453()
//#line 3444 "as-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_455()
//#line 3456 "as-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_456()
//#line 3461 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_457()
//#line 3466 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_458()
//#line 3474 "as-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_459()
//#line 3480 "as-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_460()
//#line 3485 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_461()
//#line 3493 "as-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_462()
//#line 3499 "as-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_466()
//#line 3526 "as-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_467()
//#line 3531 "as-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_470()
//#line 3553 "as-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_471()
//#line 3566 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_472()
//#line 3578 "as-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_473()
//#line 3586 "as-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_474()
//#line 3593 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_475()
//#line 3600 "as-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_476()
//#line 3605 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_478()
//#line 3617 "as-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_479()
//#line 3625 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_484()
//#line 3648 "as-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_485()
//#line 3654 "as-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_486()
//#line 3663 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_487()
//#line 3669 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_488()
//#line 3675 "as-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_489()
//#line 3680 "as-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_493()
//#line 3695 "as-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_494()
//#line 3703 "as-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_495()
//#line 3708 "as-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_500()
//#line 3738 "as-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_501()
//#line 3745 "as-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_502()
//#line 3759 "as-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_503()
//#line 3765 "as-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_505()
//#line 3778 "as-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_508()
//#line 3789 "as-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_509()
//#line 3797 "as-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_510()
//#line 3803 "as-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_511()
//#line 3811 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_512()
//#line 3817 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_513()
//#line 3823 "as-parser.jay"
{
		var tne = (ATypeNameExpression) yyVals[-3+yyTop];
		if (tne.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (tne, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_514()
//#line 3835 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_515()
//#line 3845 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_516()
//#line 3856 "as-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_517()
//#line 3864 "as-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_518()
//#line 3872 "as-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_519()
//#line 3880 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_527()
//#line 3919 "as-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_528()
//#line 3927 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_532()
//#line 3947 "as-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_533()
//#line 3952 "as-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method is AnonymousMethodExpression) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_542()
//#line 4007 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_543()
//#line 4012 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_544()
//#line 4017 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_546()
//#line 4026 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_548()
//#line 4035 "as-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_552()
//#line 4052 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_553()
//#line 4057 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_555()
//#line 4066 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_556()
//#line 4071 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_557()
//#line 4076 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_558()
//#line 4081 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_560()
//#line 4090 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_561()
//#line 4095 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
//#line 4104 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
//#line 4113 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
//#line 4122 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
//#line 4131 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_571()
//#line 4140 "as-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_573()
//#line 4149 "as-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_575()
//#line 4160 "as-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
//#line 4165 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_578()
//#line 4177 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
//#line 4182 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
//#line 4187 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
//#line 4192 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
//#line 4197 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
//#line 4202 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
//#line 4207 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_585()
//#line 4212 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
//#line 4217 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
//#line 4222 "as-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
//#line 4230 "as-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_589()
//#line 4237 "as-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_590()
//#line 4251 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_591()
//#line 4257 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_592()
//#line 4263 "as-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_594()
//#line 4271 "as-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_598()
//#line 4287 "as-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_600()
//#line 4298 "as-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_601()
//#line 4306 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_602()
//#line 4312 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_603()
//#line 4317 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_604()
//#line 4323 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_606()
//#line 4332 "as-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_607()
//#line 4337 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_609()
//#line 4346 "as-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_610()
//#line 4351 "as-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_617()
//#line 4374 "as-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_618()
//#line 4379 "as-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_619()
//#line 4384 "as-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_623()
//#line 4413 "as-parser.jay"
{
		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
	  }

void case_624()
//#line 4424 "as-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_625()
//#line 4439 "as-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_626()
//#line 4445 "as-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_629()
//#line 4460 "as-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_632()
//#line 4474 "as-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_633()
//#line 4493 "as-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_634()
//#line 4501 "as-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_635()
//#line 4506 "as-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_636()
//#line 4511 "as-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_637()
//#line 4516 "as-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_638()
//#line 4521 "as-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_639()
//#line 4526 "as-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_640()
//#line 4531 "as-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_641()
//#line 4536 "as-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_642()
//#line 4541 "as-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_643()
//#line 4546 "as-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_644()
//#line 4551 "as-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_645()
//#line 4556 "as-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_646()
//#line 4561 "as-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_647()
//#line 4568 "as-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_650()
//#line 4581 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBaseForPart ((FullNamedExpression) yyVals[-1+yyTop]);
	  }

void case_653()
//#line 4595 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_656()
//#line 4612 "as-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_657()
//#line 4618 "as-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_658()
//#line 4637 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_659()
//#line 4643 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_660()
//#line 4653 "as-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_661()
//#line 4659 "as-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_662()
//#line 4685 "as-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_663()
//#line 4692 "as-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_667()
//#line 4712 "as-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_670()
//#line 4746 "as-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_672()
//#line 4758 "as-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_673()
//#line 4763 "as-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_674()
//#line 4772 "as-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_675()
//#line 4777 "as-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_683()
//#line 4804 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_716()
//#line 4868 "as-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_717()
//#line 4873 "as-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_718()
//#line 4878 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_719()
//#line 4886 "as-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_720()
//#line 4894 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_723()
//#line 4907 "as-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_724()
//#line 4923 "as-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_725()
//#line 4953 "as-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_726()
//#line 4964 "as-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_729()
//#line 4979 "as-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_731()
//#line 4988 "as-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_734()
//#line 5004 "as-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = Tokenizer.LocatedToken.Create ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_735()
//#line 5014 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_736()
//#line 5021 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_737()
//#line 5027 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration (new VarExpr (GetLocation(yyVals[-1+yyTop])), li);
	  }

void case_738()
//#line 5034 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_739()
//#line 5040 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_740()
//#line 5047 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_742()
//#line 5057 "as-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		/* TODO: lbag*/
	  }

void case_743()
//#line 5062 "as-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_747()
//#line 5080 "as-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_750()
//#line 5095 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_751()
//#line 5104 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_758()
//#line 5137 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_760()
//#line 5150 "as-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_761()
//#line 5155 "as-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_762()
//#line 5163 "as-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_764()
//#line 5169 "as-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_767()
//#line 5187 "as-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementErrorExpression (yyVals[0+yyTop] as Expression);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_768()
//#line 5200 "as-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_769()
//#line 5208 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_772()
//#line 5222 "as-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_773()
//#line 5231 "as-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_774()
//#line 5241 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_776()
//#line 5255 "as-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_777()
//#line 5261 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_778()
//#line 5271 "as-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_780()
//#line 5280 "as-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_781()
//#line 5287 "as-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_782()
//#line 5294 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new List<SwitchSection> ();
	  }

void case_785()
//#line 5313 "as-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_786()
//#line 5320 "as-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_787()
//#line 5330 "as-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_788()
//#line 5335 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_794()
//#line 5354 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_795()
//#line 5362 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_796()
//#line 5372 "as-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_797()
//#line 5377 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_798()
//#line 5382 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_799()
//#line 5392 "as-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }

void case_801()
//#line 5408 "as-parser.jay"
{
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }

void case_802()
//#line 5416 "as-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_803()
//#line 5429 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_804()
//#line 5437 "as-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_806()
//#line 5447 "as-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_807()
//#line 5456 "as-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_808()
//#line 5461 "as-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_813()
//#line 5481 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_814()
//#line 5488 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_822()
//#line 5512 "as-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_823()
//#line 5528 "as-parser.jay"
{
		report.Error (7006, GetLocation (yyVals[-3+yyTop]), "A for each statement must begin with a 'var' keyword");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_824()
//#line 5541 "as-parser.jay"
{
		start_block (GetLocation (yyVals[-7+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_825()
//#line 5551 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-5+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-10+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_832()
//#line 5574 "as-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_833()
//#line 5582 "as-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_834()
//#line 5587 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_835()
//#line 5595 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_836()
//#line 5601 "as-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_837()
//#line 5606 "as-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_838()
//#line 5614 "as-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_839()
//#line 5619 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_840()
//#line 5627 "as-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_841()
//#line 5632 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_842()
//#line 5640 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_843()
//#line 5656 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_847()
//#line 5682 "as-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_848()
//#line 5687 "as-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_849()
//#line 5692 "as-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_850()
//#line 5700 "as-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_851()
//#line 5707 "as-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [l.Count - 1].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_855()
//#line 5731 "as-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_857()
//#line 5750 "as-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_860()
//#line 5778 "as-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_862()
//#line 5788 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_863()
//#line 5796 "as-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_864()
//#line 5806 "as-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_865()
//#line 5816 "as-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_866()
//#line 5821 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_867()
//#line 5833 "as-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_868()
//#line 5843 "as-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_869()
//#line 5848 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_870()
//#line 5857 "as-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_871()
//#line 5865 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_873()
//#line 5876 "as-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_875()
//#line 5888 "as-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_876()
//#line 5899 "as-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_877()
//#line 5911 "as-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_878()
//#line 5922 "as-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_879()
//#line 5929 "as-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_880()
//#line 5938 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_881()
//#line 5946 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_882()
//#line 5961 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_883()
//#line 5969 "as-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_885()
//#line 5988 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_887()
//#line 6003 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_888()
//#line 6020 "as-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_889()
//#line 6035 "as-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_891()
//#line 6048 "as-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_892()
//#line 6053 "as-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_894()
//#line 6065 "as-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_895()
//#line 6072 "as-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_896()
//#line 6080 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_897()
//#line 6087 "as-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_899()
//#line 6099 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_906()
//#line 6119 "as-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_908()
//#line 6138 "as-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_909()
//#line 6148 "as-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_910()
//#line 6156 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_911()
//#line 6164 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_912()
//#line 6172 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_913()
//#line 6210 "as-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_914()
//#line 6218 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_915()
//#line 6226 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_916()
//#line 6234 "as-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_920()
//#line 6289 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_922()
//#line 6300 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_923()
//#line 6307 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_925()
//#line 6316 "as-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_926()
//#line 6323 "as-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_928()
//#line 6335 "as-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_929()
//#line 6340 "as-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_931()
//#line 6352 "as-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_932()
//#line 6357 "as-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_934()
//#line 6367 "as-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_935()
//#line 6383 "as-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_938()
//#line 6410 "as-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_type.AddMember (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_939()
//#line 6438 "as-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_949()
//#line 6481 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_950()
//#line 6487 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_953()
//#line 6502 "as-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_954()
//#line 6507 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_955()
//#line 6515 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_956()
//#line 6523 "as-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_964()
//#line 6561 "as-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_965()
//#line 6567 "as-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_966()
//#line 6576 "as-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

//#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   15,   19,   20,    8,   18,   18,   22,   22,   22,   23,
   23,   24,   24,    7,    7,    6,    6,   21,   21,   25,
   25,   26,   26,   27,   27,   27,   27,   27,    9,    9,
   10,   10,   35,   33,   38,   34,   34,   36,   36,   36,
   36,   37,   37,   42,   39,   40,   41,   41,   43,   43,
   43,   43,   43,   44,   44,   48,   45,   47,   50,   50,
   50,   51,   51,   52,   52,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   66,   68,   71,   72,
   73,   29,   29,   76,   54,   77,   77,   78,   78,   79,
   81,   75,   75,   80,   80,   86,   55,   90,   55,   55,
   85,   93,   85,   87,   87,   94,   94,   95,   96,   95,
   91,   91,   97,   97,   98,   99,   89,   89,   92,   92,
   92,  102,   56,  105,  106,  100,  100,  107,  100,  108,
  109,  110,  100,  100,  100,  101,  101,  104,  104,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  114,
  114,  117,  117,  117,  120,  117,  118,  118,  121,  121,
  122,  122,  122,  115,  115,  115,  123,  123,  123,  116,
  125,  127,  128,   57,  130,  131,  132,   59,  126,  126,
  126,  126,  126,  136,  133,  137,  134,  135,  135,  135,
  138,  139,  140,  142,   30,   30,  141,  141,  143,  143,
  144,  144,  144,  144,  144,  144,  144,  144,  147,   60,
  146,  146,  148,  148,  151,  145,  145,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  153,
  152,  154,  152,  152,  152,  155,   61,  157,   58,  160,
  161,   58,  156,  163,  156,  158,  158,  164,  164,  165,
  166,  165,  167,  162,  159,  159,  159,  159,  159,  171,
  168,  172,  169,  170,  170,   62,  174,  176,  177,   31,
  173,  173,  173,  175,  175,  175,  178,  178,  179,  180,
  179,  179,  181,  182,  183,   32,  184,  184,   16,   16,
  185,  185,  188,  187,  187,  189,  189,  191,   65,  124,
  103,  103,  129,  129,  192,  192,  192,  190,  190,  193,
  193,  194,  194,  196,  196,   84,   74,   74,   88,   88,
  119,  119,  149,  149,  197,  197,  197,  197,  197,  201,
  201,  202,  200,  200,  200,  200,  200,  200,  200,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  205,  205,
  205,  206,  206,  206,  226,  226,  227,  227,  228,  228,
  208,  208,  225,  225,  225,  225,  225,  225,  225,  225,
  210,  210,  231,  231,  232,  232,  233,  233,  235,  235,
  235,  236,  236,  236,  236,  236,  237,  237,  229,  229,
  230,  230,  230,  230,  230,  242,  242,  241,  241,  243,
  243,  243,  243,  244,  211,  211,  211,  240,  240,  240,
  245,  245,  246,  246,  212,  213,  213,  214,  215,  216,
  216,  207,  207,  207,  207,  207,  251,  247,  217,  252,
  252,  253,  253,  254,  254,  255,  255,  255,  255,  248,
  248,  198,  198,  250,  250,  256,  256,  249,  249,   83,
   83,  257,  257,  258,  218,   17,   17,   17,  259,  259,
  259,  259,  259,  260,  186,  219,  220,  221,  222,  262,
  223,  263,  223,  261,  261,  265,  264,  209,  266,  266,
  266,  266,  266,  267,  267,  267,  267,  267,  267,  267,
  268,  268,  268,  268,  269,  269,  269,  269,  269,  269,
  270,  270,  270,  271,  271,  271,  271,  271,  272,  272,
  272,  273,  273,  274,  274,  275,  275,  276,  276,  277,
  277,  278,  278,  279,  279,  279,  281,  281,  281,  281,
  281,  281,  281,  281,  281,  281,  281,  282,  282,  283,
  283,  283,  284,  284,  285,  285,  287,  286,  280,  280,
  289,  288,  290,  288,  291,  292,  288,  293,  294,  288,
   46,   46,  238,  238,  238,  238,  224,  224,  224,   82,
  296,  297,  298,  299,  300,   28,   64,   64,   63,   63,
  111,  111,  301,  301,  301,  301,  301,  301,  301,  301,
  301,  301,  301,  301,  301,  301,  301,   67,   67,   67,
   69,   69,   69,   70,   70,  302,  302,  303,  303,  304,
  304,  305,  305,  305,  305,  195,  195,  306,  306,  308,
  112,  309,  309,  311,  310,  307,  307,  312,  312,  313,
  313,  313,  313,  317,  317,  318,  318,  318,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  319,  319,  319,  319,  319,  319,  319,  319,  319,
  319,  319,  319,  319,  333,  333,  333,  333,  320,  334,
  316,  335,  335,  336,  336,  336,  336,  336,  336,  199,
  199,  337,   49,   49,  339,  314,  341,  314,  343,  314,
  338,  338,  338,  340,  340,  347,  347,  346,  346,  348,
  348,  342,  342,  344,  344,  349,  349,  350,  345,  345,
  345,  321,  321,  321,  332,  332,  351,  352,  352,  322,
  322,  353,  353,  353,  356,  354,  354,  355,  355,  357,
  357,  357,  360,  358,  359,  359,  361,  361,  361,  323,
  323,  323,  323,  362,  362,  363,  363,  363,  367,  364,
  370,  366,  366,  373,  369,  369,  372,  372,  374,  374,
  368,  368,  377,  376,  376,  371,  371,  375,  375,  379,
  378,  378,  365,  380,  365,  324,  324,  324,  324,  324,
  324,  381,  382,  382,  383,  383,  383,  384,  384,  385,
  385,  386,  386,  387,  387,  325,  325,  325,  325,  388,
  388,  390,  390,  389,  391,  389,  389,  326,  327,  392,
  330,  328,  328,  394,  395,  331,  397,  398,  329,  329,
  329,  396,  396,  393,  393,  295,  295,  295,  295,  399,
  399,  401,  401,  403,  402,  404,  402,  400,  400,  400,
  400,  400,  408,  406,  409,  410,  406,  405,  405,  411,
  411,  411,  411,  411,  416,  412,  417,  413,  418,  419,
  420,  414,  422,  423,  424,  414,  421,  421,  426,  415,
  425,  429,  425,  428,  431,  428,  427,  427,  427,  430,
  430,  430,  407,  432,  407,    3,    3,  433,    3,    3,
  434,  434,  239,  239,  234,  234,    5,  435,  435,  435,
  435,  439,  435,  435,  435,  435,  436,  436,  437,  440,
  437,  438,  438,  441,  441,  442,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    5,    3,    5,
    2,    0,    0,   10,    0,    1,    1,    3,    1,    0,
    1,    0,    1,    0,    1,    0,    1,    0,    1,    1,
    2,    1,    2,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    0,    3,    0,    6,    3,    1,    1,    1,
    1,    1,    3,    0,    3,    1,    0,    3,    0,    1,
    1,    3,    3,    1,    1,    0,    4,    4,    0,    1,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
    0,   17,    5,    0,   10,    0,    1,    1,    2,    3,
    0,    3,    1,    1,    1,    0,   10,    0,   10,    8,
    0,    0,    3,    0,    1,    1,    2,    2,    0,    5,
    0,    1,    1,    2,    3,    0,    4,    2,    1,    1,
    1,    0,    3,    0,    0,   12,    8,    0,   10,    0,
    0,    0,   14,   10,    5,    1,    1,    0,    1,    1,
    3,    3,    3,    5,    3,    5,    1,    1,    1,    1,
    3,    5,    2,    5,    0,    8,    0,    1,    1,    2,
    1,    1,    1,    4,    6,    4,    1,    2,    2,    1,
    0,    0,    0,   12,    0,    0,    0,   15,    1,    2,
    1,    2,    1,    0,    5,    0,    5,    1,    1,    1,
    0,    0,    0,    0,   16,    5,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    5,
    1,    1,    1,    1,    0,    8,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    8,    0,    8,    2,    2,    0,    9,    0,   10,    0,
    0,   11,    0,    0,    3,    0,    1,    1,    2,    2,
    0,    5,    0,    2,    2,    2,    1,    1,    1,    0,
    5,    0,    5,    1,    1,    2,    0,    0,    0,   12,
    0,    2,    2,    0,    1,    2,    1,    3,    2,    0,
    5,    1,    0,    0,    0,   13,    0,    1,    1,    3,
    1,    4,    2,    0,    3,    1,    3,    0,    3,    1,
    1,    3,    1,    2,    3,    4,    4,    0,    3,    1,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    2,    2,    2,    1,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    4,    4,    4,    3,    3,    4,    3,    4,
    4,    4,    0,    1,    3,    4,    0,    1,    1,    3,
    2,    3,    1,    2,    3,    2,    1,    1,    0,    1,
    1,    3,    3,    3,    2,    1,    1,    1,    1,    2,
    2,    4,    3,    1,    4,    4,    3,    1,    3,    2,
    1,    3,    1,    1,    1,    4,    3,    2,    2,    6,
    3,    7,    4,    3,    7,    3,    0,    2,    4,    1,
    2,    0,    1,    1,    3,    3,    1,    1,    1,    0,
    1,    1,    2,    2,    3,    1,    2,    0,    1,    2,
    4,    1,    3,    0,    5,    1,    1,    1,    2,    3,
    3,    4,    4,    1,    2,    4,    4,    4,    4,    0,
    4,    0,    5,    0,    1,    0,    4,    4,    1,    2,
    2,    4,    2,    1,    2,    2,    2,    2,    2,    2,
    1,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    1,    3,    3,    1,    3,    3,    3,    3,    1,    3,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    1,
    3,    1,    3,    1,    5,    4,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    3,    3,
    2,    1,    0,    1,    1,    1,    0,    2,    1,    1,
    0,    4,    0,    5,    0,    0,    7,    0,    0,    8,
    1,    1,    1,    1,    1,    1,    6,    4,    4,    1,
    1,    0,    0,    0,    0,   16,    0,    1,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    2,    3,
    0,    2,    3,    0,    1,    1,    2,    4,    3,    1,
    3,    1,    3,    1,    1,    0,    1,    1,    1,    0,
    4,    1,    1,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    4,    1,    2,    2,    2,    2,    2,    2,    1,    1,
    2,    1,    1,    1,    0,    8,    0,    6,    0,    8,
    0,    2,    1,    0,    1,    0,    1,    1,    2,    2,
    4,    0,    2,    0,    1,    1,    2,    4,    1,    5,
    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,
    1,    5,    7,    4,    0,    8,    4,    0,    1,    1,
    2,    1,    0,    3,    1,    2,    3,    3,    1,    1,
    1,    1,    1,    5,    4,    7,    3,    6,    0,    4,
    0,    5,    1,    0,    4,    2,    2,    2,    1,    1,
    0,    1,    0,    5,    1,    0,    1,    0,    1,    1,
    1,    3,    4,    0,   11,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    3,    4,    3,    3,    2,    3,
    2,    4,    3,    0,    1,    3,    4,    5,    3,    1,
    2,    0,    1,    2,    0,    7,    3,    2,    2,    0,
    3,    5,    4,    0,    0,   10,    0,    0,    9,    5,
    4,    2,    1,    0,    2,    2,    2,    2,    2,    4,
    5,    4,    5,    0,    5,    0,    6,    3,    2,    2,
    2,    1,    0,    3,    0,    0,    6,    1,    2,    1,
    1,    1,    1,    1,    0,    5,    0,    3,    0,    0,
    0,   12,    0,    0,    0,   13,    0,    2,    0,    3,
    1,    0,    4,    1,    0,    4,    1,    2,    2,    1,
    2,    2,    0,    0,    4,    2,    3,    0,    4,    2,
    2,    3,    0,    1,    1,    1,    2,    2,    2,    4,
    3,    0,    7,    4,    4,    3,    1,    3,    0,    0,
    4,    0,    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  936,    0,    0,  940,    0,
    0,   15,   17,  365,  371,  378,  366,  368,    0,  367,
    0,  374,  376,  363,    0,  370,  372,  364,  375,  377,
  373,  328,  957,    0,  369,  947,    0,   10,    1,    0,
    0,    0,   12,    0,  769,    0,    0,    0,    0,    0,
    0,    0,    0,  406,    0,    0,    0,    0,    0,    0,
    0,  404,    0,    0,    0,  465,    0,  405,    0,  504,
    0,  860,    0,    0,    0,  616,    0,    0,    0,    0,
    0,    0,    0,  670,    0,  719,    0,    0,    0,    0,
    0,    0,    0,    0,  403,    0,  605,    0,  768,    0,
  702,    0,    0,    0,  379,  380,  381,    0,  383,  384,
  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  401,  402,  612,  534,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  613,  611,  614,  615,  686,  688,    0,  684,  687,  703,
  705,  706,  707,  708,  709,  710,  711,  712,  713,  714,
  704,    0,  770,  771,  790,  791,  792,  793,  826,  827,
  828,  829,  830,  831,    0,    0,    0,    0,    0,  734,
    0,    0,    0,    0,  344,  319,    0,  321,  506,    0,
    0,    0,  944,   16,  937,    0,    0,  243,  242,  239,
  244,  245,  238,  257,  256,  249,  250,  246,  248,  247,
  251,  240,  241,  252,  253,  259,  258,  254,  255,    0,
    0,  960,    0,  949,    0,  948,    3,   53,    0,    0,
    0,   51,   13,    0,    0,    0,  832,  407,  408,  858,
    0,  733,    0,  834,  833,    0,  526,  520,  525,  718,
  767,  689,  716,  715,  717,  690,  691,  692,  693,  694,
  695,  696,  697,  698,  699,  700,  701,    0,    0,    0,
  799,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  839,    0,    0,    0,    0,  845,    0,    0,
    0,  841,    0,    0,    0,  859,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  347,    0,    0,    0,
    0,    0,    0,    0,  608,    0,    0,    0,  382,  533,
    0,    0,  531,  535,  536,  530,  540,  539,  537,  538,
  601,  515,    0,  400,  399,    0,    0,    0,    0,    0,
  720,    0,    0,    0,  468,  469,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  939,  685,  765,  766,  892,  907,    0,
    0,  893,  895,    0,  919,  878,  876,  900,    0,    0,
  898,  901,  902,  903,  904,  879,  877,  942,    0,  732,
  359,    0,    0,  323,  318,    0,  355,  356,   19,  514,
  509,    0,    0,  354,    0,  357,  358,    0,    0,    0,
  956,    0,  329,    0,    0,    0,  958,    0,    6,    0,
   52,  467,    0,  463,  464,    0,    0,  461,    0,    0,
    0,    0,    0,  797,    0,  764,  762,  763,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  620,    0,  837,
  835,  621,    0,    0,  489,    0,    0,    0,  480,    0,
  484,  494,  496,    0,  476,    0,    0,    0,    0,    0,
  471,    0,  474,    0,  478,  349,  838,    0,    0,  840,
  849,    0,    0,    0,  850,    0,    0,  861,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  541,    0,    0,  522,    0,  603,  683,    0,    0,  678,
  680,  681,  682,  411,  412,    0,  326,    0,  182,  181,
  183,    0,    0,    0,    0,  351,    0,  588,    0,    0,
  843,    0,    0,  416,    0,  419,    0,  417,    0,  457,
    0,    0,    0,    0,    0,  446,  449,    0,    0,  441,
  448,  447,    0,  577,  578,  579,  580,  581,  582,  583,
  584,  585,  587,  586,  542,  544,  543,  549,  550,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  573,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  891,  890,    0,  899,    0,
  889,  731,    0,    0,    0,    0,  320,  510,  493,    0,
  954,  955,  343,    0,    0,  340,    0,    0,  179,    0,
    0,  964,  950,  952,   61,   59,   60,    0,    0,   54,
    0,    0,   62,   64,   29,   27,   22,    0,  415,    0,
  466,    0,  517,  739,  528,  169,  190,    0,    0,    0,
  159,    0,    0,    0,  170,  521,    0,  728,  726,  727,
  724,  725,  864,  723,  803,    0,  821,  800,    0,  812,
    0,    0,  823,  836,  774,    0,  863,    0,    0,  479,
    0,  495,  497,    0,    0,  433,    0,    0,  429,    0,
    0,  458,    0,  499,  473,    0,    0,  141,  500,  139,
  140,  502,    0,  516,  777,    0,  854,    0,  847,    0,
  851,  508,    0,    0,  518,  871,    0,  867,  735,  743,
    0,    0,  795,    0,    0,  882,    0,  880,    0,    0,
  618,  619,    0,    0,    0,  672,  673,  671,  679,  596,
  602,  595,    0,    0,  325,  591,    0,    0,    0,  532,
  842,  721,  420,  414,  418,  413,  519,  456,  455,  454,
  451,  450,    0,  445,  409,  410,  421,  422,    0,  576,
    0,  600,  599,  908,  884,    0,  909,    0,  894,  896,
  905,    0,  920,    0,  888,  934,   20,   18,  322,  513,
  512,  669,  668,    0,  667,    0,  339,  966,  180,  961,
    0,    0,   55,    0,    0,    0,    0,    0,   81,   80,
    0,  462,    0,    0,    0,    0,  173,  527,    0,    0,
    0,    0,    0,  813,  801,    0,    0,    0,  862,  486,
  485,  436,    0,    0,  945,  946,  425,  431,    0,  434,
    0,  460,    0,    0,    0,    0,    0,  775,  857,    0,
  848,    0,  505,  870,    0,    0,    0,  759,  742,    0,
    0,    0,  748,  794,  883,  881,    0,  523,    0,  604,
  598,  327,  590,  589,  606,  453,    0,  444,  443,  442,
  575,    0,  886,    0,  913,    0,    0,  928,  929,  922,
    0,  342,  341,  965,    0,    0,   63,   57,    0,   65,
   23,   28,   78,    0,    0,  188,  189,    0,    0,    0,
    0,  162,  171,  163,  165,  798,    0,    0,    0,    0,
    0,  822,    0,    0,  435,  437,  438,  432,  426,  430,
    0,  491,    0,  459,  470,  424,  503,  501,    0,  853,
    0,  873,    0,    0,    0,    0,    0,  738,  749,  617,
  609,    0,  452,  885,    0,    0,    0,    0,  906,    0,
  935,  953,    0,    0,    0,   70,   71,   74,   75,    0,
  753,  114,  115,    0,    0,    0,  756,    0,  186,    0,
    0,    0,  796,  875,    0,    0,    0,  817,    0,    0,
    0,  773,  475,  472,  782,    0,  789,    0,    0,  780,
    0,  785,  855,  872,  868,    0,    0,    0,    0,  607,
  887,  910,    0,  897,    0,    0,  924,    0,   76,   68,
    0,    0,    0,  740,  757,  174,    0,    0,  166,  164,
  865,  814,  802,  810,  809,  804,  806,    0,    0,  776,
  781,    0,  786,    0,    0,  736,    0,  751,  610,    0,
  914,  931,  932,  925,   56,    0,   72,   73,    0,    0,
  175,  185,    0,    0,  824,  788,  787,    0,  674,  856,
  869,  760,    0,    0,    0,   77,    0,    0,    0,   39,
    0,   42,   44,   45,   46,   47,   48,  758,    0,  866,
  805,    0,    0,  819,    0,    0,  911,    0,  926,  638,
  644,  636,  633,  643,  637,  635,  634,  641,  639,  640,
  646,  642,  645,  647,    0,    0,  631,   43,   24,   41,
  176,  808,  807,  825,    0,    0,  915,    0,    0,  628,
    0,  632,  675,    0,    0,    0,  346,    0,  622,    0,
    0,    0,  912,    0,    0,    0,  297,    0,  216,    0,
  103,    0,  918,  916,  313,  303,  302,    0,  623,  212,
   98,    0,  298,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  314,    0,    0,  312,  299,    0,  307,  362,
    0,    0,    0,    0,    0,    0,    0,  296,    0,    0,
  650,    0,  360,    0,  624,    0,  656,  213,   99,  315,
    0,    0,  308,  653,    0,    0,    0,  657,    0,    0,
    0,    0,   31,  300,  361,  659,    0,    0,    0,  100,
  316,  311,  664,    0,  665,  662,    0,  660,   96,    0,
   94,    0,    0,   84,   86,   87,   88,   89,   90,   91,
   92,   93,   95,  142,    0,  228,  221,  222,  223,  224,
  225,  226,  227,    0,    0,  219,    0,    0,    0,    0,
  625,   85,    0,    0,  214,  220,    0,  663,  661,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  229,  237,    0,  157,  143,  156,    0,    0,
  101,    0,    0,  331,  330,    0,    0,    0,  265,    0,
    0,  266,    0,    0,    0,    0,  264,    0,  333,    0,
    0,    0,    0,    0,    0,  150,    0,  626,  215,    0,
    0,    0,    0,    0,    0,  262,    0,    0,  155,  144,
    0,    0,  148,  260,    0,  334,    0,  235,    0,    0,
    0,  232,  231,  230,  102,  104,  335,    0,    0,    0,
    0,  332,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  191,  116,    0,    0,  270,    0,  336,  337,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  195,
    0,    0,    0,  151,  113,  111,    0,    0,  274,    0,
    0,  120,    0,    0,    0,    0,    0,  147,    0,    0,
    0,    0,  192,  122,    0,    0,    0,    0,    0,    0,
  108,  289,    0,  271,    0,    0,  283,    0,    0,    0,
  278,    0,  138,    0,    0,    0,    0,  133,  267,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  126,    0,  112,    0,  105,  109,    0,    0,    0,  285,
    0,  286,  275,    0,    0,  269,  279,  263,    0,    0,
  119,  134,  145,  154,  149,  261,    0,    0,  236,  233,
  203,    0,  193,    0,    0,  123,    0,  117,  127,    0,
  110,  290,  292,  272,    0,    0,  284,  281,  137,  135,
    0,  196,    0,    0,  200,  202,  129,    0,    0,    0,
  283,  146,    0,  204,  206,  194,    0,  152,  294,  295,
  291,  293,  282,  197,    0,    0,  130,    0,    0,  210,
  209,  208,  205,  207,  153,  198,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   49,    9,   50,   10,   11,   51,  239,  678,  419,
   12,   13,   52,   22,   23,  314,  193,  667,  837, 1000,
 1109,  668, 1539,  835, 1110, 1111, 1261, 1113, 1114, 1115,
 1116, 1117,  242,  660,  448,  661,  662,  926,  663,  664,
  930,  836,  995,  996,  997,  261,  455, 1086,  110,  841,
 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
 1272, 1273, 1145, 1161, 1324, 1182, 1200, 1196, 1213, 1225,
 1240, 1287, 1350, 1210, 1417, 1396, 1439, 1440, 1441, 1001,
 1437, 1002,  731, 1166, 1435, 1413, 1469,  505, 1424, 1403,
 1456,  888, 1467, 1470, 1471, 1537, 1457, 1458, 1454, 1274,
 1317, 1293, 1325,  680, 1386, 1521, 1389, 1371, 1436, 1548,
 1146,  262,  681,  682,  683,  684,  685,  647,  554, 1119,
  648,  649,  846, 1326, 1412, 1503, 1466, 1524, 1341, 1431,
 1533, 1549, 1504, 1505, 1553, 1545, 1546, 1180, 1195, 1239,
 1284, 1320, 1285, 1286, 1313, 1374, 1347, 1499,  317,  230,
 1392, 1314, 1390, 1383, 1358, 1420, 1398, 1449, 1444, 1418,
 1478, 1483, 1447, 1450, 1451, 1531, 1484, 1445, 1446, 1541,
 1529, 1530, 1177, 1188, 1207, 1198, 1219, 1208, 1209, 1231,
 1192, 1216, 1241,  427,  196,  112,  345,  198,  548,  443,
  231, 1328,  645,  646,  824, 1167,  200,  434,  421,  113,
 1222, 1211,   45,  114,  115,  116,  117,  118,  119,  120,
  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
  131,  132,  133,  134,  135,  136,  251,  797,  578,  579,
  965,  501,  717,  867,  718,  719,  958,  137,  205,  723,
  580,  581,  582,  791,  457,  458,  290,  963,  725,  435,
  292,  488,  489,  490,  491,  494,  733,  305,  202,  431,
  258,  463,  763,  259,  462,  138,  139,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  804,
  152,  557,  558,  559,  771,  772,  773,  153,  546,  765,
  346,  982,  535, 1039,  154,  483, 1178, 1194, 1237, 1315,
 1147, 1226, 1227, 1257, 1258,  825,  538,  331,  768, 1100,
 1126,  539,  540,  263,  264,  265,  157,  158,  159,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  171,  278,  563,  473,  474,  422,  752,  886,  891,
  522,  935,  843, 1005,  889,  892, 1016,  893, 1006, 1007,
  279,  172,  173,  174, 1028,  969, 1029, 1030, 1031, 1072,
 1032,  175,  176,  177,  178,  698,  475,  699, 1019,  951,
 1020, 1121, 1094, 1067, 1122,  700,  950,  701, 1124, 1125,
  179,  180,  181,  182,  183,  184,  299,  514,  515,  971,
 1074,  308,  949,  853, 1093,  974,  885, 1075,  185,  407,
  186,  408,  912,  985,  409,  410,  631,  622,  623,  916,
  411,  412,  413,  414,  415,  917,  617,  914, 1080, 1156,
 1173,  987, 1104, 1165,  813,  625,  814, 1046,  990, 1047,
 1105,  921,   17,   19,   46,   47,  234,  650,  832,  444,
  651,  652,
  };
  protected static readonly short [] yySindex = {         -154,
    0, -187, -143,  -27, -180,10427,    0,  104,    0,    0,
 -180,  -27,    0,    0,  264,    0, 5801, -180,    0, 1374,
 -216,    0,    0,    0,    0,    0,    0,    0,  119,    0,
  251,    0,    0,    0,11012,    0,    0,    0,    0,    0,
    0,    0,    0, -223,    0,    0,  547,    0,    0,  104,
   91, -180,    0,  405,    0,  288,  426,  310, -256, -125,
  -44,  436, 5946,    0,  -44,  -44,  -44, -185,  -44,  -44,
  564,    0, 7521,  -44,  -44,    0, 7666,    0,  474,    0,
  310,    0,  -44, -256,  -44,    0,10454,10454,  537,  -44,
  -44, -195,10182,    0, 9507,    0,10182,10182,10182,10182,
10182,10182,10182,10182,    0,  342,    0,10627,    0,  167,
    0,  561,  614,  800,    0,    0,    0,  620,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1087,  749,
  143,  556,  661,  691,  657,  664,  685,  678,  133,  738,
    0,    0,    0,    0,    0,    0, 2951,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  138,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  280,  314,   91,    0,  695,    0,
  417,  438,  767,  747,    0,    0,   45,    0,    0,  807,
  374,  811,    0,    0,    0,10627,10627,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  819,
  786,    0,  791,    0, -249,    0,    0,    0,   91,  914,
   91,    0,    0,  979,  820, 9642,    0,    0,    0,    0,
 9507,    0,  868,    0,    0,10627,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -158, -264,10317,
    0,10509, 9507,  880,  892, 9507, 9507, 8246,  516,  236,
  884,10646,    0,  -44,  -44,10182,  342,    0,  896,10627,
 9507,    0,  898,  151,  -44,    0, 9507,  474, 8967,  888,
 9507,  695,  324,  470,  997, -256,    0,  877,  999, -256,
 9507, 9507, 9507,  436,    0,  958, 1039,  331,    0,    0,
 6091, -273,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10627,    0,    0,10372,  324,  937,  942, 9507,
    0,  909,  213,  454,    0,    0,  907, 7811, 8832,10182,
 9507, 9507, 9507, 9507, 9507, 9507, 9507, 9507, 9507, 9507,
 9507,10182,10182,10182,10627,10627,10182,10182,10182,10182,
10182,10182,10182,10182,10182,10182,10182,10182,10182,10182,
10182,10182, 9507,    0,    0,    0,    0,    0,    0,10454,
10454,    0,    0, -256,    0,    0,    0,    0,  400,  974,
    0,    0,    0,    0,    0,    0,    0,    0,   91,    0,
    0,  695,  917,    0,    0,  378,    0,    0,    0,    0,
    0,  909,  747,    0,  807,    0,    0, -256,  819,  819,
    0,  125,    0,  559,  819,  973,    0, -179,    0, -186,
    0,    0,  909,    0,    0,  959,  623,    0,  971,10317,
  972, -183,  474,    0,  -44,    0,    0,    0,  695,  471,
  800,  374, -256,  807, 7096, -256, 1102,    0,  975,    0,
    0,    0, -164,   76,    0,  366,    0,  980,    0,  982,
    0,    0,    0,  668,    0, 7231,  701, 9507,  884, 8832,
    0, 6526,    0,  695,    0,    0,    0,  981,   90,    0,
    0,  310,  474, -116,    0, 8294,  985,    0,  117, -256,
10317, -161,  136,  936, 9507, 1069,  909, 9507, 1070,  987,
    0,  990,  991,    0,10372,    0,    0, -276, 6091,    0,
    0,    0,    0,    0,    0,  474,    0, -291,    0,    0,
    0,  695,  324, -256,10718,    0,  992,    0,  993,10182,
    0,  988, 6091,    0, -312,    0,  223,    0,  909,    0,
   81, 9507, 9507,  996, 1124,    0,    0,  185, -171,    0,
    0,    0,  749,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  749,
  749,  143,  143,  556,  556,  556,  556,  661,  661,  691,
  657,  664,  685,  678,    0, -112, 7956, 1080, -256, 1081,
 -256, 7956, 7956,  994, 9507,    0,    0,  974,    0, -256,
    0,    0,  530, 1001,  909,  747,    0,    0,    0,  747,
    0,    0,    0,  488,   27,    0,10718,  559,    0, 1000,
 1007,    0,    0,    0,    0,    0,    0,  324, 1011,    0,
  998, 1013,    0,    0,    0,    0,    0, 1016,    0,  337,
    0, 9642,    0,    0,    0,    0,    0,  552,  130, 1018,
    0, 1020, 1026, 1031,    0,    0, 9507,    0,    0,    0,
    0,    0,    0,    0,    0, -256,    0,    0, 1032,    0,
 1033, 1034,    0,    0,    0, 5946,    0, 5946, 7376,    0,
 8246,    0,    0, 9102, -255,    0, -263, -117,    0,  984,
  995,    0,   84,    0,    0, 1038, 1037,    0,    0,    0,
    0,    0, 1040,    0,    0, 1048,    0, 8374,    0,  474,
    0,    0,  595, 1044,    0,    0, 5946,    0,    0,    0,
 6671, 1043,    0, 5946,  909,    0, 9507,    0, 9507,10627,
    0,    0,  474, 1049,  474,    0,    0,    0,    0,    0,
    0,    0, 7956,10627,    0,    0, -256,10372, 1077,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8697,    0,    0,    0,    0,    0, 6816,    0,
 7956,    0,    0,    0,    0, 1133,    0, 1134,    0,    0,
    0,  922,    0, 1052,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1015,    0,  125,    0,    0,    0,    0,
  559,  559,    0,  917, 1061, 1063, 1068, 1021,    0,    0,
 9507,    0, 1071,  552, 1035,10627,    0,    0,   99, 1204,
 1206,  141, 1073,    0,    0, 9507,10627, 1180,    0,    0,
    0,    0, -191, 9237,    0,    0,    0,    0, 6951,    0,
 1211,    0,  807, 9507, 1091, 7376, 1092,    0,    0, -256,
    0,  172,    0,    0, -147, -161,10646,    0,    0, -256,
 1085, 1043,    0,    0,    0,    0, 1090,    0, 1120,    0,
    0,    0,    0,    0,    0,    0,  648,    0,    0,    0,
    0, 7956,    0, 7956,    0, 1113, 7956,    0,    0,    0,
  887,    0,    0,    0, 1099,  917,    0,    0, 9777,    0,
    0,    0,    0, 9372, 1096,    0,    0, 1097, -181, 1104,
 1105,    0,    0,    0,    0,    0, 1095, 7376, 1043, -161,
 9507,    0, 1186, 5946,    0,    0,    0,    0,    0,    0,
 1110,    0,  884,    0,    0,    0,    0,    0, -207,    0,
 1109,    0, 1043, 1115, 1043, 1059, 1118,    0,    0,    0,
    0,  474,    0,    0, 7956, 1153, 7956, 7956,    0, 9507,
    0,    0, 1013,  194,  674,    0,    0,    0,    0,  -27,
    0,    0,    0, -256, 1127, 1096,    0, 8413,    0, 1123,
 1260, 1261,    0,    0, 1043, 1135, 1043,    0, 5946,  352,
 9507,    0,    0,    0,    0, 9507,    0, 1140, -178,    0,
 -178,    0,    0,    0,    0, 1137, 9507, 6671,  474,    0,
    0,    0, 1164,    0,  925, 1141,    0, 1146,    0,    0,
 9777, -180, 1138,    0,    0,    0, 1139, 9507,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1150,  -90,    0,
    0, 6091,    0, 1156, 5946,    0, 1157,    0,    0, 7956,
    0,    0,    0,    0,    0, 9507,    0,    0,   91, 9372,
    0,    0, 5946, 9507,    0,    0,    0, 6091,    0,    0,
    0,    0, 1181, 7956, 9507,    0, 2582,  861, 1165,    0,
   91,    0,    0,    0,    0,    0,    0,    0, 9507,    0,
    0,  642, 1033,    0, 5946, 6091,    0, 1184,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  201, 2582,    0,    0,    0,    0,
    0,    0,    0,    0, 1166, 7956,    0,10737, 1117,    0,
  240,    0,    0, 1182, 7956, 1117,    0, 1162,    0, 1295,
 1296, -256,    0, 1182, 1171, 8434,    0, 1117,    0, 1117,
    0, 1117,    0,    0,    0,    0,    0, 1176,    0,    0,
    0, -183,    0, 1270, 1270, 1270, 1173,   91,10627, 1259,
 1259, 1259,    0, 1130,  916,    0,    0, 1175,    0,    0,
 1305,10627, 1216, 1216, 1216, 1216,    0,    0, 1189,   91,
    0,   67,    0, 1151,    0, 1216,    0,    0,    0,    0,
 1191, 1194,    0,    0,10627,  -64, 1207,    0, 1208, 1209,
 1202, 9507,    0,    0,    0,    0, 2046,  147,   91,    0,
    0,    0,    0, 1210,    0,    0, 1218,    0,    0, 2582,
    0, 1215,  147,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2582,    0,    0,    0,    0,    0,
    0,    0,    0, 1225,   91,    0,  147, 1227, 2046, 1895,
    0,    0,  521,12142,    0,    0, 1235,    0,    0, 1161,
 1187, -148, 1188, 8606, 1187, 1187, -115, -238,11012, 1187,
 1190, 1322,    0,    0, 1194,    0,    0,    0, 2042, 1194,
    0, 1232,  324,    0,    0, 1234, 1196, 1197,    0, 1245,
 1242,    0, -121, 2042, 1247, 1250,    0, 1251,    0,  324,
 1248,   31, 1253, 1254, 1256,    0,  546,    0,    0, 1194,
10627, 1262,10627,  909, 1220,    0,10646, 1219,    0,    0,
 1255, 1264,    0,    0,10737,    0,  909,    0,10737,10737,
 1187,    0,    0,    0,    0,    0,    0, 1272, 1267,  865,
 1273,    0, -183, 1398, 1274, -183, -183, 1277, -183, -183,
 1279, -183,    0,    0, 1280, -106,    0, 1275,    0,    0,
 1282, 1281, 1286, 1287, 1288, 1289,10737, 1291, 1292,    0,
 1293, 1306, 1297,    0,    0,    0, 1284,  160,    0, 1300,
 1301,    0, 1432, 1310,  521, 1304, 1311,    0, 1312, 1315,
 -183, 1317,    0,    0, 1319, -183, 9372, 1283, 1321, 1284,
    0,    0, 2582,    0,   91,   91,    0, 1290, 1324, 1300,
    0,10627,    0, 9507, 1298, 1326, 1310,    0,    0,10737,
10737,10737,10627, 1328,10809,  161, 7376, 1299, 1329, 1319,
    0, 1337,    0, -106,    0,    0, -163, 1345, 2582,    0,
 2582,    0,    0, 7376, 1334,    0,    0,    0, 1348, 1286,
    0,    0,    0,    0,    0,    0, 1352,  695,    0,    0,
    0, 2582,    0,  161,  161,    0, 1339,    0,    0, 1349,
    0,    0,    0,    0, 1409, 1473,    0,    0,    0,    0,
 1216,    0,  926, 1358,    0,    0,    0, 1390,  570,  570,
    0,    0,  161,    0,    0,    0, 7376,    0,    0,    0,
    0,    0,    0,    0, -167, -167,    0, 1216, 1360,    0,
    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {           68,
    0,    0, 6236,   68,    0,    0,    0, 1745,    0,    0,
   78,  543,    0,    0,    0,    0,    0,   78,    0,    0,
   44,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1756,    0,    0, 1756,    0,    0, 1745,
   43, 1833,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1380,    0,    0,    0,    0,    0,    0,    0,    0,
10828,    0, 1373,    0,    0,    0, 1373,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  241,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4297,    0,    0,    0,    0,
    0,    0,    0, 4233,    0,    0,    0, 4063,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4467, 4535,
 2238, 3299, 1212, 4966, 5102, 5238, 5374, 5510, 4400, 5622,
    0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   47, 2739,  724,    0,
  600,  430,    0,    0,    0,    0,    0,    0,    0, 2466,
 2152,  723,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1756,
  216,    0,    0,    0,    0,    0,    0,    0,   55,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1382,    0,    0,
    0,    0,    0,    0,    0,    0, 3043,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -20,
    0, 2580,  931, 2152,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1380,    0,    0,    0, 3043,    0,    0,
   16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1379, 2038,    0,    0, 1373,
    0, 3043,    0,    0,    0,    0,    0,    0,  196,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1534,
    0,    0,    0,    0,    0,    0,    0,    0, 2838,    0,
    0, 2309,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  740,    0,    0, 1868,    0,    0,    0, 1756, 1756,
    0,   97,    0,10540, 1756, 1769,    0,    0,    0, 1392,
    0,    0, 3043,    0,    0,    0,    0,    0,    0,    0,
    0,  303,    0,    0,    0,    0,    0,    0,  654,  693,
    0, 5630,    0,  585, 1384,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1054, 1276,    0,    0, 1395,
    0,    0,    0,    0,    0,   17,    0,    0, 3553, 1393,
    0,    0,    0,  524,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1476,    0,    0,    0,    0,    0,    0,
    0,  741,    0,    0,    0,    0, 2038,    0,    0,    0,
    0,    0,    0,    0, 1379,    0,    0,    0,   42,    0,
    0,    0,    0,    0,    0, 8101,    0,    0,    0,    0,
    0,  778,  964,    0,    0,    0, 1394,    0,    0,    0,
    0,    0,    0,    0, 3043,    0, 3043,    0, 3723,    0,
    0,    0,    0, -160,    0,    0,    0,    0,  205,    0,
    0,    0, 4626,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4694,
 4762, 2395, 3129, 3469, 3639, 3809, 3979, 4830, 4898, 5034,
 5170, 5306, 5442, 5566,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1534,    0,    0,
    0,    0,    0,    0,  740,    0,    0,    0,    0,  711,
    0,    0,    0, 1346,    0,    0,    0,10855,    0,    0,
  755,    0,    0,    0,    0,    0,    0,  871,  732,    0,
    0, 1397,    0,    0,    0,    0,    0, 1402,    0, 9912,
    0,    0,    0,    0,    0,    0,    0, 1353,  629,    0,
    0,  805,  815,  836,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1404,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1406,    0,    0,    0, 4137,    0,    0,  155,    0,   29,
 3213,    0,    0,    0,    0,    0, 1410,    0,    0,    0,
    0,    0, 1413,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  605,    0,    0,    0,    0,    0,    0,    0,
    0, 1407,    0,    0, 2038,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8101,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  575,    0,  473,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   97,    0,    0,    0,    0,
10915,10600,    0, 1400,    0,  775,    0,    0,    0,    0,
    0,    0,  842,10941,    0,    0,    0,    0,  712,    0,
    0,    0,  841,    0,    0,    0,    0, 1673,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3383,    0, 3893, 1416,    0,    0,    0, 1414,
    0,    0,    0,    0,  841,  741,    0,    0,    0,    0,
    0, 1411,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  875,    0,
    0,    0,    0,    0, 1412,    0,    0,    0,    0,  878,
  882,    0,    0,    0,    0,    0,    0,    0, 1418,  741,
  599,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3553,    0,    0,    0,    0,    0, 1417,    0,
    0,    0, 1418,    0, 1407,  351,  494,    0,    0,    0,
    0, 8101,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1397, 8401,    0,    0,    0,    0,    0,11152,
    0,    0,    0,    0,    0, 1419,    0,    0,    0,  748,
    0,    0,    0,    0, 1424,    0, 1407,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1430,    0,
 6381,    0,    0,    0,    0,    0,    0,    0, 8101,    0,
    0,    0,    0,    0,  590,  639,    0,    0,    0,    0,
    0,11225,    0,    0,    0,    0,  795,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,11692,    0,
    0,    0,    0,  829,    0,    0,    0, -157,    0,    0,
    0,    0,    0,    0,    0,    0,  766,12017,    0,    0,
11754,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  839,    0,    0, 1444,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  295,11971,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  656,    0,    0,    0, 1447,    0, 1401,
 1405,    0,    0,  656,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  303,    0, -193, -193, -193,    0,  181,    0,  226,
  226,  226,    0,    0, 8566,    0,    0, 1450,    0,    0,
 -192,    0, 1458, 1458, 1458, 1451,  671,    0,    0,  311,
    0,  316,    0,    0,    0,  640,    0,    0,    0,    0,
    0,11014,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,11381,11464,    0,
    0,    0,    0,    0,    0,    0,   63,    0,    0,12114,
    0,    0,11547,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,12114,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11630,    0,11381,    0,    0,  295,
    0,    0,    0,  295,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  385,    0,    0,11014,    0,    0,    0,    0,11014,
    0,    0,  120,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1453,
    0,    0,    0,    0,    0,    0,    0,    0,    0,11014,
    0,    0,    0, 1453,  134,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1453,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  464,    0,  531,
    0,    0,  303, 1459,    0,  303,  303,    0,  303,  303,
    0,  303,    0,    0,    0,    0,    0,  881,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  885,    0,    0,    0, 1454,12057,    0, 1455,
    0,    0,10047, 1456,    0,    0,    0,    0,    0,    0,
  476,    0,    0,    0, 1457,  303,    0,    0,    0, 1464,
    0,    0, -162,    0,11844,11909,    0,    0,    0, 1465,
    0,    0,    0,    0,    0,    0, 1466,    0,    0,    0,
    0,    0,    0,    0,    0, 8670,    0,    0,    0, 1469,
    0,    0,    0,    0,    0,    0,    0,    0, 1515,    0,
 1526,    0,    0,    0,  890,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  673,    0,    0,
    0,  928,    0,11768,11830,    0,  897,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  706,    0,    0,    0,    0,    0,    0,    0,11265,11308,
    0,    0, 8670,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  706,    0,    0,
    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1795,    0,    0,    0,    1,   -7, 1670,  -49,   23,
    0, 1847, 1855,  628,    0,   -8, 1354,    0,    0,    0,
    0,    0, -735, -694,    0,  750,-1039,    0,    0,    0,
    0,    0, -224,    0,    0,    0,  943,    0, 1028,    0,
    0,    0,    0,  821,  823,  -14, -332,    0, 1205,    0,
  588,    0,  613,-1156,-1125, -714, -710, -702, -626, -594,
    0, -422,-1204,    0,    3,    0,  113,    0,  123,-1163,
    0,    0,    0,  -73,  404,    0,    0,    0,  441,-1067,
    0, -275, -287, -778,    0,    0,    0, -859,  392,    0,
    0, -501,    0,    0,  413,    0,    0,  428,    0,    0,
  461,    0, -378, -662,    0,    0,    0,    0,    0,    0,
 -522,  -17,    0,    0, 1041, 1053, 1062, 1230, -519,    0,
    0, -288, 1066,  577,    0, -709,    0,    0,    0,    0,
    0,    0,    0,    0,  357,    0,    0,    0,    0,    0,
    0,    0,    0,  603,    0,    0,    0,    0,  -13,  609,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  381,    0,    0,  472,    0,    0,  468,  478,  394,
    0,    0,    0,    0,    0,    0,    0,    0,  705,    0,
    0,    0,    0, -141,    0,  231, -165,    0,    0,  571,
    0,  619,    0, 1106,    0,    5, -282, -261, -159,   34,
    0, -434,    0, -243, -204,    0,    0,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -258,    0, 1252,    0, 1428, -469,
    0, -214,    0,    0,    0, 1064,    0, -297, -138, 1217,
    0, 1136,    0, 1361, 1578, 1285,    0,    0, 1003, 1871,
    0,    0,    0,    0, 1243,    0,    0,    0,    0, -376,
 1621,    0,    0,    0,    0,    0,  325,  511,  960,  783,
  965, 1566, 1567, 1569, 1571, 1565,    0, 1575,    0, -543,
    0,    0, 1193, 1433, -733,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -298,    0,    0,    0,    0,
-1080,    0,  733,    0,  683,    0,  847,    0,    0,    0,
    0,  903, -517,  -11, -310,   -1,    0, 1820,    0,   71,
    0,   95,  100,  102,  108,  109,  132,  135,  137,  158,
  164,    0, -576,    0, -242,    0,    0, -799,    0, -424,
    0,    0,    0,    0,  940, -567, 1006, -551,    0,  983,
 -455,    0,    0,    0,    0,    0,    0,  957,    0,    0,
  956,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  894,    0,    0,
    0,    0,    0,    0,    0,    0,  -43,    0, 1477,    0,
    0,    0, 1107,    0,    0,    0,    0,    0,    0, -168,
    0,    0,    0,    0,    0, 1581, 1365,    0,    0,    0,
 1585,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  822,    0,    0,    0,    0,    0,    0,    0,    0,  895,
    0,    0,    0,    0,    0,    0,   -9, 1163,    0,    0,
    0, 1172,
  };
  protected static readonly short [] yyTable = {           111,
  732,  240,  109,  503,   18,  155,  195,  479,   43,  506,
  187,  192,  523,  316,  320,  156,  451,  417,  394,  697,
  542,  769, 1118,  530,  199,  424,  577,  976,  499,  487,
  727,  900,  428,  303,  348,  777,  471,  236,  877,   44,
  250,  437,    5,  943,  471,  782,  941,    7, 1025, 1112,
 1228, 1229, 1230,  201,   49, 1290,  638,  555,  298,  436,
 1026,  304,  298,  306,  872, 1162,  520,   36,   14,  665,
 1294, 1112,  676,  241, 1009,  472,  655,   34,  809,  810,
  332,  324,  283,   20,  798,  446,  975,  160, 1550, 1026,
  284,  705, 1277,  774,  750,  616, 1339,  464,  341, 1512,
  629,    1,  766,  656,  472,  648,  649, 1329,  972,  544,
  784,  161,  343,   16,  466,  865,  162,  190,  163,   20,
  201,  201,  467, 1278,  164,  165,  783,  828, 1277,  858,
  254,  859,  439,  440, 1359,  775,  864,  240,  868,  111,
 1337,  201,  109,  800,  657,  155,  342,  424,  166, 1415,
 1017,  167,  512,  168,  428,  156,  648,  649,  232, 1278,
  233, 1513,  629,  767, 1330, 1096,  545,  577,  677,  343,
  884,  740,  252,  639,  169,  468,  866,  894,  190,   42,
  170,  424,  461,  344,  648,  649,  564,  955,  190,  449,
 1340, 1246,  465,  874,  451,  329,  238, 1338,  720,  329,
  329,  329,  329,  329,  329,  329,  329,  860,  477, 1276,
   94,  724,  694,  799,    2,  338,  471,  674,  706, 1551,
  441,  784,  616,  203,  616, 1027,  508,  160,  542,  901,
  751,  454,  696,  252,  325,  737,  459,  447, 1477,  201,
  201,   15,  666,  252,  948, 1276,  555, 1010, 1040,  658,
  197,  161,  542, 1162, 1027,  472,  162,  911,  163,  820,
 1360,  255,  632,  821,  164,  165,  637,  869,  478,  547,
  472,  482,  484,  801, 1515,  784, 1516,  471,  749,  616,
    3,    4,    5,    6,  943, 1416,  509,  669,  166,  201,
  518,  167,  517,  168,  519, 1097,  482, 1523, 1048,    5,
  943,  598,  599,  941,    7, 1079,  562,  532,  533,  688,
  690,   49,  692,  470,  169,  201,  472,  318,  318,  541,
  170, 1247, 1234,  907,   36,  201,  619,  621,  689,  543,
  691,  707,  556,  201,   34,  298,  788,  248,  318,  872,
  979,    2,  470,  454,  576,  735,  584,  585,  586,  587,
  588,  589,  590,  591,  592,  593,  594, 1532,   49,  829,
   48,  637,   49,   50,  737, 1366,  737,   36,  984, 1473,
  986,  737,  746,  989,  967,  328,  201, 1022,  616,  201,
  643, 1015,  329,   36, 1555,  847,  249,  424,  852,  338,
  329,  753,  644,   34,  676,  427,  946,   49,  329,  784,
  952,  786, 1259,  787,  375, 1015,  511,  943,  201,  201,
   49,  826,  658,  943,  633, 1442, 1501,  330,  190,  512,
  677,  333,  334,  335,  336,  337,  338,  339,  340,  641,
  642,  206,  349,  201,  201,  653,  318,  318,  513,  659,
  658, 1041, 1063, 1043, 1044,  686, 1014,   36,  376,  658,
  940, 1235,  487,  827,  451,  676,  427,   34,  708, 1367,
  577,  789,  329,  979,  873,  672,  909,  471,  874,  819,
  238,  338,  736,  432,  329,  329,  329, 1158,  238,  329,
  329,  677, 1159,  722,  679,  576,  318,  730, 1057,  555,
  350,  495,  424,  470,  737,  739, 1244, 1384, 1101,  747,
  338,  328,  195,  324,  238,  328,  734,  743,  470,  238,
  756, 1169,  318,  758,  338,  338, 1120,  324,  754,  338,
  199,  556,  318,  947,  396,   49,  238,  541,  770, 1197,
  318,  377,  378,  428, 1279,  398, 1103,  543, 1280,  238,
  238,  556,   37, 1170,  391,  190, 1281,  341, 1154,  201,
 1036,  541,  351, 1160,  470,  936,  392,  790,  790,  304,
 1128,  543,  329,  207,  734,  338,  627,  795,  201,  398,
 1279,  720, 1171,  318, 1280,  651,  318,  397,  439, 1348,
  769,  870, 1281,  428, 1349, 1049, 1391,  440,  201,  819,
 1393, 1394, 1062,  338,  428,  342,  999,  338,  627,  338,
  635,  338,  803,  651,  506,  318,  318,  803,  803,   49,
  812,  962, 1164,  496, 1375,  497,   49,  248,  343,   49,
  330, 1174, 1282,  329,  796,   49,  734,  627, 1428,  399,
  318,  318,  344,  556,  400,  439,  401,   49,  697,  402,
  403,  565,  404,  405,  440,  531, 1003,  343,  204,  957,
  839,  566, 1018,  318, 1283,  626,  628,  454, 1282,  840,
  966,  785,  329,  399,  880,  652,  249,  244,  400,  498,
  401,  245,  482,  402,  403,  724,  404,  405,  318,  204,
  201, 1493, 1494, 1495,  531,  158,  897,   94,  628,  306,
 1283,  248,   54,  652,  730,  341,  595,  596,  597,  722,
  902,  531,  531,  531,  531,  531,  531,  531,  531,  531,
  531,  531,  531,  531,  531,  531,  531,  628,  999,  406,
 1401,  246,  881, 1405, 1406,  342, 1408, 1409,  921, 1411,
 1064,   49,  342,  761, 1065,  761,  730,  761, 1066,   49,
  249,  425,  895,  342,  896,  898,  197,  770,  343,  399,
 1069,  190,  991,  416,  400,  343,  401,  709,  803,  402,
  403,  542,  404,  405,  556,  318,  343,  342, 1464,  344,
  420,  201,  939, 1472,  634, 1206,  644, 1223,  576,  350,
  344, 1334, 1092,  953,  576,  318,  803,  542,  822,   49,
  343,  243,   49,  201, 1525, 1526, 1334, 1206,   49,   37,
 1245,  823, 1003,   37,  344,  425,  635,  201,  423,  317,
   49,  201,  247,  329,   37,  542,  317,  257,  342,   37,
  531,  426,  921, 1544,   37,  659,  933,  921,   37,  921,
  927,   49,  921,  921,  420,  921,  921,  425,  425,  627,
  722,  343,   37, 1151,   49,  930,   37,   37,  268,  956,
  268,   94,   37,  524,  353,  268,  158,   37,   37,  964,
   37,  730,   37,   37,   37,  549,  420,  420,  844,   37,
  583,  679,  549,   37,  550,   37,  750,  318,  750,  201,
  750,  550,  567,  451,  780,   37,  551,  600,  601,   37,
  201,   37,  568,  551,  923,   37,  492,  803,   94,  803,
  493,  350,  803,  350,   49,  350,  350, 1316,  350,  729,
  350,  917,  921,  524,  998,   37,  817,  659,  321,  478,
  201,   37,   37,   94,  927, 1333, 1335, 1336,  232,  927,
  235,  927, 1372,  730,  927,  927,  482,  927,  927,  930,
 1333,  288,   50,  289,  930,   50,  930,   94,  317,  930,
  930,   50,  930,  930,  350, 1361, 1243,  350,  722,  927,
  379,  380,  425,   50,  770, 1506, 1252,  324,  318,  722,
  803,  722,  803,  803,  930, 1045,  722,  816,  882,  324,
  451,  816, 1517,  324,  317,  816,  324,  317,  923,  352,
  318,  420, 1395,  923,  556,  923,  324,  353,  923,  923,
 1052,  923,  923,  671,  318,  917, 1068,  672,  318,  360,
  917,  478,  917,  722,  927,  917,  917,  655,  917,  917,
 1152,  770, 1077,  730, 1153,   49,  655,  729,   49,  930,
  983,  733,  799,  729,   49, 1547,  998,  629,  729, 1107,
  729,  201,  629,  478, 1089,  729,   49,  629,  712,  309,
  234,  387,  713,  381,  382,  309, 1050,   50, 1051,  234,
  541, 1107,  310,  388,  318,  803,  317,  383,  384,  629,
  543, 1106,  317,  345,  506,  478,  318,  317,  923,  317,
  389,  721,  729,  654,  317,  493,  541,  318,  390,  803,
 1045,  420,  654,  511,  511,  917,  543,  511,  629,  385,
  386,  345, 1187,  345,  478,  507,  345,  324,  345,  507,
  345, 1108,   66,   66,  541,  345,   66,  318,  629,  324,
  643,  317,  324,  324,  543,  741,  324,  741,  184,   24,
  184,   25,  184, 1108,   26,  963,  324,  963,  393,   27,
   49,  803,  398,   28,  195,  372,  373,  374, 1204, 1003,
  803,  352,  345,  429,   30,   67,  318, 1352,  352,   67,
  352, 1168,  352,  604,  605,  606,  607,   32, 1175,  352,
 1204,  733,   33, 1256, 1352,  172,   34,  172,  430,  172,
 1189,  248, 1190,  354, 1191,  160,  289,  160, 1379, 1381,
   36,  201,   37,  531,  438,  167,   38,  167, 1260, 1275,
  232, 1381,  355,  356,   39,   40,  352,  818,   41,  201,
  442,  818,  312, 1260,  679, 1256,  168,  820,  168,  445,
 1205,  820,  357,  874,  194,  874,  752,  478,  752,  450,
  249,  733,  201,  358,  452, 1275,  399, 1260,  318, 1148,
  238,  400, 1205,  401,  238,  201,  402,  403,  453,  404,
  405,  324,  324,  460,  324,  324,   58,   69,  190,   69,
  190,  502,  161,  253,  161,  273,  480,  273,  201,  121,
 1205,  121,  285,  521,  280, 1318,  280, 1376,  481, 1378,
  201,  128,  507,  128,  510, 1205,  918,  919,  310, 1082,
 1083,  315,  319,  347, 1218,  238,  326,  525,  324,  528,
 1534, 1535,  629,  629,  324,  527,  547, 1201, 1202, 1205,
  324,  536,  256,  324,  324,  324,  280,  281,  282,  560,
  286,  287,  201, 1214, 1215,  300,  301,  324,  561, 1373,
  644,  324,  307,  343,  309,  569,  311,  324,  602,  603,
  630,  322,  323,  324,  670,  347,  592,  324,  592,  608,
  609,  195,  654,  673,  675,  195,  195,  703,  710,  324,
  324,  704,  733,  734,  755,  359,  711,  745, 1443,  757,
  759,  760,  761,  762,  781,  779,  778,  793, 1488,  794,
  805,  807,  830,  833,  201,  811,  201,  818,  318, 1496,
  201,  831,  324,  195,  524, 1479, 1481,  834,  201,  838,
  848,  433,  201,  201,  849,  679,  318, 1318,  679,  679,
  850,  679,  679,  201,  679,  851, 1502,  856,  855,  857,
  875,  799,  478,  203,  876,  878,  883,  890,  871,  318,
  905,  899,  487,  913,  915,  324,  920,  324,  487, 1489,
  201,  928,  318,  922,  929,  931,  195,  195,  195,  932,
  456, 1500,  730,  679, 1502, 1502,  324,  324,  679,  944,
  954,  945,  934,  938,  948,  318,  961,  559,  496,  730,
  968,  978,  980,  981,  988,  846,  324,  318,  361,  992,
 1004, 1013, 1008, 1502,  324,  201, 1021,  324, 1011, 1012,
 1023, 1033, 1037,  201,  201,  201,  201, 1035,  201,  362,
  363,  364,  365,  366,  367,  368,  369,  370,  371, 1038,
 1042, 1540, 1540, 1054, 1058, 1059, 1060, 1061, 1070,  318,
  526, 1081,  730, 1076,  529, 1084, 1085, 1552, 1552, 1090,
 1091, 1327, 1095, 1099, 1327, 1327, 1327, 1102, 1327, 1127,
 1327,  500, 1157, 1149, 1163,   42,  307, 1176, 1172, 1327,
 1179, 1181, 1185, 1193, 1199, 1203,  516, 1212, 1217, 1220,
 1221,  559,  456,  456, 1327, 1224,  559, 1232,  559,  559,
  559,  559,  559,  559,  559,  559,  559,  559,  559, 1236,
 1243,  318, 1242,  318, 1248, 1249, 1250,  318, 1251, 1322,
  559, 1288,  559, 1291,  559,  318,  559,  559,  559,  318,
  318, 1327, 1289, 1295,  618,  620,  559,  559,  624, 1298,
  318,  559,  559, 1321, 1346, 1323, 1331, 1351, 1345, 1353,
  559,  559,  559,  559, 1354, 1355, 1356, 1357, 1362,  188,
  636, 1363, 1364, 1365, 1368,  559, 1387,  318,   24, 1369,
   25, 1370,  640,   26, 1380, 1377, 1388, 1385,   27, 1397,
 1399,  559,   28, 1402,  488, 1404, 1400,  401, 1410,  401,
  488, 1414, 1407,   30, 1421, 1423, 1419, 1422, 1438, 1425,
 1426, 1427,  772, 1429, 1430, 1432,   32,  693,  401,  401,
  702,   33,  318, 1433, 1448,   34, 1452, 1453, 1434, 1460,
  318,  318,  318,  318, 1455,  318, 1461, 1462,  401,   36,
 1463,   37, 1465, 1468,  456,   38,  401, 1475, 1497,  401,
 1486, 1474, 1491,   39,   40, 1508,  687,   41, 1485, 1510,
  194,  189,  359, 1514,  748, 1518, 1490, 1507, 1519, 1522,
 1527,  846,  846, 1513, 1528, 1512, 1536, 1538, 1556,  846,
  846,  846,  846,  846,    9,  846,  846,  190,  846,  846,
  846,  846,  846,  846,  846,  959,  846,  524,  776,  844,
  482,  593,  846,  738,  846,  846,  846,  846,  951,   25,
  811,  846,  846,  483,  666,  439,  594,   32,  846,   26,
   33,  177,  846,  846,  481,  846,  846,  846,  629,  933,
  815,   32,  440,  744,   33,  778,  852,  745,  754,  846,
  746,  846,  191,  846,  846,  755,  747,  846,  779,  846,
  846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
  846,  846,  676,  806,  301,  808,  846,  846,  305,  211,
  846,  846,   35,   97,  816,  654,  324,  654,  118,  629,
  106,  276,  131,  124,  237,  846,  846,  846,  846,  846,
  107,  277,  132,  846,  846,  125,  418,  846,   53,   21,
 1150,  927,  846,  846,  846,  846,  846,  492,  993,  744,
  846, 1087,  846, 1088, 1297, 1292,  456, 1511,  846,  846,
 1476, 1520, 1509,  933, 1492, 1459, 1344, 1296,  933,  941,
  933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
  854,  942, 1554,  846,  846,  846,  846,  845,  846,  937,
  943, 1543,  933, 1482,  933,  846,  933, 1343,  933,  933,
  933, 1487, 1480, 1542, 1233, 1382, 1342,  726,  772,  772,
  863,  923,  960,  792,  910,  571,  772,  772,  772,  772,
  772,  291,  772,  772,  534,  772,  772,  772,  772,  772,
  772,  772,  610,  861,  611,  614,  842,  612, 1238,  772,
  613,  772,  772,  772,  772, 1024,  615,  764,  772,  772,
  904, 1299, 1155,  933, 1098,  772,  395, 1078, 1034,  772,
  772,  903,  772,  772,  772, 1071, 1073, 1123, 1055,  628,
  741,  973,  815,  629,  925, 1184,  772,  456,  772, 1129,
  772,  772,  924,  456,  772,    0,  772,  772,  772,  772,
  772,  772,  772,  772,  772,  772,  772,  772,  772,    0,
    0,    0,    0,  772,  772,    0,    0,  772,  772,    0,
    0,    0,    0,    0,    0,    0,    0,  324,    0,    0,
    0,    0,  772,  772,  772,  772,  772,    0,    0,    0,
  772,  772,    0,    0,  772,    0,    0,    0,    0,  772,
  772,  772,  772,  772,    0,    0,    0,  772,    0,  772,
    0,    0,    0,    0,    0,  772,  772,    0,    0,    0,
    0,    0,    0,    0,  970,    0,  636,    0,    0,   35,
    0,    0,    0,   35,  977,    0,    0,    0,    0,    0,
  772,  772,  772,  772,   35,  772,    0,    0,    0,   35,
    0,    0,  772,    0,   35,    0,    0,    0,   35,    0,
    0,    0,    0,  492,    0,    0,    0,    0,    0,  492,
    0,    0,    0,  456,    0,    0,   35,   35,    0,    0,
    0,    0,   35,    0,    0,    0,    0,   35,   35,    0,
   35,  317,   35,   35,   35,    0,    0,    0,    0,   35,
    0,    0,    0,   35,    0,   35,  492, 1300,  492,    0,
    0, 1158,    0,  492,    0,   35, 1159, 1301, 1302,   35,
    0,   35,    0, 1303,    0,   35,    0, 1304, 1305, 1306,
    0,    0, 1307,    0,    0,    0, 1308,    0,    0,    0,
    0,    0,    0,    0,    0,   35,    0, 1309, 1053,    0,
    0,   35,   35, 1310,    0,    0,    0,  492,    0,    0,
    0,    0,  492,    0,  492,  492,  492,  492,  492,  492,
  492,  492,  492,  492,  492,    0,    0,    0,    0,    0,
 1311,  492,    0,    0,    0,  492,  492, 1312,  492,  492,
  492,  492,  492,  492,  492,  456,  492,  492,    0,  492,
  492,  492,  492,  492,  492,  492,  492,  492,  492,    0,
  492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
  492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
  492,  492,    0,  324,  492,    0,  492,    0,  492,  324,
    0,  492, 1130,    0,    0,    0,    0,  492,  730,    0,
   24,    0,   25,    0,    0,   26,    0, 1253,    0,    0,
   27,    0,    0,    0,   28,    0,    0, 1131,    0,    0,
    0,    0,    0,    0,    0,   30,  324,    0,  324,    0,
    0,    0,    0,  324,    0,    0, 1132,    0,   32,    0,
    0, 1133,    0,   33,    0, 1254, 1134,   34,    0, 1135,
    0, 1136, 1137, 1138,    0,    0,    0,    0, 1139,    0,
    0,   36, 1140,   37,    0,    0, 1183,   38, 1255,    0,
    0,    0,    0,    0, 1141,   39,   40,  324, 1142,   41,
 1143,    0,  324,  312,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,    0,  317,    0,    0,
    0,  324,    0,  317, 1144,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,    0,  324,  324,    0,  324,
  324,  324,  324,  324,  324,    0,    0,  324,  324,    0,
    0,    0,  324,  324,  324,  324,  324,  324,  324,  324,
  317,    0,  317,    0,    0,    0,    0,  317,    0,    0,
    0,  324,    0,    0,  324,  353,  324,    0,  324,    0,
 1323,  324,    0,    0,  347,    0,    0,  324,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  551,    0,    0,    0,    0,    0,    0,
    0,  317,    0,    0,    0,    0,  317,    0,  317,  317,
  317,  317,  317,  317,  317,  317,  317,  317,  317,    0,
    0,    0,    0,    0,    0,  317,    0,    0,    0,  317,
  317,  317,  317,  317,  317,    0,  317,  317,  317,    0,
  317,  317,    0,  317,  317,  317,  317,  317,    0,    0,
    0,  317,  317,    0,    0,    0,  317,  317,  317,  317,
  317,  317,  317,  317,  730,    0,    0,    0,    0,    0,
  730,    0,    0,    0,    0,  317,    0,    0,  317,  348,
  317,    0,  317,    0,    0,  317,    0,  551,    0,    0,
    0,  317,  551,    0,  551,  551,  551,  551,  551,  551,
  551,  551,  551,  551,  551,    0,    0,  730,    0,  730,
    0,    0,    0,    0,  730,    0,  551,    0,  551,    0,
  551,    0,  551,  551,  551,    0,    0,    0,    0,    0,
  551,  551,  551,  551,    0,    0,    0,  551,  551,    0,
    0,    0,  551,  551,  551,  551,  551,  551,  551,  551,
  552,    0,    0,    0,    0,    0,    0,    0,  730,    0,
    0,  551,    0,  730,    0,  730,  730,  730,  730,  730,
  730,  730,  730,  730,  730,  730,    0,  551,    0,    0,
    0,    0,  730,    0,    0,    0,  730,  730,  730,  730,
  730,  730,    0,  730,  730,  730,    0,  730,  730,    0,
  730,  730,  730,  730,  730,    0,    0,    0,  730,  730,
    0,    0,    0,  730,  730,  730,  730,  730,  730,  730,
  730,  353,    0,    0,    0,    0,    0,  353,    0,    0,
    0,    0,  730,    0,    0,  730,    0,  730,   21,  730,
    0,    0,  730,    0,  552,    0,    0,    0,  730,  552,
    0,  552,  552,  552,  552,  552,  552,  552,  552,  552,
  552,  552,    0,    0,  353,    0,  353,    0,    0,    0,
    0,  353,    0,  552,    0,  552,    0,  552,    0,  552,
  552,  552,    0,    0,    0,    0,    0,  552,  552,  552,
  552,    0,    0,    0,  552,  552,    0,    0,    0,  552,
  552,  552,  552,  552,  552,  552,  552,    0,    0,    0,
    0,    0,    0,    0,    0,  353,    0,    0,  552,    0,
  353,    0,  353,  353,  353,  353,  353,  353,  353,  353,
  353,  353,  353,    0,  552,  348,    0,   50,    0,  353,
    0,  348, 1130,  353,  353,    0,  353,  353,  353,    0,
  353,  353,  353,    0,  353,  353,    0,  353,  353,  353,
  353,  353,    0,    0,    0,  353,  353, 1131,    0,    0,
  353,  353,  353,  353,  353,  353,  353,  353,  348,    0,
  348,    0,    0,    0,    0,  348, 1132,    0,    0,  353,
    0, 1133,  353,    0,  353,    0, 1134,    0,    0, 1135,
    0, 1136, 1137, 1138,    0,  353,    0,    0, 1139,    0,
    0,    0, 1140,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1141,    0,    0,    0, 1142,  348,
 1143,    0,    0,    0,  348,    0,  348,  348,  348,  348,
  348,  348,  348,  348,  348,  348,  348,    0,    0,    0,
    0,    0,    0,  348, 1144,    0,    0,  348,  348,    0,
  348,  348,  348,    0,  348,  348,  348,    0,  348,  348,
    0,  348,  348,  348,  348,  348,    0,    0,    0,  348,
  348,    0,    0,    0,  348,  348,  348,  348,  348,  348,
  348,  348,    0,    0,    0,   21,    0,    0,    0,   21,
    0,    0,    0,  348,    0,    0,  348,    0,  348,    0,
   21,    0,    0,    0,    0,   21,    0,    0,    0,  348,
   21,    0,    0,    0,   21,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   21,    0,
    0,    0,   21,   21,    0,    0,    0,    0,   21,    0,
    0,    0,    0,   21,   21,    0,   21,    0,   21,   21,
   21,    0,    0,    0,    0,   21,    0,    0,    0,   21,
    0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   21,    0,    0,    0,   21,    0,   21,    0,    0,
    0,   21,    0,    0,   50,    0,    0,    0,   50,    0,
   50,    0,    0,    0,    0,    0,    0,    0,    0,   50,
   50,   21,    0,    0,   50,    0,    0,   21,   21,   50,
   50,   50,    0,   50,    0,  508,   50,    0,    0,    0,
   50,   50,   50,    0,    0,   50,    0,    0,   50,   50,
    0,   50,   50,    0,    0,    0,    0,   50,    0,    0,
   50,   50,   50,   50,    0,   50,   50,   50,   50,   50,
    0,    0,   50,    0,   50,    0,    0,    0,   50,    0,
   50,    0,    0,    0,    0,    0,    0,    0,   21,    0,
   50,    0,    0,   50,   50,    0,   50,    0,    0,    0,
   50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   55,    0,    0,    0,
   50,    0,   50,   50,   56,   24,   57,   25,    0,    0,
   26,   58,    0,   59,   60,   27,   61,   62,   63,   28,
    0,    0,    0,    0,    0,    0,    0,   64,    0,   65,
   30,   66,   67,    0,    0,    0,   68,   69,    0,    0,
    0,    0,    0,   32,    0,    0,    0,   70,   33,    0,
   71,   72,   34,    0,    0,    0,   50,    0,    0,    0,
    0,    0,    0,    0,   73,    0,   36,    0,   37,   74,
    0,    0,   38,    0,   75,   76,   77,   78,   79,   80,
   39,   40,   81,   82,   41,   83,   84,    0,  324,    0,
    0,   85,   86,    0,  324,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,   94,    0,
    0,    0,   95,    0,    0,    0,    0,   96,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,  324,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  105,  106,
  107,  108,    0,    0,  553,    0,    0,    0,    0,    0,
  203,    0,  324,    0,    0,    0,    0,  324,    0,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,    0,    0,    0,    0,    0,  324,    0,    0,    0,
    0,  324,  324,  324,  324,  324,  324,  324,  324,  324,
    0,  324,  324,    0,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,    0,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,    0,  494,    0,
    0,  324,    0,  324,  494,    0,  324,    0,  553,    0,
    0,    0,  324,  553,    0,  553,  553,  553,  553,  553,
  553,  553,  553,  553,  553,  553,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  553,    0,  553,
    0,  553,    0,  553,  553,  553,    0,    0,  494,    0,
    0,  553,  553,  553,  553,    0,    0,    0,  553,  553,
    0,    0,    0,  553,  553,  553,  553,  553,  553,  553,
  553,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  553,    0,  554,    0,    0,    0,    0,    0,
    0,    0,  494,    0,    0,    0,    0,  494,  553,  494,
  494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
    0,  494,  494,    0,  494,  494,  494,  494,  494,  494,
  494,  494,  494,  494,    0,  494,  494,  494,  494,  494,
  494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
  494,  494,  494,  494,  494,  494,  494,    0,  490,    0,
    0,    0,    0,  494,  490,    0,    0,    0,  554,    0,
    0,    0,  494,  554,    0,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,  554,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  554,    0,  554,
    0,  554,    0,  554,  554,  554,    0,    0,  490,    0,
    0,  554,  554,  554,  554,    0,    0,    0,  554,  554,
    0,    0,    0,    0,    0,  554,  554,  554,  554,  554,
  554,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  554,    0,  555,    0,    0,    0,    0,    0,
    0,    0,  490,    0,    0,    0,    0,  490,  554,  490,
  490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  490,  490,    0,  490,  490,  490,  490,  490,  490,  490,
    0,  490,  490,    0,  490,  490,  490,  490,  490,  490,
  490,  490,  490,  490,    0,  490,  490,  490,  490,  490,
  490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
  490,  490,  490,  490,  490,  490,  490,    0,  498,    0,
    0,    0,    0,  490,  498,    0,  490,    0,  555,    0,
    0,    0,  490,  555,    0,  555,  555,  555,  555,  555,
  555,  555,  555,  555,  555,  555,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  555,    0,  555,
    0,  555,    0,  555,  555,  555,    0,    0,  498,    0,
    0,  555,  555,  555,  555,    0,    0,    0,  555,  555,
    0,    0,    0,    0,    0,  555,  555,  555,  555,  555,
  555,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  555,    0,  556,    0,    0,    0,    0,    0,
    0,    0,  498,    0,    0,    0,    0,  498,  555,  498,
  498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  498,    0,  498,  498,  498,  498,  498,  498,  498,
    0,  498,  498,    0,  498,  498,  498,  498,  498,  498,
  498,  498,  498,  498,    0,  498,  498,  498,  498,  498,
  498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
  498,  498,  498,  498,  498,  498,  498,    0,  324,    0,
    0,    0,    0,  498,  324,    0,  498,    0,  556,    0,
    0,    0,  498,  556,    0,  556,  556,  556,  556,  556,
  556,  556,  556,  556,  556,  556,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  556,    0,  556,
    0,  556,    0,  556,  556,  556,    0,    0,  324,    0,
    0,  556,  556,  556,  556,    0,    0,    0,  556,  556,
    0,    0,    0,    0,    0,  556,  556,  556,  556,  556,
  556,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  556,    0,  557,    0,    0,    0,    0,    0,
    0,    0,  324,    0,    0,    0,    0,  324,  556,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  324,    0,  324,  324,  324,  324,  324,  324,  324,
    0,  324,  324,    0,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,    0,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,    0,  423,    0,
    0,    0,    0,  324,  423,    0,  324,    0,  557,    0,
    0,    0,  324,  557,    0,  557,  557,  557,  557,  557,
  557,  557,  557,  557,  557,  557,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  557,    0,  557,
    0,  557,    0,  557,  557,  557,    0,    0,  423,    0,
    0,  557,  557,  557,  557,    0,    0,    0,  557,  557,
    0,    0,    0,    0,    0,  557,  557,  557,  557,  557,
  557,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  557,    0,  558,    0,    0,    0,    0,    0,
    0,    0,  423,    0,    0,    0,    0,  423,  557,  423,
  423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  423,    0,  423,  423,  423,  423,  423,  423,  423,
    0,  423,  423,    0,  423,  423,  423,  423,  423,  423,
  423,  423,  423,  423,    0,  423,  423,  423,  423,  423,
  423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
  423,  423,  423,  423,  423,  423,  423,    0,  382,    0,
    0,    0,    0,  423,  382,    0,  423,    0,  558,    0,
    0,    0,  423,  558,    0,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  558,    0,  558,
    0,  558,    0,  558,  558,  558,    0,    0,  382,    0,
    0,  558,  558,  558,  558,    0,    0,    0,  558,  558,
    0,    0,    0,    0,    0,  558,  558,  558,  558,  558,
  558,    0,  324,    0,    0,    0,    0,    0,  324,    0,
    0,    0,  558,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  382,    0,    0,    0,    0,  382,  558,  382,
  382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  382,  324,  382,  382,  382,  382,  382,  382,  382,
    0,  382,    0,    0,  382,  382,  382,  382,  382,  382,
  382,  382,  382,  382,    0,  382,  382,  382,  382,  382,
  382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
  382,  382,  382,  382,  382,  382,  382,    0,  529,    0,
    0,    0,    0,  382,  529,    0,  382,    0,    0,    0,
    0,    0,  382,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  324,    0,    0,  324,    0,
  324,  324,    0,    0,    0,  324,  324,    0,    0,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  529,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,    0,
    0,    0,  324,    0,    0,    0,    0,    0,  324,  324,
  324,    0,  733,    0,    0,    0,    0,  324,    0,    0,
  324,    0,    0,    0,    0,    0,  324,    0,    0,    0,
    0,    0,  529,    0,    0,    0,    0,  529,    0,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
    0,    0,  324,    0,    0,    0,    0,    0,    0,    0,
    0,  529,    0,  529,    0,  529,    0,  529,  529,  529,
  733,  529,  529,    0,  529,  529,  529,  529,  529,  529,
  529,  529,  529,  529,    0,    0,    0,  529,  529,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
  529,  529,  529,  529,  529,  572,  529,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  529,    0,    0,  324,    0,  324,  324,  324,
  324,  324,  733,  324,    0,  324,  324,    0,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,    0,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,    0,  541,    0,    0,    0,    0,  324,  541,    0,
  324,    0,    0,    0,    0,    0,  324,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  572,
    0,    0,    0,    0,  572,    0,  572,  572,  572,  572,
  572,  572,  572,  572,  572,  572,  572,    0,    0,    0,
    0,    0,  541,    0,    0,    0,    0,    0,  572,    0,
  572,    0,  572,    0,  572,  572,  572,    0,    0,    0,
  545,    0,    0,    0,    0,    0,  545,    0,    0,    0,
  572,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  541,    0,    0,    0,
    0,  541,    0,  541,  541,  541,  541,  541,  541,  541,
  541,  541,  541,  541,    0,    0,    0,    0,    0,  572,
  545,    0,    0,    0,    0,  541,    0,  541,    0,  541,
    0,  541,  541,  541,    0,  541,  541,    0,    0,  541,
  541,  541,  541,  541,  541,  541,  541,  541,    0,    0,
    0,  541,  541,  541,  541,  541,  541,  541,  541,    0,
    0,  548,    0,    0,  545,    0,    0,  548,    0,  545,
  541,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,    0,    0,    0,    0,  541,    0,    0,    0,
    0,    0,    0,  545,    0,  545,    0,  545,    0,  545,
  545,  545,    0,  545,  545,    0,    0,  545,  545,  545,
  545,  548,    0,    0,  545,  545,    0,    0,    0,  545,
  545,  545,  545,  545,  545,  545,  545,    0,    0,  546,
    0,    0,    0,    0,    0,  546,    0,    0,  545,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  545,  548,    0,    0,    0,    0,
  548,    0,  548,  548,  548,  548,  548,  548,  548,  548,
  548,  548,  548,    0,    0,    0,    0,    0,    0,  546,
    0,    0,    0,    0,  548,    0,  548,    0,  548,    0,
  548,  548,  548,    0,  548,  548,    0,  547,  548,  548,
  548,  548,    0,  547,    0,  548,  548,    0,    0,    0,
  548,  548,  548,  548,  548,  548,  548,  548,    0,    0,
    0,    0,    0,  546,    0,    0,    0,    0,  546,  548,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,    0,    0,    0,    0,  548,    0,  547,    0,    0,
    0,    0,  546,    0,  546,    0,  546,    0,  546,  546,
  546,    0,  546,  546,    0,  560,  546,  546,  546,  546,
    0,    0,    0,  546,  546,    0,    0,    0,  546,  546,
  546,  546,  546,  546,  546,  546,    0,    0,    0,    0,
    0,  547,    0,    0,    0,    0,  547,  546,  547,  547,
  547,  547,  547,  547,  547,  547,  547,  547,  547,    0,
    0,    0,    0,  546,    0,    0,    0,    0,    0,    0,
  547,    0,  547,    0,  547,    0,  547,  547,  547,    0,
  547,  547,    0,  561,  547,  547,  547,  547,    0,    0,
    0,  547,  547,    0,    0,    0,  547,  547,  547,  547,
  547,  547,  547,  547,    0,    0,    0,    0,    0,  560,
    0,    0,    0,    0,  560,  547,  560,  560,  560,  560,
  560,  560,  560,  560,  560,  560,  560,    0,    0,    0,
    0,  547,    0,    0,    0,    0,    0,    0,  560,    0,
  560,    0,  560,    0,  560,  560,  560,    0,    0,    0,
    0,  562,    0,    0,  560,  560,    0,    0,    0,  560,
  560,    0,    0,    0,    0,    0,    0,    0,  560,  560,
  560,  560,    0,    0,    0,    0,    0,  561,    0,    0,
    0,    0,  561,  560,  561,  561,  561,  561,  561,  561,
  561,  561,  561,  561,  561,    0,    0,    0,    0,  560,
    0,    0,    0,    0,    0,    0,  561,    0,  561,    0,
  561,    0,  561,  561,  561,    0,    0,    0,    0,  563,
    0,    0,  561,  561,    0,    0,    0,  561,  561,    0,
    0,    0,    0,    0,    0,    0,  561,  561,  561,  561,
    0,    0,    0,    0,    0,  562,    0,    0,    0,    0,
  562,  561,  562,  562,  562,  562,  562,  562,  562,  562,
  562,  562,  562,    0,    0,    0,    0,  561,    0,    0,
    0,    0,    0,    0,  562,    0,  562,    0,  562,    0,
  562,  562,  562,    0,    0,    0,    0,  564,    0,    0,
  562,  562,    0,    0,    0,  562,  562,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  562,  562,    0,    0,
    0,    0,    0,  563,    0,    0,    0,    0,  563,  562,
  563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
  563,    0,    0,    0,    0,  562,    0,    0,    0,    0,
    0,    0,  563,    0,  563,    0,  563,    0,  563,  563,
  563,    0,    0,    0,    0,  565,    0,    0,  563,  563,
    0,    0,    0,  563,  563,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  563,  563,    0,    0,    0,    0,
    0,  564,    0,    0,    0,    0,  564,  563,  564,  564,
  564,  564,  564,  564,  564,  564,  564,  564,  564,    0,
    0,    0,    0,  563,    0,    0,    0,    0,    0,    0,
  564,    0,  564,    0,  564,    0,  564,  564,  564,    0,
    0,    0,    0,  566,    0,    0,    0,  564,    0,    0,
    0,  564,  564,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  564,  564,    0,    0,    0,    0,    0,  565,
    0,    0,    0,    0,  565,  564,  565,  565,  565,  565,
  565,  565,  565,  565,  565,  565,  565,    0,    0,    0,
    0,  564,    0,    0,    0,    0,    0,    0,  565,    0,
  565,    0,  565,    0,  565,  565,  565,    0,    0,    0,
    0,  567,    0,    0,    0,  565,    0,    0,    0,  565,
  565,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  565,  565,    0,    0,    0,    0,    0,  566,    0,    0,
    0,    0,  566,  565,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,    0,    0,    0,    0,  565,
    0,    0,    0,    0,    0,    0,  566,    0,  566,    0,
  566,    0,  566,  566,  566,    0,    0,    0,    0,  568,
    0,    0,    0,  566,    0,    0,    0,    0,  566,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  566,  566,
    0,    0,    0,    0,    0,  567,    0,    0,    0,    0,
  567,  566,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,    0,    0,    0,    0,  566,    0,    0,
    0,    0,    0,    0,  567,    0,  567,    0,  567,    0,
  567,  567,  567,    0,    0,    0,    0,  569,    0,    0,
    0,  567,    0,    0,    0,    0,  567,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  567,  567,    0,    0,
    0,    0,    0,  568,    0,    0,    0,    0,  568,  567,
  568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
  568,    0,    0,    0,    0,  567,    0,    0,    0,    0,
    0,    0,  568,    0,  568,    0,  568,    0,  568,  568,
  568,    0,    0,    0,    0,  570,    0,    0,    0,    0,
    0,    0,    0,    0,  568,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  568,  568,    0,    0,    0,    0,
    0,  569,    0,    0,    0,    0,  569,  568,  569,  569,
  569,  569,  569,  569,  569,  569,  569,  569,  569,    0,
    0,    0,    0,  568,    0,    0,    0,    0,    0,    0,
  569,  571,  569,    0,  569,    0,  569,  569,  569,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  569,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  569,  569,    0,    0,    0,    0,    0,  570,
    0,    0,    0,    0,  570,  569,  570,  570,  570,  570,
  570,  570,  570,  570,  570,  570,  570,  574,    0,    0,
    0,  569,    0,    0,    0,  317,    0,    0,  570,    0,
  570,  379,  570,    0,  570,  570,  570,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  570,    0,    0,    0,    0,  571,    0,    0,    0,    0,
  571,  570,  571,  571,  571,  571,  571,  571,  571,  571,
  571,  571,  571,  570,    0,  379,    0,    0,    0,    0,
    0,    0,    0,    0,  571,    0,  571,    0,  571,  570,
  571,  571,  571,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  571,    0,    0,    0,
    0,  574,    0,    0,    0,    0,  574,  571,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  571,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  574,    0,  574,  317,  574,  571,  574,  574,  574,  317,
    0,  379,  379,  379,  317,    0,  317,    0,  379,  379,
    0,  317,  379,  379,  379,  379,    0,  379,  379,  379,
  379,    0,  379,  379,  379,  379,  379,  379,  379,  379,
  379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
  379,  379,  379,  379,    0,    0,   55,    0,  317,    0,
  379,  574,    0,  379,   56,   24,   57,   25,    0,    0,
   26,   58,    0,   59,   60,   27,   61,   62,   63,   28,
    0,    0,    0,    0,    0,    0,    0,   64,    0,   65,
   30,   66,   67,    0,    0,    0,   68,   69,    0,    0,
    0,    0,    0,   32,    0,    0,    0,   70,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   73,    0,   36,    0,   37,   74,
    0,    0,   38,    0,   75,   76,   77,   78,   79,   80,
   39,   40,   81,   82,   41,   83,   84,    0,    0,    0,
    0,   85,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,   94,    0,
    0,    0,   95,    0,    0,    0,    0,   96,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,  260,    0,  103,  104,    0,    0,    0,    0,   56,
   24,   57,   25,    0,    0,   26,   58,    0,   59,   60,
   27,   61,   62,   63,   28,    0,    0,    0,  105,  106,
  107,  108,   64,    0,   65,   30,   66,   67,    0,    0,
    0,   68,   69,    0,    0,    0,    0,    0,   32,    0,
    0,    0,   70,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
    0,   36,    0,   37,   74,    0,    0,   38,    0,   75,
   76,   77,   78,   79,   80,   39,   40,   81,   82,   41,
   83,   84,    0,    0,    0,    0,   85,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,   93,
    0,    0,    0,   94,    0,    0,    0,   95,    0,    0,
    0,    0,   96,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,  537,    0,  103,  104,
    0,    0,    0,    0,   56,   24,   57,   25,    0,    0,
   26,   58,    0,   59,   60,   27,   61,   62,   63,   28,
    0,    0,    0,  105,  106,  107,  108,   64,    0,   65,
   30,   66,   67,    0,    0,    0,   68,   69,    0,    0,
    0,    0,    0,   32,    0,    0,    0,   70,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   73,    0,   36,    0,   37,   74,
    0,    0,   38,    0,   75,   76,   77,   78,   79,   80,
   39,   40,   81,   82,   41,   83,   84,    0,    0,    0,
    0,   85,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,   94,    0,
    0,    0,   95,    0,    0,    0,    0,   96,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,  938,    0,  103,  104,    0,    0,    0,    0,  938,
  938,  938,  938,    0,    0,  938,  938,    0,  938,  938,
  938,  938,  938,  938,  938,    0,    0,    0,  105,  106,
  107,  108,  938,    0,  938,  938,  938,  938,    0,    0,
    0,  938,  938,    0,    0,    0,    0,    0,  938,    0,
    0,    0,  938,  938,    0,  938,  938,  938,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  938,
    0,  938,    0,  938,  938,    0,    0,  938,    0,  938,
  938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
  938,  938,    0,    0,    0,    0,  938,  938,    0,    0,
  938,  938,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  938,  938,  938,  938,  938,
    0,    0,    0,  938,    0,    0,    0,  938,    0,    0,
    0,    0,  938,  938,  938,  938,  938,    0,    0,    0,
  938,    0,  938,    0,    0,    0,  783,    0,  938,  938,
    0,    0,    0,    0,  783,  783,  783,  783,    0,    0,
  783,  783,    0,  783,  783,  783,  783,  783,  783,  783,
    0,    0,    0,  938,  938,  938,  938,  783,    0,  783,
  783,  783,  783,    0,    0,    0,  783,  783,    0,    0,
    0,    0,    0,  783,    0,    0,    0,  783,  783,    0,
  783,  783,  783,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  783,    0,  783,    0,  783,  783,
    0,    0,  783,    0,  783,  783,  783,  783,  783,  783,
  783,  783,  783,  783,  783,  783,  783,    0,    0,    0,
    0,  783,  783,    0,    0,  783,  783,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  783,  783,  783,  783,  783,    0,    0,    0,  783,    0,
    0,    0,  783,    0,    0,    0,    0,  783,  783,  783,
  783,  783,    0,    0,    0,  783,    0,  783,    0,    0,
    0,  728,    0,  783,  783,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  294,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,  783,  783,
  783,  783,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  295,    0,   41,
    0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  296,
    0,    0,    0,  502,  729,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,  728,    0,  103,  104,
    0,    0,    0,    0,   56,   24,    0,   25,    0,    0,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,  105,  297,  107,  108,   64,    0,    0,
   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
  887,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  295,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  296,    0,    0,    0,  502,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,  908,    0,  103,  104,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  294,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,  105,  297,
  107,  108,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,  572,
    0,    0,    0,    0,    0,    0,    0,    0,  573,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  295,    0,   41,
    0,    0,    0,    0,    0,    0,    0,  574,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,   93,
    0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,   56,   24,    0,   25,  103,  104,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,    0,    0,    0,    0,   64,    0,    0,
   30,    0,    0,  105,  106,  107,  108,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  295,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  296,    0,    0,    0,  714,  959,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,  695,    0,  103,  104,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  294,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,  105,  715,
  107,  108,   64,    0,    0,   30,    0,    0,    0,  716,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  295,    0,   41,
    0,    0,    0,  469,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  296,
    0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,   56,   24,    0,   25,  103,  104,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,    0,    0,    0,    0,   64,    0,    0,
   30,    0,    0,  105,  297,  107,  108,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  295,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  296,    0,    0,    0,  714,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,  728,    0,  103,  104,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  294,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,  105,  715,
  107,  108,   64,    0,    0,   30,    0,    0,    0,  716,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  295,    0,   41,
    0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  296,
    0,    0,    0,  502,    0,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,  293,    0,  103,  104,
    0,    0,    0,    0,   56,   24,    0,   25,    0,    0,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,  105,  297,  107,  108,   64,    0,    0,
   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  295,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  296,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,  302,    0,  103,  104,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  294,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,  105,  297,
  107,  108,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  295,    0,   41,
    0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  296,
    0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,  570,    0,  103,  104,
    0,    0,    0,    0,   56,   24,    0,   25,    0,    0,
   26,  294,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,    0,  105,  297,  107,  108,   64,    0,    0,
   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  295,    0,   41,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,  802,    0,  103,  104,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  294,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,  105,  106,
  107,  108,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  295,    0,   41,
    0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  296,
    0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,  597,    0,  103,  104,
    0,    0,    0,    0,  597,  597,    0,  597,    0,    0,
  597,  597,    0,    0,    0,  597,  597,  597,    0,  597,
    0,    0,    0,  105,  297,  107,  108,  597,    0,    0,
  597,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  597,    0,    0,    0,    0,  597,    0,
  597,  597,  597,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  597,    0,  597,  597,
    0,    0,  597,    0,    0,  597,    0,  597,    0,  597,
  597,  597,  597,    0,  597,    0,    0,    0,    0,    0,
    0,    0,  597,    0,    0,  597,  597,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  597,  597,  597,  597,  597,    0,    0,    0,    0,    0,
    0,    0,  597,    0,    0,    0,    0,    0,  597,  597,
  597,  597,    0,    0,    0,  597,    0,  597,    0,    0,
    0,  485,    0,  597,  597,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  294,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,    0,  597,  597,
  597,  597,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   32,  742,
    0,    0,    0,   33,    0,   71,   72,   34,   24,    0,
   25,    0,    0,   26,    0,    0,    0,    0,   27,    0,
    0,   36,   28,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,   30,   80,   39,   40,  295,    0,   41,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,  327,   36,
    0,   37,    0,    0,    0,   38,    0,   95,    0,  879,
    0,    0,    0,   39,   40,    0,    0,   41,   24,    0,
   25,  189,    0,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  324,   30,    0,    0,    0,  190, 1056,    0,
    0,    0,    0,  105,  486,    0,   32,   24,    0,   25,
    0,   33,   26,    0,    0,   34,    0,   27,    0, 1186,
    0,   28,    0,    0,    0,    0,    0,    0,   24,   36,
   25,   37,   30,   26,    0,   38,  324,    0,   27,    0,
    0,    0,   28,   39,   40,   32,    0,   41,    0,    0,
   33,  312,  313,   30,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   32,    0,   36,    0,
   37,   33,    0,    0,   38,   34,    0,    0,    0,    0,
    0,    0,   39,   40,    0,    0,   41,    0,    0,   36,
  552,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,    0,    0,
    0,  312,  324,  324,  324,  324,  733,    0,    0,  324,
  324,    0,    0,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  347,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,    0,   50,    0,    0,    0,
    0,  324,    0,    0,  324,    0,    0,   50,   50,    0,
    0,  347,   50,    0,    0,    0,    0,   50,   50,   50,
    0,   50,    0,    0,   50,    0,    0,    0,   50,   50,
   50,    0,  347,   50,    0,    0, 1130,   50,    0,   50,
   50,    0,    0,    0,    0,   50,    0,    0,   50,    0,
   50,    0,    0,   50,   50,   50,   50,   50,    0,    0,
    0, 1131,   50,    0,    0,    0,   50,    0,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   50,    0,
 1132,   50,   50,    0,   50, 1133,    0,    0,   50,    0,
 1134,    0,    0, 1135,    0, 1136, 1137, 1138,    0,    0,
   49,    0, 1139,    0,    0,    0, 1140,    0,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1141,    0,
    0,    0, 1142,    0, 1143,   49,    0,    0,    0,    0,
   56,   24,    0,   25,    0,    0,   26,  294,    0,    0,
    0,   27,   61,   62,   49,   28,    0,    0, 1144,   49,
    0,    0,    0,   64,   49,    0,   30,   49,    0,   49,
   49,   49,    0, 1332,   50,    0,   49,    0,    0,   32,
   49,    0,    0,    0,   33,    0,   71,   72,   34,    0,
  572,    0,   49,    0,    0,    0,   49,    0,   49,  573,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78, 1323,   80,   39,   40,  295,    0,
   41,    0,   49,    0,   49,   49,    0,    0,  574,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
   93,    0,    0,    0,    0,    0,    0,    0,   95,  906,
    0,  575,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,   56,   24,    0,   25,  103,
  104,   26,  294,    0,    0,    0,   27,   61,   62,    0,
   28,    0,    0,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,  105,  106,  107,  108,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,  572,    0,    0,    0,    0,
    0,    0,    0,    0,  573,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,  574,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,   93,    0,    0,    0,    0,
    0,    0,    0,   95,    0,    0,  575,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
   56,   24,    0,   25,  103,  104,   26,  294,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,    0,    0,
    0,    0,    0,   64,    0,    0,   30,    0,    0,  105,
  106,  107,  108,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  295,    0,
   41,    0,    0,    0,  469,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
  296,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,   56,   24,    0,   25,  103,
  104,   26,  294,    0,    0,    0,   27,   61,   62,    0,
   28,    0,    0,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,  105,  297,  107,  108,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,  296,    0,    0,    0,    0,
  862,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
   56,   24,    0,   25,  103,  104,   26,  294,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,    0,    0,
    0,    0,    0,   64,    0,    0,   30,    0,    0,  105,
  297,  107,  108,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  295,    0,
   41,    0,    0,    0,    0,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
  296,    0,    0,    0,  496,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,   56,   24,    0,   25,  103,
  104,   26,  294,    0,    0,    0,   27,   61,   62,    0,
   28,    0,    0,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,  105,  297,  107,  108,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,  296,    0,    0,    0,  502,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
   56,   24,    0,   25,  103,  104,   26,  294,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,    0,    0,
    0,    0,    0,   64,    0,    0,   30,    0,    0,  105,
  297,  107,  108,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  295,    0,
   41,    0,    0,    0,    0,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
  296,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,   56,   24,    0,   25,  103,
  104,   26,  294,    0,    0,    0,   27,   61,   62,    0,
   28,    0,    0,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,  105,  297,  107,  108,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,   93,    0,    0,    0,    0,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
   56,   24,    0,   25,  103,  104,   26,  294,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,    0,    0,
    0,    0,    0,   64,    0,    0,   30,    0,    0,  105,
  106,  107,  108,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  295,    0,
   41,    0,    0,    0,    0,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
   93,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,   79,   79,    0,   79,  103,
  104,   79,   79,    0,    0,    0,   79,   79,   79,    0,
   79,    0,    0,    0,    0,    0,    0,    0,   79,    0,
    0,   79,    0,    0,  105,  994,  107,  108,    0,    0,
    0,    0,    0,    0,   79,    0,    0,    0,    0,   79,
    0,   79,   79,   79,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   79,    0,   79,
   79,    0,    0,   79,    0,    0,   79,    0,   79,    0,
   79,   79,   79,   79,    0,   79,    0,    0,    0,    0,
    0,    0,    0,   79,    0,    0,   79,   79,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   79,   79,   79,   79,   79,    0,    0,    0,    0,
    0,    0,    0,   79,    0,    0,    0,    0,    0,   79,
   79,   79,   79,    0,    0,    0,   79,    0,   79,    0,
  136,  136,    0,  136,   79,   79,  136,  136,    0,    0,
    0,  136,  136,  136,    0,  136,    0,    0,    0,    0,
    0,    0,    0,  136,    0,    0,  136,    0,    0,   79,
   79,   79,   79,    0,    0,    0,    0,    0,    0,  136,
    0,    0,    0,    0,  136,    0,  136,  136,  136,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  136,    0,  136,  136,    0,    0,  136,    0,
    0,  136,    0,  136,    0,  136,  136,  136,  136,    0,
  136,    0,    0,    0,    0,    0,    0,    0,  136,    0,
    0,  136,  136,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  136,  136,  136,  136,
  136,    0,    0,    0,    0,    0,    0,    0,  136,    0,
    0,    0,    0,    0,  136,  136,  136,  136,    0,    0,
    0,  136,    0,  136,    0,   56,   24,    0,   25,  136,
  136,   26,  294,    0,    0,    0,   27,   61,   62,    0,
   28,    0,    0,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,  136,  136,  136,  136,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  295,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,  327,  296,    0,    0,    0,    0,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
   56,   24,    0,   25,  103,  104,   26,  294,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,    0,    0,
    0,    0,    0,   64,    0,    0,   30,    0,    0,  105,
  328,    0,  108,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,   24,    0,   25,    0,
    0,   26,   36,    0,   37,   74,   27,    0,   38,    0,
   28,   76,    0,   78,    0,   80,   39,   40,  295,    0,
   41,   30,    0,    0,  469,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,    0,    0,   34,    0,  549,   89,   90,   91,  327,
    0,   24,    0,   25,  550,    0,   26,   36,   95,   37,
    0,   27,    0,   38,    0,   28,  551,    0,    0,    0,
   29,   39,   40,    0,    0,   41,   30,    0,   24,  552,
   25,    0,    0,   26,   31,    0,    0,    0,   27,   32,
    0,    0,   28,    0,   33,    0,    0,    0,   34,   35,
    0,    0,    0,   30,  105,  328,    0,    0,    0,    0,
    0,    0,   36,    0,   37,    0,   32,    0,   38,    0,
    0,   33,    0,    0,    0,   34,   39,   40,    0,    0,
   41,    0,    0,   24,    0,   25,    0,    0,   26,   36,
    0,   37,    0,   27,    0,   38,    0,   28,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,   30,    0,
  553,  312,    0,    0,  177,    0,  177,    0,    0,  177,
    0,   32,    0,    0,  177,    0,   33,    0,  177,    0,
   34,    0,    0,    0,    0,    0,    0,  190,    0,  177,
    0,    0,    0,    0,   36,    0,   37,    0,    0,    0,
   38,    0,  177,    0,    0,    0,    0,  177,   39,   40,
    0,  177,   41,    0,  476,   42,  312,    0,    0,    0,
    0,    0,    0,    0,  177,  177,  177,  177,    0,  177,
    0,  177,    0,    0,  177,    0,    0,    0,  177,  177,
  177,    0,  313,  177,    0,    0,    0,  177,    0,  177,
    0,   24,    0,   25,    0,    0,   26,    0,    0,    0,
    0,   27,  177,    0,    0,   28,    0,  177,    0,    0,
   24,  177,   25,    0,    0,   26,   30,    0,    0,    0,
   27,    0,  962,    0,   28,  177,    0,  177,    0,   32,
    0,  177,    0,    0,   33,   30,    0,  347,   34,  177,
  177,    0,    0,  177,    0,    0,    0,  177,   32,    0,
    0,    0,   36,   33,   37,    0,    0,   34,   38,    0,
    0,    0,    0,    0,    0,    0,   39,   40,  177,    0,
   41,   36,    0,   37,  312,    0,    0,   38,    0,    0,
  962,    0,   24,    0,   25,   39,   40,   26,    0,   41,
    0,    0,   27,  504,    0,    0,   28,    0,    0,    0,
    0,   24,    0,   25,    0,    0,   26,   30,    0,    0,
    0,   27,    0,    0,    0,   28,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,   30,    0,  177,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,   36,   33,   37,    0,    0,   34,   38,
    0,    0,    0,    0,    0,  347,    0,   39,   40,    0,
    0,   41,   36,    0,   37,  552,    0,    0,   38,    0,
    0,    0,    0,   24,  347,   25,   39,   40,   26,    0,
   41,    0,    0,   27,  189,    0,    0,   28,    0,    0,
    0,    0,  477,    0,  477,    0,    0,  477,   30,    0,
    0,    0,  477,    0,    0,    0,  477,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,  477,    0,  178,
   34,  178,    0,    0,  178,    0,    0,    0,    0,  178,
  477,    0,    0,  178,   36,  477,   37,    0,    0,  477,
   38,    0,    0,    0,  178,    0,  347,    0,   39,   40,
    0,    0,   41,  477,    0,  477, 1498,  178,    0,  477,
    0,    0,  178,    0,    0,  347,  178,  477,  477,    0,
    0,  477,    0,    0,    0,  477,    0,    0,    0,  177,
  178,  177,  178,    0,  177,    0,  178,    0,    0,  177,
    0,    0,    0,  177,  178,  178,    0,    0,  178,    0,
    0,    0,  178,    0,  177,  187,    0,  187,    0,    0,
  187,    0,    0,    0,    0,  187,    0,  177,    0,  187,
    0,    0,  177,    0,    0,    0,  177,    0,    0,    0,
  187,    0,    0,    0,    0,    0,    0,  347,    0,    0,
  177,    0,  177,  187,    0,    0,  177,    0,  187,    0,
    0,    0,  187,    0,  177,  177,  477,    0,  177,    0,
    0,    0,  177,    0,    0,    0,  187,    0,  187,   30,
    0,    0,  187,    0,   30,    0,    0,    0,    0,    0,
  187,  187,    0,  178,  187,   30,   30,    0,  187,    0,
   30,    0,    0,    0,    0,   30,   30,   30,  208,   30,
    0,    0,   30,    0,    0,    0,   30,   30,   30,    0,
    0,   30,    0,    0,    0,   30,    0,   30,   30,    0,
    0,    0,    0,   30,    0,    0,   30,    0,   30,    0,
    0,   30,   30,   30,   30,   30,    0,    0,    0,    0,
   30,    0,    0,  177,   30,    0,   30,    0,  209,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,   30,
   30,    0,   30,    0,    0,    0,   30,    0,    0,  187,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
    0,    0,   30,   30,    0,    0,    0,    0,    0,  210,
  211,  212,  213,    0,  214,  215,  216,  217,  218,  219,
  220,  221,   36,    0,  222,  223,  224,  225,  226,  227,
  228,  229,    0,   36,    0,    0,    0,    0,   36,    0,
    0,    0,    0,   36,    0,    0,    0,   36,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,    0,    0,   36,   36,    0,    0,    0,
    0,   36,    0,    0,    0,    0,   36,    0,    0,   36,
    0,   36,   36,   36,    0,    0,    0,    0,   36,    0,
    0,    0,   36,    0,   36,   34,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   34,    0,   36,    0,
   36,   34,    0,    0,   36,    0,   34,    0,    0,    0,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,   30,    0,    0,   34,   34,
   36,   36,    0,    0,   34,    0,    0,    0,    0,   34,
    0,    0,   34,    0,   34,   34,   34,    0,    0,    0,
   30,   34,    0,    0,    0,   34,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   34,   30,   30,
   30,   34,    0,   34,   30,    0,    0,   34,    0,   30,
    0,    0,   30,    0,   30,   30,   30,    0,    0,   30,
    0,   30,    0,   30,    0,   30,    0,   34,    0,    0,
    0,    0,    0,   34,   34,    0,    0,   30,    0,    0,
    0,   30,   30,   30,    0,    0,    0,   30,    0,    0,
    0,    0,   30,    0,    0,   30,    0,   30,   30,   30,
    0,    0,    0,    0,   30,    0,    0,   30,   30,    0,
    0,   49,    0,   30,   30,    0,    0,    0,    0,    0,
   30,    0,   49,   49,   30,    0,   30,   49,    0,    0,
    0,    0,   49,   49,   49,    0,   49,    0,    0,   49,
    0,    0,    0,   49,   49,   49,    0,    0,   49,    0,
   30,    0,   49,    0,   49,   49,   30,   30,    0,    0,
   49,    0,    0,   49,    0,   49,    0,    0,   49,   49,
   49,   49,   49,    0,    0,    0,    0,   49,    0,    0,
    0,   49,    0,   49,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   49,   49,    0,   49,   49,    0,   49,
    0,    0,    0,   49,    0,   49,   49,    0,    0,    0,
   49,    0,    0,    0,    0,   49,   49,   49,    0,   49,
    0,    0,   49,   49,    0,    0,   49,   49,   49,   82,
    0,   49,    0,    0,    0,   49,    0,   49,   49,    0,
    0,    0,    0,   49,    0,    0,   49,    0,   49,    0,
    0,   49,   49,   49,   49,   49,    0,    0,    0,    0,
   49,    0,    0,    0,   49,    0,   49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   49,   49,    0,   49,
   49,    0,   49,    0,    0,    0,   49,    0,   49,   49,
    0,    0,    0,   49,    0,    0,    0,    0,   49,   49,
   49,    0,   49,    0,    0,   49,   49,    0,    0,   49,
   49,   49,  217,    0,   49,    0,    0,    0,   49,    0,
   49,   49,    0,    0,    0,    0,   49,    0,    0,   49,
    0,   49,    0,    0,   49,   49,   49,   49,   49,    0,
    0,    0,    0,   49,    0,    0,    0,   49,    0,   49,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   49,
   49,    0,   49,   49,    0,   49,    0,    0,    0,   49,
    0,   49,   49,    0,    0,    0,   49,    0,    0,    0,
    0,   49,   49,   49,    0,   49,    0,    0,   49,   49,
    0,    0,   49,   49,   49,   83,    0,   49,    0,    0,
    0,   49,    0,   49,   49,    0,    0,    0,    0,   49,
    0,    0,   49,    0,   49,    0,    0,   49,   49,   49,
   49,   49,   49,    0,    0,    0,   49,    0,    0,    0,
   49,    0,   49,   49,    0,    0,    0,    0,   49,    0,
    0,    0,   49,   49,    0,   49,   49,   49,   49,    0,
    0,    0,   49,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   49,   49,    0,    0,    0,
    0,   49,   49,    0,    0,    0,   49,    0,  218,   49,
    0,   49,   49,   49,   49,    0,    0,    0,   49,    0,
    0,    0,   49,    0,   49,   49,    0,    0,   49,    0,
   49,    0,    0,    0,   49,   49,    0,    0,   49,   49,
   49,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,   49,    0,    0,    0,   49,   49,    0,
    0,    0,    0,   49,   49,    0,    0,    0,   49,    0,
   38,   49,   49,   49,   49,   49,    0,   49,    0,    0,
   49,    0,   49,    0,   49,   49,   49,   49,   49,   49,
   49,    0,    0,    0,   49,    0,   49,    0,   49,    0,
   49,    0,   49,    0,   49,    0,   49,    0,    0,    0,
   49,    0,    0,    0,   49,   49,   49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   49,    0,    0,   49,
    0,    0,   40,    0,   49,    0,    0,    0,    0,   49,
   49,    0,   49,   49,   49,    0,  199,   49,   49,   49,
   49,   49,    0,   49,    0,    0,   49,    0,   49,    0,
   49,   49,    0,   49,   49,   49,    0,    0,   49,   49,
   49,   49,   49,    0,   49,    0,   49,    0,   49,    0,
    0,    0,    0,    0,    0,    0,   49,    0,    0,    0,
   49,    0,   49,    0,   49,    0,    0,    0,    0,    0,
    0,    0,   49,    0,   49,   49,    0,    0,  201,    0,
    0,    0,    0,   49,    0,    0,   49,    0,   49,    0,
    0,    0,  287,   49,    0,    0,   49,    0,   49,   49,
   49,    0,    0,  630,    0,   49,    0,    0,    0,   49,
    0,    0,  630,  630,    0,    0,    0,  630,    0,    0,
    0,   49,  630,  630,  630,   49,    0,   49,    0,  630,
    0,    0,    0,  630,  630,  630,    0,    0,  630,    0,
    0,    0,  630,    0,  630,    0,    0,   50,    0,    0,
    0,   49,    0,  630,    0,    0,    0,  288,   50,  630,
    0,    0,    0,   50,    0,  630,    0,    0,   50,    0,
    0,    0,   50,  630,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  630,   49,    0,   49,
   50,   50,    0,  630,    0,    0,   50,    0,    0,    0,
    0,   50,    0,    0,   50,    0,   50,   50,   50,    0,
    0,    0,   49,   50,    0,  630,  630,   50,    0,   50,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   50,
    0,   49,    0,   50,    0,   50,   49,    0,    0,   50,
    0,   49,    0,    0,   49,    0,   49,   49,   49,    0,
    0,   49,    0,   49,    0,  629,  629,   49,    0,   50,
  629,    0,    0,    0,    0,  629,  629,  629,    0,   49,
    0,    0,  629,   49,    0,   49,  629,  629,  629,    0,
    0,  629,    0,    0, 1300,  629,    0,  629, 1158,    0,
    0,    0,    0, 1159, 1301, 1302,  629,    0,    0,   49,
 1303,    0,  629,    0, 1319, 1305, 1306,    0,    0, 1307,
    0,    0,    0, 1308,    0,    0,  629,    0,    0,    0,
    0,    0,    0,    0, 1309,    0,    0,    0,    0,  629,
 1310,    0,    0,    0,    0,    0,  629,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1311,    0,    0,
    0,    0,    0,    0, 1312,
  };
  protected static readonly short [] yyCheck = {            17,
  502,   51,   17,  291,    4,   17,   20,  283,    6,  292,
   18,   20,  311,   87,   88,   17,  241,  186,  157,  475,
  331,  539, 1090,  321,   20,  191,  359,  887,  290,  288,
  500,  765,  192,   77,  108,  555,  280,   47,  733,    6,
   58,  201,    0,    0,  288,  563,    0,    0,  256, 1089,
 1214, 1215, 1216,   20,    0, 1260,  433,  346,   73,  201,
  268,   79,   77,   81,  256, 1146,  309,    0,  256,  256,
 1275, 1111,  256,   51,  256,  280,  256,    0,  622,  623,
   95,  277,  268,  300,  256,  335,  886,   17,  256,  268,
  276,  256, 1249,  385,  256,  256,  335,  256,  354,  263,
  263,  256,  379,  283,  309,  299,  299,  256,  256,  383,
  268,   17,  425,  257,  379,  379,   17,  374,   17,  300,
   87,   88,  387, 1249,   17,   17,  439,  647, 1285,  706,
  256,  708,  206,  207,  256,  427,  392,  187,  256,  157,
  256,  108,  157,  256,  324,  157,  402,  313,   17,  256,
  950,   17,  269,   17,  314,  157,  350,  350,  382, 1285,
  384,  325,  325,  440,  313,  256,  440,  500,  352,  425,
  747,  288,  429,  435,   17,  440,  440,  754,  374,  429,
   17,  347,  256,  439,  378,  378,  352,  379,  374,  239,
  429,  256,  351,  385,  419,   93,  380,  313,  496,   97,
   98,   99,  100,  101,  102,  103,  104,  709,  282, 1249,
  378,  499,  474,  385,  369,    0,  460,  460,  383,  387,
  230,  379,  383,  440,  385,  433,  300,  157,  539,  773,
  392,  246,  475,  429,  430,  256,  251,  235, 1443,  206,
  207,  429,  429,  429,  392, 1285,  535,  429,  982,  429,
   20,  157,  563, 1334,  433,  460,  157,  801,  157,  636,
  382,  387,  422,  640,  157,  157,  432,  385,  283,  343,
  475,  286,  287,  386, 1479,  433, 1481,  521,  521,  440,
  435,  436,  437,  438,  256,  392,  301,  453,  157,  256,
  308,  157,  307,  157,  309,  386,  311, 1502,  993,  257,
  257,  375,  376,  257,  257, 1039,  350,  322,  323,  469,
  470,  257,  472,  280,  157,  282,  521,   87,   88,  331,
  157,  386,  256,  793,  257,  292,  400,  401,  470,  331,
  472,  256,  346,  300,  257,  350,  256,  382,  108,  256,
  892,  369,  309,  358,  359,  256,  361,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371, 1521,  316,  648,
  257,  527,  316,  316,  385,  335,  387,  300,  912, 1437,
  914,  392,  256,  917,  876,  256,  343,  954,  393,  346,
  256,  949,  280,  316, 1548,  256,  431,  553,  687,  256,
  288,  256,  442,  316,  379,  379,  256,  301,  296,  565,
  856,  567,  256,  569,  262,  973,  256,  379,  375,  376,
  314,  385,  350,  385,  423,  256,  256,   93,  374,  269,
  379,   97,   98,   99,  100,  101,  102,  103,  104,  439,
  440,  313,  266,  400,  401,  445,  206,  207,  288,  448,
  378,  985, 1019,  987,  988,  463,  948,  380,  306,  387,
  352,  385,  711,  427,  679,  440,  440,  380,  383,  429,
  793,  381,  360, 1015,  381,  385,  799,  711,  385,  635,
  380,  256,  383,  429,  372,  373,  374,  277,  380,  377,
  378,  440,  282,  498,  462,  500,  256,  502, 1008,  778,
  324,  256,  658,  460,  512,  513, 1232, 1357, 1075,  383,
  285,  382,  516,  384,  380,  386,  266,  516,  475,  380,
  525,  272,  282,  528,  299,  382, 1093,  384,  383,  386,
  516,  535,  292,  383,  387,  429,  380,  539,  546, 1192,
  300,  389,  390,  379, 1249,  256, 1080,  539, 1249,  380,
  380,  555,    0,  304,  412,  374, 1249,  354, 1125,  516,
  975,  563,  386,  353,  521,  844,  424,  572,  573,  379,
 1104,  563,  460,  313,  324,  350,  272,  383,  535,  256,
 1285,  869,  333,  343, 1285,  350,  346,  440,  383, 1315,
 1098,  720, 1285,  743, 1320,  392, 1365,  383,  555,  755,
 1369, 1370, 1017,  378,  440,  402,  929,  382,  304,  384,
  429,  386,  617,  378,  887,  375,  376,  622,  623,  429,
  625,  873, 1156,  378, 1350,  380,  314,  382,  425,  317,
  296, 1165, 1249,  521,  440,  323,  386,  333, 1407,  350,
  400,  401,  439,  647,  355,  440,  357,  335, 1094,  360,
  361,  429,  363,  364,  440,  321,  934,  425,   21,  864,
  314,  439,  951,  423, 1249,  256,  272,  672, 1285,  323,
  875,  439,  560,  350,  738,  350,  431,  380,  355,  434,
  357,  384,  687,  360,  361,  963,  363,  364,  448,   52,
  647, 1460, 1461, 1462,  360,  383,  760,  378,  304,  379,
 1285,  382,  429,  378,  709,  354,  372,  373,  374,  714,
  774,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,  387,  388,  389,  390,  391,  392,  333, 1051,  440,
 1383,  434,  740, 1386, 1387,  402, 1389, 1390,  256, 1392,
  379,  429,  402,  383,  383,  385,  751,  387,  387,  429,
  431,  368,  757,  402,  759,  763,  516,  765,  425,  350,
 1026,  374,  921,  440,  355,  425,  357,  392,  773,  360,
  361, 1072,  363,  364,  778,  535,  425,  402, 1431,  439,
  397,  738,  846, 1436,  397, 1198,  826, 1212,  793,  256,
  439, 1304, 1058,  857,  799,  555,  801, 1098,  301,  314,
  425,  387,  317,  760, 1504, 1505, 1319, 1220,  323,  257,
 1235,  314, 1090,  261,  439,  368,  429,  774,  392,  380,
  335,  778,  387,  711,  272, 1126,  387,  382,  402,  277,
  496,  384,  350, 1533,  282,  834,  841,  355,  286,  357,
  256,  301,  360,  361,  397,  363,  364,  368,  368,  440,
  256,  425,  300, 1119,  314,  256,  304,  305,  385,  864,
  387,  378,  310,  384,  384,  392,  381,  315,  316,  874,
  318,  876,  320,  321,  322,  314,  397,  397,  317,  327,
  360,  849,  314,  331,  323,  333,  383,  647,  385,  846,
  387,  323,  429, 1108,  560,  343,  335,  377,  378,  347,
  857,  349,  439,  335,  256,  353,  381,  912,  378,  914,
  385,  378,  917,  380,  429,  382,  383,  387,  385,  256,
  387,  256,  440,  384,  929,  373,  387,  926,  382,  934,
  887,  379,  380,  378,  350, 1304, 1305, 1306,  382,  355,
  384,  357,  387,  948,  360,  361,  951,  363,  364,  350,
 1319,  378,  314,  380,  355,  317,  357,  378,  256,  360,
  361,  323,  363,  364,  431, 1334,  387,  434,  374,  385,
  405,  406,  368,  335,  982, 1467, 1242,  368,  738,  385,
  985,  387,  987,  988,  385,  990,  392,  379,  384,  380,
 1205,  383, 1484,  384,  380,  387,  387,  383,  350,  429,
  760,  397, 1371,  355, 1008,  357,  397,  384,  360,  361,
 1000,  363,  364,  381,  774,  350, 1021,  385,  778,  390,
  355, 1026,  357,  429,  440,  360,  361,  378,  363,  364,
  379, 1039, 1037, 1038,  383,  314,  387,  374,  317,  440,
  383,  432,  385,  380,  323, 1537, 1051,  272,  385, 1089,
  387, 1008,  277, 1058, 1052,  392,  335,  282,  381,  379,
  378,  395,  385,  393,  394,  385,  383,  429,  385,  387,
 1072, 1111,  392,  400,  834, 1080,  374,  407,  408,  304,
 1072, 1086,  380,  350, 1357, 1090,  846,  385,  440,  387,
  396,  381,  429,  378,  392,  385, 1098,  857,  411, 1104,
 1105,  397,  387,  383,  384,  440, 1098,  387,  333,  409,
  410,  378, 1176,  380, 1119,  383,  383,  368,  385,  387,
  387, 1089,  381,  382, 1126,  392,  385,  887,  353,  380,
  256,  429,  383,  384, 1126,  385,  387,  387,  381,  265,
  383,  267,  385, 1111,  270,  381,  397,  383,  401,  275,
  429, 1156,  256,  279, 1158,  397,  398,  399, 1198, 1437,
 1165,  374,  429,  387,  290,  381,  926, 1323,  381,  385,
  383, 1159,  385,  381,  382,  383,  384,  303, 1166,  392,
 1220,  432,  308, 1247, 1340,  381,  312,  383,  432,  385,
 1178,  382, 1180,  384, 1182,  381,  380,  383, 1354, 1355,
  326, 1158,  328,  869,  384,  381,  332,  383, 1248, 1249,
  382, 1367,  403,  404,  340,  341,  429,  379,  344, 1176,
  425,  383,  348, 1263, 1192, 1289,  381,  379,  383,  429,
 1198,  383,  423,  383,   20,  385,  385, 1242,  387,  316,
  431,  301, 1199,  434,  256, 1285,  350, 1287, 1008,  379,
  380,  355, 1220,  357,  380, 1212,  360,  361,  429,  363,
  364,  381,  382,  386,  384,  385,  386,  383,  381,  385,
  383,  378,  381,   59,  383,  385,  387,  387, 1235,  385,
 1248,  387,   68,  386,  385, 1293,  387, 1351,  387, 1353,
 1247,  385,  387,  387,  387, 1263,  365,  366,   84,  365,
  366,   87,   88,  429,  379,  380,   92,  301,  368,  301,
  375,  376,  375,  376,  374,  429, 1380, 1195, 1196, 1287,
  380,  354,   61,  383,  384,  277,   65,   66,   67,  383,
   69,   70, 1289, 1201, 1202,   74,   75,  397,  387, 1347,
 1380,  368,   81,  425,   83,  429,   85,  374,  379,  380,
  367,   90,   91,  380,  386,  429,  383,  384,  385,  385,
  386, 1365,  380,  383,  383, 1369, 1370,  256,  379,  429,
  397,  387,  432,  383,  429,  114,  385,  383, 1418,  301,
  301,  385,  383,  383,  387,  383,  385,  382, 1452,  256,
  301,  301,  383,  386, 1351,  392, 1353,  387, 1158, 1463,
 1357,  385,  429, 1407,  384, 1445, 1446,  385, 1365,  384,
  383,  197, 1369, 1370,  385, 1383, 1176, 1425, 1386, 1387,
  385, 1389, 1390, 1380, 1392,  385, 1466,  385,  387,  386,
  383,  385, 1437,  440,  385,  378,  383,  385,  434, 1199,
  354,  383,  379,  301,  301,  382,  385,  384,  385, 1454,
 1407,  381, 1212,  429,  382,  378, 1460, 1461, 1462,  429,
  246, 1465, 1467, 1431, 1504, 1505,  403,  404, 1436,  256,
  281,  256,  392,  429,  392, 1235,  256,  256,  378, 1484,
  379,  387,  383,  354,  362,    0,  423, 1247,  392,  381,
  385,  387,  386, 1533,  431, 1452,  301,  434,  385,  385,
  381,  383,  434, 1460, 1461, 1462, 1463,  383, 1465,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  392,
  358, 1529, 1530,  387,  392,  256,  256,  383,  379, 1289,
  316,  358, 1537,  387,  320,  385,  381, 1545, 1546,  392,
  392, 1301,  383,  378, 1304, 1305, 1306,  381, 1308,  359,
 1310,  290,  359,  379,  379,  429,  295,  386,  367, 1319,
  256,  256,  382,  378,  285,  383,  305,  299,  429,  385,
  256,  350,  358,  359, 1334,  350,  355,  379,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  429,
  387, 1351,  392, 1353,  378,  378,  378, 1357,  387,  429,
  379,  382,  381,  379,  383, 1365,  385,  386,  387, 1369,
 1370, 1371,  385,  379,  400,  401,  395,  396,  404,  383,
 1380,  400,  401,  379,  293,  429,  429,  386,  429,  386,
  409,  410,  411,  412,  429,  429,  382,  386,  382,  256,
  426,  382,  382,  386,  382,  424,  382, 1407,  265,  386,
  267,  386,  438,  270,  425,  384,  383,  429,  275,  378,
  384,  440,  279,  256,  379,  382,  384,  382,  380,  384,
  385,  382,  386,  290,  383,  380,  392,  387,  385,  383,
  383,  383,    0,  383,  383,  383,  303,  473,  403,  404,
  476,  308, 1452,  378,  385,  312,  386,  256,  392,  386,
 1460, 1461, 1462, 1463,  385, 1465,  386,  386,  423,  326,
  386,  328,  386,  385,  500,  332,  431,  387,  381,  434,
  387,  429,  387,  340,  341,  387,  465,  344,  429,  383,
  516,  348,  471,  379,  520,  392,  429,  429,  381,  378,
  392,  256,  257,  325,  386,  263,  379,  348,  379,  264,
  265,  266,  267,  268,    0,  270,  271,  374,  273,  274,
  275,  276,  277,  278,  279,    0,  281,  378,  554,  387,
  379,  383,  287,  512,  289,  290,  291,  292,    0,  378,
  387,  296,  297,  379,  429,  383,  383,  381,  303,  378,
  381,  429,  307,  308,  379,  310,  311,  312,  263,  256,
  387,  379,  383,  387,  379,  379,  383,  387,  387,  324,
  383,  326,  429,  328,  329,  387,  383,  332,  379,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  379,  619,  378,  621,  351,  352,  379,  429,
  355,  356,    0,  429,  630,  378,  384,  387,  380,  325,
  387,  387,  387,  387,   50,  370,  371,  372,  373,  374,
  387,  387,  387,  378,  379,  387,  187,  382,   12,    5,
 1111,  834,  387,  388,  389,  390,  391,    0,  926,  516,
  395, 1051,  397, 1051, 1287, 1263,  672, 1474,  403,  404,
 1440, 1490, 1470,  350, 1457, 1425, 1310, 1285,  355,  849,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  696,  849, 1546,  428,  429,  430,  431,  678,  433,  844,
  849, 1531,  379, 1446,  381,  440,  383, 1309,  385,  386,
  387, 1450, 1445, 1530, 1220, 1355, 1308,  500,  256,  257,
  714,  826,  869,  573,  799,  358,  264,  265,  266,  267,
  268,   71,  270,  271,  324,  273,  274,  275,  276,  277,
  278,  279,  387,  711,  388,  391,  672,  389, 1226,  287,
  390,  289,  290,  291,  292,  963,  392,  535,  296,  297,
  778, 1289, 1126,  440, 1072,  303,  157, 1038,  973,  307,
  308,  777,  310,  311,  312, 1029, 1031, 1094, 1006,  409,
  514,  885,  628,  409,  832, 1174,  324,  793,  326, 1105,
  328,  329,  831,  799,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,   -1,
   -1,   -1,   -1,  351,  352,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,
  378,  379,   -1,   -1,  382,   -1,   -1,   -1,   -1,  387,
  388,  389,  390,  391,   -1,   -1,   -1,  395,   -1,  397,
   -1,   -1,   -1,   -1,   -1,  403,  404,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  880,   -1,  882,   -1,   -1,  257,
   -1,   -1,   -1,  261,  890,   -1,   -1,   -1,   -1,   -1,
  428,  429,  430,  431,  272,  433,   -1,   -1,   -1,  277,
   -1,   -1,  440,   -1,  282,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,
   -1,   -1,   -1,  929,   -1,   -1,  304,  305,   -1,   -1,
   -1,   -1,  310,   -1,   -1,   -1,   -1,  315,  316,   -1,
  318,    0,  320,  321,  322,   -1,   -1,   -1,   -1,  327,
   -1,   -1,   -1,  331,   -1,  333,  299,  273,  301,   -1,
   -1,  277,   -1,  306,   -1,  343,  282,  283,  284,  347,
   -1,  349,   -1,  289,   -1,  353,   -1,  293,  294,  295,
   -1,   -1,  298,   -1,   -1,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  373,   -1,  313, 1004,   -1,
   -1,  379,  380,  319,   -1,   -1,   -1,  350,   -1,   -1,
   -1,   -1,  355,   -1,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,   -1,
  346,  374,   -1,   -1,   -1,  378,  379,  353,  381,  382,
  383,  384,  385,  386,  387, 1051,  389,  390,   -1,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,   -1,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,   -1,  256,  427,   -1,  429,   -1,  431,  262,
   -1,  434,  261,   -1,   -1,   -1,   -1,  440,    0,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  290,  299,   -1,  301,   -1,
   -1,   -1,   -1,  306,   -1,   -1,  305,   -1,  303,   -1,
   -1,  310,   -1,  308,   -1,  310,  315,  312,   -1,  318,
   -1,  320,  321,  322,   -1,   -1,   -1,   -1,  327,   -1,
   -1,  326,  331,  328,   -1,   -1, 1172,  332,  333,   -1,
   -1,   -1,   -1,   -1,  343,  340,  341,  350,  347,  344,
  349,   -1,  355,  348,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,  368,   -1,  256,   -1,   -1,
   -1,  374,   -1,  262,  373,  378,  379,  380,  381,  382,
  383,  384,  385,  386,  387,   -1,  389,  390,   -1,  392,
  393,  394,  395,  396,  397,   -1,   -1,  400,  401,   -1,
   -1,   -1,  405,  406,  407,  408,  409,  410,  411,  412,
  299,   -1,  301,   -1,   -1,   -1,   -1,  306,   -1,   -1,
   -1,  424,   -1,   -1,  427,    0,  429,   -1,  431,   -1,
  429,  434,   -1,   -1,  429,   -1,   -1,  440,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,   -1,   -1,  355,   -1,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,   -1,   -1,  378,
  379,  380,  381,  382,  383,   -1,  385,  386,  387,   -1,
  389,  390,   -1,  392,  393,  394,  395,  396,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,  405,  406,  407,  408,
  409,  410,  411,  412,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,  424,   -1,   -1,  427,    0,
  429,   -1,  431,   -1,   -1,  434,   -1,  350,   -1,   -1,
   -1,  440,  355,   -1,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,   -1,  299,   -1,  301,
   -1,   -1,   -1,   -1,  306,   -1,  379,   -1,  381,   -1,
  383,   -1,  385,  386,  387,   -1,   -1,   -1,   -1,   -1,
  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,   -1,
   -1,   -1,  405,  406,  407,  408,  409,  410,  411,  412,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  350,   -1,
   -1,  424,   -1,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  440,   -1,   -1,
   -1,   -1,  374,   -1,   -1,   -1,  378,  379,  380,  381,
  382,  383,   -1,  385,  386,  387,   -1,  389,  390,   -1,
  392,  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,  405,  406,  407,  408,  409,  410,  411,
  412,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,  424,   -1,   -1,  427,   -1,  429,    0,  431,
   -1,   -1,  434,   -1,  350,   -1,   -1,   -1,  440,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,   -1,  299,   -1,  301,   -1,   -1,   -1,
   -1,  306,   -1,  379,   -1,  381,   -1,  383,   -1,  385,
  386,  387,   -1,   -1,   -1,   -1,   -1,  393,  394,  395,
  396,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,  405,
  406,  407,  408,  409,  410,  411,  412,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,  424,   -1,
  355,   -1,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  440,  256,   -1,    0,   -1,  374,
   -1,  262,  261,  378,  379,   -1,  381,  382,  383,   -1,
  385,  386,  387,   -1,  389,  390,   -1,  392,  393,  394,
  395,  396,   -1,   -1,   -1,  400,  401,  286,   -1,   -1,
  405,  406,  407,  408,  409,  410,  411,  412,  299,   -1,
  301,   -1,   -1,   -1,   -1,  306,  305,   -1,   -1,  424,
   -1,  310,  427,   -1,  429,   -1,  315,   -1,   -1,  318,
   -1,  320,  321,  322,   -1,  440,   -1,   -1,  327,   -1,
   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  343,   -1,   -1,   -1,  347,  350,
  349,   -1,   -1,   -1,  355,   -1,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  373,   -1,   -1,  378,  379,   -1,
  381,  382,  383,   -1,  385,  386,  387,   -1,  389,  390,
   -1,  392,  393,  394,  395,  396,   -1,   -1,   -1,  400,
  401,   -1,   -1,   -1,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,   -1,   -1,  257,   -1,   -1,   -1,  261,
   -1,   -1,   -1,  424,   -1,   -1,  427,   -1,  429,   -1,
  272,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,  440,
  282,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  300,   -1,
   -1,   -1,  304,  305,   -1,   -1,   -1,   -1,  310,   -1,
   -1,   -1,   -1,  315,  316,   -1,  318,   -1,  320,  321,
  322,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,  331,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  343,   -1,   -1,   -1,  347,   -1,  349,   -1,   -1,
   -1,  353,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,
  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,  373,   -1,   -1,  277,   -1,   -1,  379,  380,  282,
  283,  284,   -1,  286,   -1,  387,  289,   -1,   -1,   -1,
  293,  294,  295,   -1,   -1,  298,   -1,   -1,  301,  302,
   -1,  304,  305,   -1,   -1,   -1,   -1,  310,   -1,   -1,
  313,  314,  315,  316,   -1,  318,  319,  320,  321,  322,
   -1,   -1,  325,   -1,  327,   -1,   -1,   -1,  331,   -1,
  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  440,   -1,
  343,   -1,   -1,  346,  347,   -1,  349,   -1,   -1,   -1,
  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  373,   -1,  375,  376,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,  289,
  290,  291,  292,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,  307,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,   -1,  256,   -1,
   -1,  351,  352,   -1,  262,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,  387,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,  306,   -1,
   -1,   -1,   -1,  403,  404,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  428,  429,
  430,  431,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  440,   -1,  350,   -1,   -1,   -1,   -1,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,   -1,   -1,   -1,   -1,  374,   -1,   -1,   -1,
   -1,  379,  380,  381,  382,  383,  384,  385,  386,  387,
   -1,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,  256,   -1,
   -1,  429,   -1,  431,  262,   -1,  434,   -1,  350,   -1,
   -1,   -1,  440,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,
   -1,  383,   -1,  385,  386,  387,   -1,   -1,  306,   -1,
   -1,  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,  405,  406,  407,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  424,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  440,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
   -1,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,  256,   -1,
   -1,   -1,   -1,  431,  262,   -1,   -1,   -1,  350,   -1,
   -1,   -1,  440,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,
   -1,  383,   -1,  385,  386,  387,   -1,   -1,  306,   -1,
   -1,  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  407,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  424,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  440,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  378,  379,   -1,  381,  382,  383,  384,  385,  386,  387,
   -1,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,  256,   -1,
   -1,   -1,   -1,  431,  262,   -1,  434,   -1,  350,   -1,
   -1,   -1,  440,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,
   -1,  383,   -1,  385,  386,  387,   -1,   -1,  306,   -1,
   -1,  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  407,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  424,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  440,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,  381,  382,  383,  384,  385,  386,  387,
   -1,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,  256,   -1,
   -1,   -1,   -1,  431,  262,   -1,  434,   -1,  350,   -1,
   -1,   -1,  440,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,
   -1,  383,   -1,  385,  386,  387,   -1,   -1,  306,   -1,
   -1,  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  407,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  424,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  440,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,  381,  382,  383,  384,  385,  386,  387,
   -1,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,  256,   -1,
   -1,   -1,   -1,  431,  262,   -1,  434,   -1,  350,   -1,
   -1,   -1,  440,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,
   -1,  383,   -1,  385,  386,  387,   -1,   -1,  306,   -1,
   -1,  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  407,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  424,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  440,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,  381,  382,  383,  384,  385,  386,  387,
   -1,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,  256,   -1,
   -1,   -1,   -1,  431,  262,   -1,  434,   -1,  350,   -1,
   -1,   -1,  440,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,
   -1,  383,   -1,  385,  386,  387,   -1,   -1,  306,   -1,
   -1,  393,  394,  395,  396,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  407,  408,  409,  410,  411,
  412,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  440,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,  306,  381,  382,  383,  384,  385,  386,  387,
   -1,  389,   -1,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,  256,   -1,
   -1,   -1,   -1,  431,  262,   -1,  434,   -1,   -1,   -1,
   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,  382,   -1,
  384,  385,   -1,   -1,   -1,  389,  390,   -1,   -1,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  306,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,  423,
  424,   -1,  266,   -1,   -1,   -1,   -1,  431,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,
   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,   -1,  306,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,  381,   -1,  383,   -1,  385,  386,  387,
  324,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,   -1,   -1,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  256,  424,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  440,   -1,   -1,  379,   -1,  381,  382,  383,
  384,  385,  386,  387,   -1,  389,  390,   -1,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,   -1,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
  424,   -1,  256,   -1,   -1,   -1,   -1,  431,  262,   -1,
  434,   -1,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,   -1,   -1,  355,   -1,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,   -1,  306,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  381,   -1,  383,   -1,  385,  386,  387,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,
   -1,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,   -1,   -1,   -1,   -1,  440,
  306,   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,  383,
   -1,  385,  386,  387,   -1,  389,  390,   -1,   -1,  393,
  394,  395,  396,  397,  398,  399,  400,  401,   -1,   -1,
   -1,  405,  406,  407,  408,  409,  410,  411,  412,   -1,
   -1,  256,   -1,   -1,  350,   -1,   -1,  262,   -1,  355,
  424,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,
   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,
  386,  387,   -1,  389,  390,   -1,   -1,  393,  394,  395,
  396,  306,   -1,   -1,  400,  401,   -1,   -1,   -1,  405,
  406,  407,  408,  409,  410,  411,  412,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,  424,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  440,  350,   -1,   -1,   -1,   -1,
  355,   -1,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,  306,
   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,
  385,  386,  387,   -1,  389,  390,   -1,  256,  393,  394,
  395,  396,   -1,  262,   -1,  400,  401,   -1,   -1,   -1,
  405,  406,  407,  408,  409,  410,  411,  412,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  424,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,   -1,   -1,   -1,  440,   -1,  306,   -1,   -1,
   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,  386,
  387,   -1,  389,  390,   -1,  256,  393,  394,  395,  396,
   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,  405,  406,
  407,  408,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,   -1,   -1,  355,  424,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,
  379,   -1,  381,   -1,  383,   -1,  385,  386,  387,   -1,
  389,  390,   -1,  256,  393,  394,  395,  396,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,  405,  406,  407,  408,
  409,  410,  411,  412,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,   -1,   -1,  355,  424,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  381,   -1,  383,   -1,  385,  386,  387,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,
  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,  410,
  411,  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,
   -1,   -1,  355,  424,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,  440,
   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,
  383,   -1,  385,  386,  387,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  395,  396,   -1,   -1,   -1,  400,  401,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  409,  410,  411,  412,
   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,
  355,  424,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,
   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,
  385,  386,  387,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  395,  396,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  424,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,
   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,  386,
  387,   -1,   -1,   -1,   -1,  256,   -1,   -1,  395,  396,
   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  411,  412,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,   -1,   -1,  355,  424,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,
  379,   -1,  381,   -1,  383,   -1,  385,  386,  387,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  396,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  411,  412,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,   -1,   -1,  355,  424,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,   -1,   -1,
   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  381,   -1,  383,   -1,  385,  386,  387,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  396,   -1,   -1,   -1,  400,
  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,  412,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,
   -1,   -1,  355,  424,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,   -1,   -1,   -1,  440,
   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,
  383,   -1,  385,  386,  387,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  396,   -1,   -1,   -1,   -1,  401,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,
   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,
  355,  424,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,
   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,  383,   -1,
  385,  386,  387,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  396,   -1,   -1,   -1,   -1,  401,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,  355,  424,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,
   -1,   -1,  379,   -1,  381,   -1,  383,   -1,  385,  386,
  387,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  401,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  411,  412,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,   -1,   -1,  355,  424,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
   -1,   -1,   -1,  440,   -1,   -1,   -1,   -1,   -1,   -1,
  379,  256,  381,   -1,  383,   -1,  385,  386,  387,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  411,  412,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,   -1,   -1,  355,  424,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,  256,   -1,   -1,
   -1,  440,   -1,   -1,   -1,  256,   -1,   -1,  379,   -1,
  381,  262,  383,   -1,  385,  386,  387,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  401,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,   -1,
  355,  412,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  424,   -1,  306,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  379,   -1,  381,   -1,  383,  440,
  385,  386,  387,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  401,   -1,   -1,   -1,
   -1,  350,   -1,   -1,   -1,   -1,  355,  412,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  424,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  379,   -1,  381,  374,  383,  440,  385,  386,  387,  380,
   -1,  382,  383,  384,  385,   -1,  387,   -1,  389,  390,
   -1,  392,  393,  394,  395,  396,   -1,  398,  399,  400,
  401,   -1,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,   -1,   -1,  256,   -1,  429,   -1,
  431,  440,   -1,  434,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,  289,
  290,  291,  292,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,  307,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,   -1,   -1,   -1,
   -1,  351,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,  387,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,  289,  290,  291,  292,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,  307,  308,   -1,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,   -1,   -1,   -1,   -1,  351,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,  378,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,  387,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,  397,   -1,   -1,   -1,  256,   -1,  403,  404,
   -1,   -1,   -1,   -1,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,  428,  429,  430,  431,  287,   -1,  289,
  290,  291,  292,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,  307,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,   -1,   -1,   -1,
   -1,  351,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,  387,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,  289,  290,  291,  292,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,  307,  308,   -1,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,   -1,   -1,   -1,   -1,  351,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,  378,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,  387,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,  397,   -1,   -1,   -1,  256,   -1,  403,  404,
   -1,   -1,   -1,   -1,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,  428,  429,  430,  431,  287,   -1,  289,
  290,  291,  292,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,  307,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,   -1,   -1,   -1,
   -1,  351,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,  387,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,   -1,
  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,  378,  379,   -1,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,  397,   -1,   -1,   -1,  256,   -1,  403,  404,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,  428,  429,  430,  431,  287,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,  329,
  330,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,  339,
  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,  314,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,   -1,
  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,  397,   -1,  264,  265,   -1,  267,  403,  404,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,   -1,
  290,   -1,   -1,  428,  429,  430,  431,   -1,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,  339,
  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,  379,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,   -1,  290,   -1,   -1,   -1,  439,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,   -1,
  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,  344,
   -1,   -1,   -1,  348,   -1,   -1,   -1,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,  397,   -1,  264,  265,   -1,  267,  403,  404,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,   -1,
  290,   -1,   -1,  428,  429,  430,  431,   -1,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,  339,
  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,   -1,  290,   -1,   -1,   -1,  439,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,   -1,
  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,  378,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,  397,   -1,   -1,   -1,  256,   -1,  403,  404,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,  428,  429,  430,  431,  287,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,  339,
  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,   -1,
  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,  397,   -1,   -1,   -1,  256,   -1,  403,  404,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,  428,  429,  430,  431,  287,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,  339,
  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,   -1,
  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,
  395,   -1,  397,   -1,   -1,   -1,  256,   -1,  403,  404,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,  428,  429,  430,  431,  287,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,   -1,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,  329,
   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,  339,
  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,   -1,
   -1,  256,   -1,  403,  404,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  428,  429,
  430,  431,  287,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,  256,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,  265,   -1,
  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,  326,  279,  328,  329,   -1,   -1,  332,   -1,   -1,
  335,   -1,  337,  290,  339,  340,  341,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,
   -1,  308,   -1,   -1,   -1,  312,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,  326,
   -1,  328,   -1,   -1,   -1,  332,   -1,  382,   -1,  256,
   -1,   -1,   -1,  340,  341,   -1,   -1,  344,  265,   -1,
  267,  348,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,  290,   -1,   -1,   -1,  374,  256,   -1,
   -1,   -1,   -1,  428,  429,   -1,  303,  265,   -1,  267,
   -1,  308,  270,   -1,   -1,  312,   -1,  275,   -1,  256,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,  265,  326,
  267,  328,  290,  270,   -1,  332,  306,   -1,  275,   -1,
   -1,   -1,  279,  340,  341,  303,   -1,  344,   -1,   -1,
  308,  348,  429,  290,  312,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,  326,   -1,
  328,  308,   -1,   -1,  332,  312,   -1,   -1,   -1,   -1,
   -1,   -1,  340,  341,   -1,   -1,  344,   -1,   -1,  326,
  348,  328,   -1,   -1,   -1,  332,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  340,  341,   -1,   -1,  344,   -1,   -1,
   -1,  348,  382,  383,  384,  385,  386,   -1,   -1,  389,
  390,   -1,   -1,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  429,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,   -1,  261,   -1,   -1,   -1,
   -1,  431,   -1,   -1,  434,   -1,   -1,  272,  273,   -1,
   -1,  429,  277,   -1,   -1,   -1,   -1,  282,  283,  284,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  293,  294,
  295,   -1,  429,  298,   -1,   -1,  261,  302,   -1,  304,
  305,   -1,   -1,   -1,   -1,  310,   -1,   -1,  313,   -1,
  315,   -1,   -1,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  286,  327,   -1,   -1,   -1,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,
  305,  346,  347,   -1,  349,  310,   -1,   -1,  353,   -1,
  315,   -1,   -1,  318,   -1,  320,  321,  322,   -1,   -1,
  261,   -1,  327,   -1,   -1,   -1,  331,   -1,  373,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,
   -1,   -1,  347,   -1,  349,  286,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  305,  279,   -1,   -1,  373,  310,
   -1,   -1,   -1,  287,  315,   -1,  290,  318,   -1,  320,
  321,  322,   -1,  388,  429,   -1,  327,   -1,   -1,  303,
  331,   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,
  314,   -1,  343,   -1,   -1,   -1,  347,   -1,  349,  323,
   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
   -1,  335,   -1,  337,  429,  339,  340,  341,  342,   -1,
  344,   -1,  373,   -1,  375,  376,   -1,   -1,  352,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,  385,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,  397,   -1,  264,  265,   -1,  267,  403,
  404,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,
   -1,  290,   -1,   -1,  428,  429,  430,  431,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,
   -1,  310,  311,  312,   -1,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,
  329,   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,
  339,  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,   -1,   -1,  385,   -1,   -1,  388,
  389,  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,
  264,  265,   -1,  267,  403,  404,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,   -1,   -1,  290,   -1,   -1,  428,
  429,  430,  431,   -1,   -1,   -1,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
   -1,  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,
  344,   -1,   -1,   -1,  348,   -1,   -1,   -1,  352,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,  397,   -1,  264,  265,   -1,  267,  403,
  404,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,
   -1,  290,   -1,   -1,  428,  429,  430,  431,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,
   -1,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,
  329,   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,
  339,  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,
  379,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
  389,  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,
  264,  265,   -1,  267,  403,  404,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,   -1,   -1,  290,   -1,   -1,  428,
  429,  430,  431,   -1,   -1,   -1,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
   -1,  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,  378,   -1,   -1,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,  397,   -1,  264,  265,   -1,  267,  403,
  404,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,
   -1,  290,   -1,   -1,  428,  429,  430,  431,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,
   -1,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,
  329,   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,
  339,  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,
   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
  389,  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,
  264,  265,   -1,  267,  403,  404,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,   -1,   -1,  290,   -1,   -1,  428,
  429,  430,  431,   -1,   -1,   -1,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
   -1,  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,  397,   -1,  264,  265,   -1,  267,  403,
  404,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,
   -1,  290,   -1,   -1,  428,  429,  430,  431,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,
   -1,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,
  329,   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,
  339,  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
  389,  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,
  264,  265,   -1,  267,  403,  404,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,   -1,   -1,  290,   -1,   -1,  428,
  429,  430,  431,   -1,   -1,   -1,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
   -1,  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,  397,   -1,  264,  265,   -1,  267,  403,
  404,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,
   -1,  290,   -1,   -1,  428,  429,  430,  431,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,
   -1,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,
  329,   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,
  339,  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  352,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
  389,  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,
  264,  265,   -1,  267,  403,  404,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,   -1,   -1,  290,   -1,   -1,  428,
  429,  430,  431,   -1,   -1,   -1,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,  329,   -1,   -1,  332,   -1,
   -1,  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,   -1,  397,   -1,  264,  265,   -1,  267,  403,
  404,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,
   -1,  290,   -1,   -1,  428,  429,  430,  431,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,
   -1,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,  328,
  329,   -1,   -1,  332,   -1,   -1,  335,   -1,  337,   -1,
  339,  340,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
  389,  390,  391,   -1,   -1,   -1,  395,   -1,  397,   -1,
  264,  265,   -1,  267,  403,  404,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,   -1,   -1,  290,   -1,   -1,  428,
  429,   -1,  431,   -1,   -1,   -1,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,  326,   -1,  328,  329,  275,   -1,  332,   -1,
  279,  335,   -1,  337,   -1,  339,  340,  341,  342,   -1,
  344,  290,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,  308,
   -1,   -1,   -1,  312,   -1,  314,  370,  371,  372,  373,
   -1,  265,   -1,  267,  323,   -1,  270,  326,  382,  328,
   -1,  275,   -1,  332,   -1,  279,  335,   -1,   -1,   -1,
  284,  340,  341,   -1,   -1,  344,  290,   -1,  265,  348,
  267,   -1,   -1,  270,  298,   -1,   -1,   -1,  275,  303,
   -1,   -1,  279,   -1,  308,   -1,   -1,   -1,  312,  313,
   -1,   -1,   -1,  290,  428,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  328,   -1,  303,   -1,  332,   -1,
   -1,  308,   -1,   -1,   -1,  312,  340,  341,   -1,   -1,
  344,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,  326,
   -1,  328,   -1,  275,   -1,  332,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  340,  341,   -1,   -1,  344,  290,   -1,
  429,  348,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  303,   -1,   -1,  275,   -1,  308,   -1,  279,   -1,
  312,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,  290,
   -1,   -1,   -1,   -1,  326,   -1,  328,   -1,   -1,   -1,
  332,   -1,  303,   -1,   -1,   -1,   -1,  308,  340,  341,
   -1,  312,  344,   -1,  346,  429,  348,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  265,  326,  267,  328,   -1,  270,
   -1,  332,   -1,   -1,  275,   -1,   -1,   -1,  279,  340,
  341,   -1,  429,  344,   -1,   -1,   -1,  348,   -1,  290,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  275,  303,   -1,   -1,  279,   -1,  308,   -1,   -1,
  265,  312,  267,   -1,   -1,  270,  290,   -1,   -1,   -1,
  275,   -1,  383,   -1,  279,  326,   -1,  328,   -1,  303,
   -1,  332,   -1,   -1,  308,  290,   -1,  429,  312,  340,
  341,   -1,   -1,  344,   -1,   -1,   -1,  348,  303,   -1,
   -1,   -1,  326,  308,  328,   -1,   -1,  312,  332,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,  341,  429,   -1,
  344,  326,   -1,  328,  348,   -1,   -1,  332,   -1,   -1,
  381,   -1,  265,   -1,  267,  340,  341,  270,   -1,  344,
   -1,   -1,  275,  348,   -1,   -1,  279,   -1,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,  290,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
  303,   -1,   -1,   -1,   -1,  308,  290,   -1,  429,  312,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,
   -1,   -1,   -1,  326,  308,  328,   -1,   -1,  312,  332,
   -1,   -1,   -1,   -1,   -1,  429,   -1,  340,  341,   -1,
   -1,  344,  326,   -1,  328,  348,   -1,   -1,  332,   -1,
   -1,   -1,   -1,  265,  429,  267,  340,  341,  270,   -1,
  344,   -1,   -1,  275,  348,   -1,   -1,  279,   -1,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,  290,   -1,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,
   -1,  303,   -1,   -1,   -1,   -1,  308,  290,   -1,  265,
  312,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,
  303,   -1,   -1,  279,  326,  308,  328,   -1,   -1,  312,
  332,   -1,   -1,   -1,  290,   -1,  429,   -1,  340,  341,
   -1,   -1,  344,  326,   -1,  328,  348,  303,   -1,  332,
   -1,   -1,  308,   -1,   -1,  429,  312,  340,  341,   -1,
   -1,  344,   -1,   -1,   -1,  348,   -1,   -1,   -1,  265,
  326,  267,  328,   -1,  270,   -1,  332,   -1,   -1,  275,
   -1,   -1,   -1,  279,  340,  341,   -1,   -1,  344,   -1,
   -1,   -1,  348,   -1,  290,  265,   -1,  267,   -1,   -1,
  270,   -1,   -1,   -1,   -1,  275,   -1,  303,   -1,  279,
   -1,   -1,  308,   -1,   -1,   -1,  312,   -1,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,   -1,  429,   -1,   -1,
  326,   -1,  328,  303,   -1,   -1,  332,   -1,  308,   -1,
   -1,   -1,  312,   -1,  340,  341,  429,   -1,  344,   -1,
   -1,   -1,  348,   -1,   -1,   -1,  326,   -1,  328,  256,
   -1,   -1,  332,   -1,  261,   -1,   -1,   -1,   -1,   -1,
  340,  341,   -1,  429,  344,  272,  273,   -1,  348,   -1,
  277,   -1,   -1,   -1,   -1,  282,  283,  284,  287,  286,
   -1,   -1,  289,   -1,   -1,   -1,  293,  294,  295,   -1,
   -1,  298,   -1,   -1,   -1,  302,   -1,  304,  305,   -1,
   -1,   -1,   -1,  310,   -1,   -1,  313,   -1,  315,   -1,
   -1,  318,  319,  320,  321,  322,   -1,   -1,   -1,   -1,
  327,   -1,   -1,  429,  331,   -1,  333,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,   -1,  346,
  347,   -1,  349,   -1,   -1,   -1,  353,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  373,   -1,   -1,   -1,
   -1,   -1,  379,  380,   -1,   -1,   -1,   -1,   -1,  388,
  389,  390,  391,   -1,  393,  394,  395,  396,  397,  398,
  399,  400,  261,   -1,  403,  404,  405,  406,  407,  408,
  409,  410,   -1,  272,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,   -1,  282,   -1,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,  305,   -1,   -1,   -1,
   -1,  310,   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,
   -1,  320,  321,  322,   -1,   -1,   -1,   -1,  327,   -1,
   -1,   -1,  331,   -1,  333,  261,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  343,   -1,  272,   -1,  347,   -1,
  349,  277,   -1,   -1,  353,   -1,  282,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  373,  261,   -1,   -1,  304,  305,
  379,  380,   -1,   -1,  310,   -1,   -1,   -1,   -1,  315,
   -1,   -1,  318,   -1,  320,  321,  322,   -1,   -1,   -1,
  286,  327,   -1,   -1,   -1,  331,   -1,  333,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,  261,  305,
  263,  347,   -1,  349,  310,   -1,   -1,  353,   -1,  315,
   -1,   -1,  318,   -1,  320,  321,  322,   -1,   -1,  325,
   -1,  327,   -1,  286,   -1,  331,   -1,  373,   -1,   -1,
   -1,   -1,   -1,  379,  380,   -1,   -1,  343,   -1,   -1,
   -1,  347,  305,  349,   -1,   -1,   -1,  310,   -1,   -1,
   -1,   -1,  315,   -1,   -1,  318,   -1,  320,  321,  322,
   -1,   -1,   -1,   -1,  327,   -1,   -1,  373,  331,   -1,
   -1,  261,   -1,  379,  380,   -1,   -1,   -1,   -1,   -1,
  343,   -1,  272,  273,  347,   -1,  349,  277,   -1,   -1,
   -1,   -1,  282,  283,  284,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,  293,  294,  295,   -1,   -1,  298,   -1,
  373,   -1,  302,   -1,  304,  305,  379,  380,   -1,   -1,
  310,   -1,   -1,  313,   -1,  315,   -1,   -1,  318,  319,
  320,  321,  322,   -1,   -1,   -1,   -1,  327,   -1,   -1,
   -1,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  343,  261,   -1,  346,  347,   -1,  349,
   -1,   -1,   -1,  353,   -1,  272,  273,   -1,   -1,   -1,
  277,   -1,   -1,   -1,   -1,  282,  283,  284,   -1,  286,
   -1,   -1,  289,  373,   -1,   -1,  293,  294,  295,  379,
   -1,  298,   -1,   -1,   -1,  302,   -1,  304,  305,   -1,
   -1,   -1,   -1,  310,   -1,   -1,  313,   -1,  315,   -1,
   -1,  318,  319,  320,  321,  322,   -1,   -1,   -1,   -1,
  327,   -1,   -1,   -1,  331,   -1,  333,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,  261,   -1,  346,
  347,   -1,  349,   -1,   -1,   -1,  353,   -1,  272,  273,
   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,  282,  283,
  284,   -1,  286,   -1,   -1,  289,  373,   -1,   -1,  293,
  294,  295,  379,   -1,  298,   -1,   -1,   -1,  302,   -1,
  304,  305,   -1,   -1,   -1,   -1,  310,   -1,   -1,  313,
   -1,  315,   -1,   -1,  318,  319,  320,  321,  322,   -1,
   -1,   -1,   -1,  327,   -1,   -1,   -1,  331,   -1,  333,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,
  261,   -1,  346,  347,   -1,  349,   -1,   -1,   -1,  353,
   -1,  272,  273,   -1,   -1,   -1,  277,   -1,   -1,   -1,
   -1,  282,  283,  284,   -1,  286,   -1,   -1,  289,  373,
   -1,   -1,  293,  294,  295,  379,   -1,  298,   -1,   -1,
   -1,  302,   -1,  304,  305,   -1,   -1,   -1,   -1,  310,
   -1,   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,
  321,  322,  261,   -1,   -1,   -1,  327,   -1,   -1,   -1,
  331,   -1,  333,  272,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,  343,  282,   -1,  346,  347,  286,  349,   -1,
   -1,   -1,  353,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  304,  305,   -1,   -1,   -1,
   -1,  310,  373,   -1,   -1,   -1,  315,   -1,  379,  318,
   -1,  320,  321,  322,  261,   -1,   -1,   -1,  327,   -1,
   -1,   -1,  331,   -1,  333,  272,   -1,   -1,  261,   -1,
  277,   -1,   -1,   -1,  343,  282,   -1,   -1,  347,  286,
  349,   -1,   -1,   -1,  353,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,   -1,   -1,   -1,  304,  305,   -1,
   -1,   -1,   -1,  310,  373,   -1,   -1,   -1,  315,   -1,
  379,  318,  305,  320,  321,  322,   -1,  310,   -1,   -1,
  327,   -1,  315,   -1,  331,  318,  333,  320,  321,  322,
  261,   -1,   -1,   -1,  327,   -1,  343,   -1,  331,   -1,
  347,   -1,  349,   -1,  261,   -1,  353,   -1,   -1,   -1,
  343,   -1,   -1,   -1,  347,  286,  349,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  373,   -1,   -1,  286,
   -1,   -1,  379,   -1,  305,   -1,   -1,   -1,   -1,  310,
  373,   -1,  375,  376,  315,   -1,  379,  318,  305,  320,
  321,  322,   -1,  310,   -1,   -1,  327,   -1,  315,   -1,
  331,  318,   -1,  320,  321,  322,   -1,   -1,  325,  261,
  327,  263,  343,   -1,  331,   -1,  347,   -1,  349,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,   -1,   -1,
  347,   -1,  349,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  373,   -1,  375,  376,   -1,   -1,  379,   -1,
   -1,   -1,   -1,  305,   -1,   -1,  373,   -1,  310,   -1,
   -1,   -1,  379,  315,   -1,   -1,  318,   -1,  320,  321,
  322,   -1,   -1,  263,   -1,  327,   -1,   -1,   -1,  331,
   -1,   -1,  272,  273,   -1,   -1,   -1,  277,   -1,   -1,
   -1,  343,  282,  283,  284,  347,   -1,  349,   -1,  289,
   -1,   -1,   -1,  293,  294,  295,   -1,   -1,  298,   -1,
   -1,   -1,  302,   -1,  304,   -1,   -1,  261,   -1,   -1,
   -1,  373,   -1,  313,   -1,   -1,   -1,  379,  272,  319,
   -1,   -1,   -1,  277,   -1,  325,   -1,   -1,  282,   -1,
   -1,   -1,  286,  333,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  346,  261,   -1,  263,
  304,  305,   -1,  353,   -1,   -1,  310,   -1,   -1,   -1,
   -1,  315,   -1,   -1,  318,   -1,  320,  321,  322,   -1,
   -1,   -1,  286,  327,   -1,  375,  376,  331,   -1,  333,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,
   -1,  305,   -1,  347,   -1,  349,  310,   -1,   -1,  353,
   -1,  315,   -1,   -1,  318,   -1,  320,  321,  322,   -1,
   -1,  325,   -1,  327,   -1,  272,  273,  331,   -1,  373,
  277,   -1,   -1,   -1,   -1,  282,  283,  284,   -1,  343,
   -1,   -1,  289,  347,   -1,  349,  293,  294,  295,   -1,
   -1,  298,   -1,   -1,  273,  302,   -1,  304,  277,   -1,
   -1,   -1,   -1,  282,  283,  284,  313,   -1,   -1,  373,
  289,   -1,  319,   -1,  293,  294,  295,   -1,   -1,  298,
   -1,   -1,   -1,  302,   -1,   -1,  333,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  346,
  319,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  346,   -1,   -1,
   -1,   -1,   -1,   -1,  353,
  };

//#line 6585 "as-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static ActionScriptParser ()
{
	oob_stack = new Stack<object> ();
}

public ActionScriptParser (SeekableStreamReader reader, CompilationSourceFile file)
	: this (reader, file, file.Compiler.Report)
{
}

public ActionScriptParser (SeekableStreamReader reader, CompilationSourceFile file, Report report)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file);

#if FULL_AST
	lbag = new LocationsBag ();
#else
	lbag = null;
#endif
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
//		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
//		else
//			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

object ConvertAsType(SimpleName sn, object e)
{
	if (sn.Name == "Object") 
		return new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (e));
	else if (sn.Name == "Boolean") 
		return new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (e));
	else if (sn.Name == "Number")
		return new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (e));
	else if (sn.Name == "String")
		return new TypeExpression (compiler.BuiltinTypes.String, GetLocation (e));
	else if (sn.Name == "void")
		return new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (e));
	else
		return e;
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.SUPER:
		return "super";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.EACH:
		return "each";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTENDS:
		return "extends";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOR_EACH:
		return "for each";
	case Token.FUNCTION:
		return "function";
	case Token.FUNCTION_GET:
		return "function get";
	case Token.FUNCTION_SET:
		return "function set";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLEMENTS:
		return "implements";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VAR:
		return "var";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return ".<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
//#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int EACH = 280;
  public const int ELSE = 281;
  public const int ENUM = 282;
  public const int EVENT = 283;
  public const int EXPLICIT = 284;
  public const int EXTENDS = 285;
  public const int EXTERN = 286;
  public const int FALSE = 287;
  public const int FINALLY = 288;
  public const int FIXED = 289;
  public const int FLOAT = 290;
  public const int FOR = 291;
  public const int FOR_EACH = 292;
  public const int FUNCTION = 293;
  public const int FUNCTION_GET = 294;
  public const int FUNCTION_SET = 295;
  public const int GOTO = 296;
  public const int IF = 297;
  public const int IMPLICIT = 298;
  public const int IMPLEMENTS = 299;
  public const int IMPORT = 300;
  public const int IN = 301;
  public const int INDEXER = 302;
  public const int INT = 303;
  public const int INTERFACE = 304;
  public const int INTERNAL = 305;
  public const int IS = 306;
  public const int LOCK = 307;
  public const int LONG = 308;
  public const int NAMESPACE = 309;
  public const int NEW = 310;
  public const int NULL = 311;
  public const int OBJECT = 312;
  public const int OPERATOR = 313;
  public const int OUT = 314;
  public const int OVERRIDE = 315;
  public const int PACKAGE = 316;
  public const int PARAMS = 317;
  public const int PRIVATE = 318;
  public const int PROPERTY = 319;
  public const int PROTECTED = 320;
  public const int PUBLIC = 321;
  public const int READONLY = 322;
  public const int REF = 323;
  public const int RETURN = 324;
  public const int REMOVE = 325;
  public const int SBYTE = 326;
  public const int SEALED = 327;
  public const int SHORT = 328;
  public const int SIZEOF = 329;
  public const int STACKALLOC = 330;
  public const int STATIC = 331;
  public const int STRING = 332;
  public const int STRUCT = 333;
  public const int SWITCH = 334;
  public const int THIS = 335;
  public const int THROW = 336;
  public const int TRUE = 337;
  public const int TRY = 338;
  public const int TYPEOF = 339;
  public const int UINT = 340;
  public const int ULONG = 341;
  public const int UNCHECKED = 342;
  public const int UNSAFE = 343;
  public const int USHORT = 344;
  public const int USING = 345;
  public const int VAR = 346;
  public const int VIRTUAL = 347;
  public const int VOID = 348;
  public const int VOLATILE = 349;
  public const int WHERE = 350;
  public const int WHILE = 351;
  public const int ARGLIST = 352;
  public const int PARTIAL = 353;
  public const int ARROW = 354;
  public const int FROM = 355;
  public const int FROM_FIRST = 356;
  public const int JOIN = 357;
  public const int ON = 358;
  public const int EQUALS = 359;
  public const int SELECT = 360;
  public const int GROUP = 361;
  public const int BY = 362;
  public const int LET = 363;
  public const int ORDERBY = 364;
  public const int ASCENDING = 365;
  public const int DESCENDING = 366;
  public const int INTO = 367;
  public const int INTERR_NULLABLE = 368;
  public const int EXTERN_ALIAS = 369;
  public const int REFVALUE = 370;
  public const int REFTYPE = 371;
  public const int MAKEREF = 372;
  public const int ASYNC = 373;
  public const int AWAIT = 374;
  public const int GET = 375;
  public const int SET = 376;
  public const int LAST_KEYWORD = 377;
  public const int OPEN_BRACE = 378;
  public const int CLOSE_BRACE = 379;
  public const int OPEN_BRACKET = 380;
  public const int CLOSE_BRACKET = 381;
  public const int OPEN_PARENS = 382;
  public const int CLOSE_PARENS = 383;
  public const int DOT = 384;
  public const int COMMA = 385;
  public const int COLON = 386;
  public const int SEMICOLON = 387;
  public const int TILDE = 388;
  public const int PLUS = 389;
  public const int MINUS = 390;
  public const int BANG = 391;
  public const int ASSIGN = 392;
  public const int OP_LT = 393;
  public const int OP_GT = 394;
  public const int BITWISE_AND = 395;
  public const int BITWISE_OR = 396;
  public const int STAR = 397;
  public const int PERCENT = 398;
  public const int DIV = 399;
  public const int CARRET = 400;
  public const int INTERR = 401;
  public const int DOUBLE_COLON = 402;
  public const int OP_INC = 403;
  public const int OP_DEC = 404;
  public const int OP_SHIFT_LEFT = 405;
  public const int OP_SHIFT_RIGHT = 406;
  public const int OP_LE = 407;
  public const int OP_GE = 408;
  public const int OP_EQ = 409;
  public const int OP_NE = 410;
  public const int OP_AND = 411;
  public const int OP_OR = 412;
  public const int OP_MULT_ASSIGN = 413;
  public const int OP_DIV_ASSIGN = 414;
  public const int OP_MOD_ASSIGN = 415;
  public const int OP_ADD_ASSIGN = 416;
  public const int OP_SUB_ASSIGN = 417;
  public const int OP_SHIFT_LEFT_ASSIGN = 418;
  public const int OP_SHIFT_RIGHT_ASSIGN = 419;
  public const int OP_AND_ASSIGN = 420;
  public const int OP_XOR_ASSIGN = 421;
  public const int OP_OR_ASSIGN = 422;
  public const int OP_PTR = 423;
  public const int OP_COALESCING = 424;
  public const int OP_GENERICS_LT = 425;
  public const int OP_GENERICS_LT_DECL = 426;
  public const int OP_GENERICS_GT = 427;
  public const int LITERAL = 428;
  public const int IDENTIFIER = 429;
  public const int OPEN_PARENS_LAMBDA = 430;
  public const int OPEN_PARENS_CAST = 431;
  public const int GENERIC_DIMENSION = 432;
  public const int DEFAULT_COLON = 433;
  public const int OPEN_BRACKET_EXPR = 434;
  public const int EVAL_STATEMENT_PARSER = 435;
  public const int EVAL_COMPILATION_UNIT_PARSER = 436;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 437;
  public const int DOC_SEE = 438;
  public const int GENERATE_COMPLETION = 439;
  public const int COMPLETE_COMPLETION = 440;
  public const int UMINUS = 441;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
