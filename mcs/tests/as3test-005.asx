package
{
	// Class declaration tests.

	import System.*;

	// Test interface delarations

	public interface Inter1 {

		function a():void;
	}

	public interface Inter2 extends Inter1 {

		function a1():int;

		property b:int { get; set; }
		
		property c:int { get; }
		
		property d:int { set; }
		
		indexer this(index:int):int { get; set; }
	}

	public class Class1 {

		// Allow class level imports
		use namespace blah;
		import flash.display.*;

		// Test member declarations

		public var a1:int, a2:Number = 0;
		public var b1:String;
		private var c1:Boolean;

		// Test object declarations
		protected static var d1:Object = { aaa:100 };

		// Test array declarations
		public var ary1:int[] = new int[100];
		public var ary2:String[] = ["aaa", "bbb", "ccc"];
//		public var ary3:Number[] = new Number[10];
//		public var ary4:Number[][] = new Number[50][50];

		// Test const declarations
		public static const _a1:Number = 100.0;
		public static const _a2:Class1 = new Class1();  // Note: this is not a valid C# const but it is a valid AS const

		// Should be inherited from base Object class
		public override function hasOwnProperty(v:Object = null):Boolean {
			return false;
		}

		public override function toString():String {
			return "";
		}

		public override function valueOf():Object {
			return null;
		}

		public function foo(o:Object):void {
		}

	}

	public class Class2 extends Class1 {

		public override function toString():String {
			return "";
		}

	}

	public struct Struct1 {

		public var a:Number, b:int;
		public const c:Boolean = true;

		public function foo(a:int, b:Boolean):Number {
			return 100.0;
		}
	}

	public class Test 
	{
		public static function Main():void {
		}

	}

}
